
stm32h7_dac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a9c  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08006d34  08006d34  00007d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006d70  08006d70  00007d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006d78  08006d78  00007d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006d7c  08006d7c  00007d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000002c  24000000  08006d80  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000334  2400002c  08006dac  0000802c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000360  08006dac  00008360  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000802c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001795a  00000000  00000000  0000805a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c37  00000000  00000000  0001f9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001230  00000000  00000000  000225f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e36  00000000  00000000  00023820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038551  00000000  00000000  00024656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001963d  00000000  00000000  0005cba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001685fc  00000000  00000000  000761e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001de7e0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004d78  00000000  00000000  001de824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  001e359c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400002c 	.word	0x2400002c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006d1c 	.word	0x08006d1c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000030 	.word	0x24000030
 80002d4:	08006d1c 	.word	0x08006d1c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <required_voltage>:
uint32_t square_val[100];
#define PI 3.1415926

uint32_t required_voltage(float v);

uint32_t required_voltage(float v) {
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t dac_value = (uint32_t)((v * 4095) / 3.3);
 80005d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80005d6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000610 <required_voltage+0x48>
 80005da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005de:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80005e2:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 8000608 <required_voltage+0x40>
 80005e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80005ea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80005ee:	ee17 3a90 	vmov	r3, s15
 80005f2:	60fb      	str	r3, [r7, #12]
    return dac_value;
 80005f4:	68fb      	ldr	r3, [r7, #12]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	f3af 8000 	nop.w
 8000608:	66666666 	.word	0x66666666
 800060c:	400a6666 	.word	0x400a6666
 8000610:	457ff000 	.word	0x457ff000

08000614 <get_squareval>:

void get_squareval() {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
    uint32_t voltage = required_voltage(3.2);
 800061a:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 800065c <get_squareval+0x48>
 800061e:	f7ff ffd3 	bl	80005c8 <required_voltage>
 8000622:	6038      	str	r0, [r7, #0]

    for (int i = 0; i < 100; i++) {
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	e010      	b.n	800064c <get_squareval+0x38>
        // Alternate between high and low values for the square wave
        if (i < 50) {
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2b31      	cmp	r3, #49	@ 0x31
 800062e:	dc05      	bgt.n	800063c <get_squareval+0x28>
            square_val[i] = 0;  // Low voltage level
 8000630:	4a0b      	ldr	r2, [pc, #44]	@ (8000660 <get_squareval+0x4c>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2100      	movs	r1, #0
 8000636:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800063a:	e004      	b.n	8000646 <get_squareval+0x32>
        } else {
            square_val[i] = voltage;  // High voltage level
 800063c:	4908      	ldr	r1, [pc, #32]	@ (8000660 <get_squareval+0x4c>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 100; i++) {
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3301      	adds	r3, #1
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2b63      	cmp	r3, #99	@ 0x63
 8000650:	ddeb      	ble.n	800062a <get_squareval+0x16>
        }
    }
}
 8000652:	bf00      	nop
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	404ccccd 	.word	0x404ccccd
 8000660:	24000130 	.word	0x24000130

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066a:	f000 fd5b 	bl	8001124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066e:	f000 f847 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000672:	f000 f94d 	bl	8000910 <MX_GPIO_Init>
  MX_DMA_Init();
 8000676:	f000 f92b 	bl	80008d0 <MX_DMA_Init>
  MX_DAC1_Init();
 800067a:	f000 f8ab 	bl	80007d4 <MX_DAC1_Init>
  MX_TIM2_Init();
 800067e:	f000 f8db 	bl	8000838 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000682:	481b      	ldr	r0, [pc, #108]	@ (80006f0 <main+0x8c>)
 8000684:	f005 f808 	bl	8005698 <HAL_TIM_Base_Start>
  get_squareval();
 8000688:	f7ff ffc4 	bl	8000614 <get_squareval>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1,square_val, 100, DAC_ALIGN_12B_R);
 800068c:	2300      	movs	r3, #0
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	2364      	movs	r3, #100	@ 0x64
 8000692:	4a18      	ldr	r2, [pc, #96]	@ (80006f4 <main+0x90>)
 8000694:	2100      	movs	r1, #0
 8000696:	4818      	ldr	r0, [pc, #96]	@ (80006f8 <main+0x94>)
 8000698:	f000 ff14 	bl	80014c4 <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800069c:	2000      	movs	r0, #0
 800069e:	f000 fb79 	bl	8000d94 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f000 fb76 	bl	8000d94 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80006a8:	2002      	movs	r0, #2
 80006aa:	f000 fb73 	bl	8000d94 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80006ae:	2101      	movs	r1, #1
 80006b0:	2000      	movs	r0, #0
 80006b2:	f000 fbe5 	bl	8000e80 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <main+0x98>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006bc:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80006be:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <main+0x98>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80006c4:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <main+0x98>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <main+0x98>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <main+0x98>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80006d6:	4909      	ldr	r1, [pc, #36]	@ (80006fc <main+0x98>)
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 fc61 	bl	8000fa0 <BSP_COM_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d002      	beq.n	80006ea <main+0x86>
  {
    Error_Handler();
 80006e4:	f000 f976 	bl	80009d4 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e8:	bf00      	nop
 80006ea:	bf00      	nop
 80006ec:	e7fd      	b.n	80006ea <main+0x86>
 80006ee:	bf00      	nop
 80006f0:	240000e4 	.word	0x240000e4
 80006f4:	24000130 	.word	0x24000130
 80006f8:	24000058 	.word	0x24000058
 80006fc:	24000048 	.word	0x24000048

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b09c      	sub	sp, #112	@ 0x70
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800070a:	224c      	movs	r2, #76	@ 0x4c
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f006 fad8 	bl	8006cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2220      	movs	r2, #32
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f006 fad2 	bl	8006cc4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000720:	2002      	movs	r0, #2
 8000722:	f003 fc83 	bl	800402c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	4b28      	ldr	r3, [pc, #160]	@ (80007cc <SystemClock_Config+0xcc>)
 800072c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800072e:	4a27      	ldr	r2, [pc, #156]	@ (80007cc <SystemClock_Config+0xcc>)
 8000730:	f023 0301 	bic.w	r3, r3, #1
 8000734:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000736:	4b25      	ldr	r3, [pc, #148]	@ (80007cc <SystemClock_Config+0xcc>)
 8000738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	4b23      	ldr	r3, [pc, #140]	@ (80007d0 <SystemClock_Config+0xd0>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000748:	4a21      	ldr	r2, [pc, #132]	@ (80007d0 <SystemClock_Config+0xd0>)
 800074a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b1f      	ldr	r3, [pc, #124]	@ (80007d0 <SystemClock_Config+0xd0>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800075c:	bf00      	nop
 800075e:	4b1c      	ldr	r3, [pc, #112]	@ (80007d0 <SystemClock_Config+0xd0>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000766:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800076a:	d1f8      	bne.n	800075e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076c:	2302      	movs	r3, #2
 800076e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000770:	2301      	movs	r3, #1
 8000772:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000774:	2340      	movs	r3, #64	@ 0x40
 8000776:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000778:	2300      	movs	r3, #0
 800077a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000780:	4618      	mov	r0, r3
 8000782:	f003 fc8d 	bl	80040a0 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800078c:	f000 f922 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000790:	233f      	movs	r3, #63	@ 0x3f
 8000792:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2101      	movs	r1, #1
 80007b4:	4618      	mov	r0, r3
 80007b6:	f004 f8cd 	bl	8004954 <HAL_RCC_ClockConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007c0:	f000 f908 	bl	80009d4 <Error_Handler>
  }
}
 80007c4:	bf00      	nop
 80007c6:	3770      	adds	r7, #112	@ 0x70
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	58000400 	.word	0x58000400
 80007d0:	58024800 	.word	0x58024800

080007d4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	@ 0x28
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2224      	movs	r2, #36	@ 0x24
 80007de:	2100      	movs	r1, #0
 80007e0:	4618      	mov	r0, r3
 80007e2:	f006 fa6f 	bl	8006cc4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80007e6:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <MX_DAC1_Init+0x5c>)
 80007e8:	4a12      	ldr	r2, [pc, #72]	@ (8000834 <MX_DAC1_Init+0x60>)
 80007ea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80007ec:	4810      	ldr	r0, [pc, #64]	@ (8000830 <MX_DAC1_Init+0x5c>)
 80007ee:	f000 fe46 	bl	800147e <HAL_DAC_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80007f8:	f000 f8ec 	bl	80009d4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000800:	230a      	movs	r3, #10
 8000802:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000808:	2301      	movs	r3, #1
 800080a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2200      	movs	r2, #0
 8000814:	4619      	mov	r1, r3
 8000816:	4806      	ldr	r0, [pc, #24]	@ (8000830 <MX_DAC1_Init+0x5c>)
 8000818:	f000 ff32 	bl	8001680 <HAL_DAC_ConfigChannel>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000822:	f000 f8d7 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	3728      	adds	r7, #40	@ 0x28
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	24000058 	.word	0x24000058
 8000834:	40007400 	.word	0x40007400

08000838 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083e:	f107 0310 	add.w	r3, r7, #16
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000856:	4b1d      	ldr	r3, [pc, #116]	@ (80008cc <MX_TIM2_Init+0x94>)
 8000858:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800085c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 800085e:	4b1b      	ldr	r3, [pc, #108]	@ (80008cc <MX_TIM2_Init+0x94>)
 8000860:	223f      	movs	r2, #63	@ 0x3f
 8000862:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000864:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <MX_TIM2_Init+0x94>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800086a:	4b18      	ldr	r3, [pc, #96]	@ (80008cc <MX_TIM2_Init+0x94>)
 800086c:	2263      	movs	r2, #99	@ 0x63
 800086e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000870:	4b16      	ldr	r3, [pc, #88]	@ (80008cc <MX_TIM2_Init+0x94>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000876:	4b15      	ldr	r3, [pc, #84]	@ (80008cc <MX_TIM2_Init+0x94>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800087c:	4813      	ldr	r0, [pc, #76]	@ (80008cc <MX_TIM2_Init+0x94>)
 800087e:	f004 feb3 	bl	80055e8 <HAL_TIM_Base_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000888:	f000 f8a4 	bl	80009d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800088c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000890:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000892:	f107 0310 	add.w	r3, r7, #16
 8000896:	4619      	mov	r1, r3
 8000898:	480c      	ldr	r0, [pc, #48]	@ (80008cc <MX_TIM2_Init+0x94>)
 800089a:	f004 ff6d 	bl	8005778 <HAL_TIM_ConfigClockSource>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008a4:	f000 f896 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008a8:	2320      	movs	r3, #32
 80008aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	@ (80008cc <MX_TIM2_Init+0x94>)
 80008b6:	f005 f995 	bl	8005be4 <HAL_TIMEx_MasterConfigSynchronization>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008c0:	f000 f888 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	3720      	adds	r7, #32
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	240000e4 	.word	0x240000e4

080008d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008d6:	4b0d      	ldr	r3, [pc, #52]	@ (800090c <MX_DMA_Init+0x3c>)
 80008d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008dc:	4a0b      	ldr	r2, [pc, #44]	@ (800090c <MX_DMA_Init+0x3c>)
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008e6:	4b09      	ldr	r3, [pc, #36]	@ (800090c <MX_DMA_Init+0x3c>)
 80008e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2100      	movs	r1, #0
 80008f8:	2010      	movs	r0, #16
 80008fa:	f000 fd8c 	bl	8001416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80008fe:	2010      	movs	r0, #16
 8000900:	f000 fda3 	bl	800144a <HAL_NVIC_EnableIRQ>

}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	58024400 	.word	0x58024400

08000910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	@ 0x28
 8000914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	4b29      	ldr	r3, [pc, #164]	@ (80009cc <MX_GPIO_Init+0xbc>)
 8000928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800092c:	4a27      	ldr	r2, [pc, #156]	@ (80009cc <MX_GPIO_Init+0xbc>)
 800092e:	f043 0304 	orr.w	r3, r3, #4
 8000932:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000936:	4b25      	ldr	r3, [pc, #148]	@ (80009cc <MX_GPIO_Init+0xbc>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093c:	f003 0304 	and.w	r3, r3, #4
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000944:	4b21      	ldr	r3, [pc, #132]	@ (80009cc <MX_GPIO_Init+0xbc>)
 8000946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800094a:	4a20      	ldr	r2, [pc, #128]	@ (80009cc <MX_GPIO_Init+0xbc>)
 800094c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000950:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000954:	4b1d      	ldr	r3, [pc, #116]	@ (80009cc <MX_GPIO_Init+0xbc>)
 8000956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b1a      	ldr	r3, [pc, #104]	@ (80009cc <MX_GPIO_Init+0xbc>)
 8000964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000968:	4a18      	ldr	r2, [pc, #96]	@ (80009cc <MX_GPIO_Init+0xbc>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000972:	4b16      	ldr	r3, [pc, #88]	@ (80009cc <MX_GPIO_Init+0xbc>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000980:	4b12      	ldr	r3, [pc, #72]	@ (80009cc <MX_GPIO_Init+0xbc>)
 8000982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000986:	4a11      	ldr	r2, [pc, #68]	@ (80009cc <MX_GPIO_Init+0xbc>)
 8000988:	f043 0310 	orr.w	r3, r3, #16
 800098c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000990:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <MX_GPIO_Init+0xbc>)
 8000992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000996:	f003 0310 	and.w	r3, r3, #16
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2102      	movs	r1, #2
 80009a2:	480b      	ldr	r0, [pc, #44]	@ (80009d0 <MX_GPIO_Init+0xc0>)
 80009a4:	f003 fb28 	bl	8003ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009a8:	2302      	movs	r3, #2
 80009aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	4804      	ldr	r0, [pc, #16]	@ (80009d0 <MX_GPIO_Init+0xc0>)
 80009c0:	f003 f96a 	bl	8003c98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	@ 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	58024400 	.word	0x58024400
 80009d0:	58021000 	.word	0x58021000

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <Error_Handler+0x8>

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <HAL_MspInit+0x30>)
 80009e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009ec:	4a08      	ldr	r2, [pc, #32]	@ (8000a10 <HAL_MspInit+0x30>)
 80009ee:	f043 0302 	orr.w	r3, r3, #2
 80009f2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <HAL_MspInit+0x30>)
 80009f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009fc:	f003 0302 	and.w	r3, r3, #2
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	58024400 	.word	0x58024400

08000a14 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	@ 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a30      	ldr	r2, [pc, #192]	@ (8000af4 <HAL_DAC_MspInit+0xe0>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d159      	bne.n	8000aea <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000a36:	4b30      	ldr	r3, [pc, #192]	@ (8000af8 <HAL_DAC_MspInit+0xe4>)
 8000a38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a3c:	4a2e      	ldr	r2, [pc, #184]	@ (8000af8 <HAL_DAC_MspInit+0xe4>)
 8000a3e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000a42:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000a46:	4b2c      	ldr	r3, [pc, #176]	@ (8000af8 <HAL_DAC_MspInit+0xe4>)
 8000a48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a54:	4b28      	ldr	r3, [pc, #160]	@ (8000af8 <HAL_DAC_MspInit+0xe4>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5a:	4a27      	ldr	r2, [pc, #156]	@ (8000af8 <HAL_DAC_MspInit+0xe4>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a64:	4b24      	ldr	r3, [pc, #144]	@ (8000af8 <HAL_DAC_MspInit+0xe4>)
 8000a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a72:	2310      	movs	r3, #16
 8000a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a76:	2303      	movs	r3, #3
 8000a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	481d      	ldr	r0, [pc, #116]	@ (8000afc <HAL_DAC_MspInit+0xe8>)
 8000a86:	f003 f907 	bl	8003c98 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b00 <HAL_DAC_MspInit+0xec>)
 8000a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8000b04 <HAL_DAC_MspInit+0xf0>)
 8000a8e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000a90:	4b1b      	ldr	r3, [pc, #108]	@ (8000b00 <HAL_DAC_MspInit+0xec>)
 8000a92:	2243      	movs	r2, #67	@ 0x43
 8000a94:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a96:	4b1a      	ldr	r3, [pc, #104]	@ (8000b00 <HAL_DAC_MspInit+0xec>)
 8000a98:	2240      	movs	r2, #64	@ 0x40
 8000a9a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a9c:	4b18      	ldr	r3, [pc, #96]	@ (8000b00 <HAL_DAC_MspInit+0xec>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000aa2:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <HAL_DAC_MspInit+0xec>)
 8000aa4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aa8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000aaa:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <HAL_DAC_MspInit+0xec>)
 8000aac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ab0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ab2:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <HAL_DAC_MspInit+0xec>)
 8000ab4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ab8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <HAL_DAC_MspInit+0xec>)
 8000abc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ac0:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <HAL_DAC_MspInit+0xec>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b00 <HAL_DAC_MspInit+0xec>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000ace:	480c      	ldr	r0, [pc, #48]	@ (8000b00 <HAL_DAC_MspInit+0xec>)
 8000ad0:	f000 ffa6 	bl	8001a20 <HAL_DMA_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000ada:	f7ff ff7b 	bl	80009d4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a07      	ldr	r2, [pc, #28]	@ (8000b00 <HAL_DAC_MspInit+0xec>)
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	4a06      	ldr	r2, [pc, #24]	@ (8000b00 <HAL_DAC_MspInit+0xec>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000aea:	bf00      	nop
 8000aec:	3728      	adds	r7, #40	@ 0x28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40007400 	.word	0x40007400
 8000af8:	58024400 	.word	0x58024400
 8000afc:	58020000 	.word	0x58020000
 8000b00:	2400006c 	.word	0x2400006c
 8000b04:	40020088 	.word	0x40020088

08000b08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b18:	d10e      	bne.n	8000b38 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b44 <HAL_TIM_Base_MspInit+0x3c>)
 8000b1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b20:	4a08      	ldr	r2, [pc, #32]	@ (8000b44 <HAL_TIM_Base_MspInit+0x3c>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b2a:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <HAL_TIM_Base_MspInit+0x3c>)
 8000b2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	58024400 	.word	0x58024400

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <NMI_Handler+0x4>

08000b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <MemManage_Handler+0x4>

08000b60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9e:	f000 fb33 	bl	8001208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000bac:	4802      	ldr	r0, [pc, #8]	@ (8000bb8 <DMA1_Stream5_IRQHandler+0x10>)
 8000bae:	f001 fcfd 	bl	80025ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2400006c 	.word	0x2400006c

08000bbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f000 f9cf 	bl	8000f64 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bd0:	4b43      	ldr	r3, [pc, #268]	@ (8000ce0 <SystemInit+0x114>)
 8000bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bd6:	4a42      	ldr	r2, [pc, #264]	@ (8000ce0 <SystemInit+0x114>)
 8000bd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000be0:	4b40      	ldr	r3, [pc, #256]	@ (8000ce4 <SystemInit+0x118>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f003 030f 	and.w	r3, r3, #15
 8000be8:	2b06      	cmp	r3, #6
 8000bea:	d807      	bhi.n	8000bfc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bec:	4b3d      	ldr	r3, [pc, #244]	@ (8000ce4 <SystemInit+0x118>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f023 030f 	bic.w	r3, r3, #15
 8000bf4:	4a3b      	ldr	r2, [pc, #236]	@ (8000ce4 <SystemInit+0x118>)
 8000bf6:	f043 0307 	orr.w	r3, r3, #7
 8000bfa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bfc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ce8 <SystemInit+0x11c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a39      	ldr	r2, [pc, #228]	@ (8000ce8 <SystemInit+0x11c>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c08:	4b37      	ldr	r3, [pc, #220]	@ (8000ce8 <SystemInit+0x11c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c0e:	4b36      	ldr	r3, [pc, #216]	@ (8000ce8 <SystemInit+0x11c>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	4935      	ldr	r1, [pc, #212]	@ (8000ce8 <SystemInit+0x11c>)
 8000c14:	4b35      	ldr	r3, [pc, #212]	@ (8000cec <SystemInit+0x120>)
 8000c16:	4013      	ands	r3, r2
 8000c18:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c1a:	4b32      	ldr	r3, [pc, #200]	@ (8000ce4 <SystemInit+0x118>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0308 	and.w	r3, r3, #8
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d007      	beq.n	8000c36 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c26:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce4 <SystemInit+0x118>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f023 030f 	bic.w	r3, r3, #15
 8000c2e:	4a2d      	ldr	r2, [pc, #180]	@ (8000ce4 <SystemInit+0x118>)
 8000c30:	f043 0307 	orr.w	r3, r3, #7
 8000c34:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c36:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce8 <SystemInit+0x11c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce8 <SystemInit+0x11c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c42:	4b29      	ldr	r3, [pc, #164]	@ (8000ce8 <SystemInit+0x11c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c48:	4b27      	ldr	r3, [pc, #156]	@ (8000ce8 <SystemInit+0x11c>)
 8000c4a:	4a29      	ldr	r2, [pc, #164]	@ (8000cf0 <SystemInit+0x124>)
 8000c4c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ce8 <SystemInit+0x11c>)
 8000c50:	4a28      	ldr	r2, [pc, #160]	@ (8000cf4 <SystemInit+0x128>)
 8000c52:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c54:	4b24      	ldr	r3, [pc, #144]	@ (8000ce8 <SystemInit+0x11c>)
 8000c56:	4a28      	ldr	r2, [pc, #160]	@ (8000cf8 <SystemInit+0x12c>)
 8000c58:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c5a:	4b23      	ldr	r3, [pc, #140]	@ (8000ce8 <SystemInit+0x11c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c60:	4b21      	ldr	r3, [pc, #132]	@ (8000ce8 <SystemInit+0x11c>)
 8000c62:	4a25      	ldr	r2, [pc, #148]	@ (8000cf8 <SystemInit+0x12c>)
 8000c64:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c66:	4b20      	ldr	r3, [pc, #128]	@ (8000ce8 <SystemInit+0x11c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <SystemInit+0x11c>)
 8000c6e:	4a22      	ldr	r2, [pc, #136]	@ (8000cf8 <SystemInit+0x12c>)
 8000c70:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c72:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce8 <SystemInit+0x11c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce8 <SystemInit+0x11c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ce8 <SystemInit+0x11c>)
 8000c7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c84:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <SystemInit+0x11c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cfc <SystemInit+0x130>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d00 <SystemInit+0x134>)
 8000c90:	4013      	ands	r3, r2
 8000c92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c96:	d202      	bcs.n	8000c9e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c98:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <SystemInit+0x138>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000c9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <SystemInit+0x11c>)
 8000ca0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ca4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d113      	bne.n	8000cd4 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000cac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <SystemInit+0x11c>)
 8000cae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000cb2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce8 <SystemInit+0x11c>)
 8000cb4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cb8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <SystemInit+0x13c>)
 8000cbe:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000cc2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000cc4:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <SystemInit+0x11c>)
 8000cc6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000cca:	4a07      	ldr	r2, [pc, #28]	@ (8000ce8 <SystemInit+0x11c>)
 8000ccc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000cd0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00
 8000ce4:	52002000 	.word	0x52002000
 8000ce8:	58024400 	.word	0x58024400
 8000cec:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cf0:	02020200 	.word	0x02020200
 8000cf4:	01ff0000 	.word	0x01ff0000
 8000cf8:	01010280 	.word	0x01010280
 8000cfc:	5c001000 	.word	0x5c001000
 8000d00:	ffff0000 	.word	0xffff0000
 8000d04:	51008108 	.word	0x51008108
 8000d08:	52004000 	.word	0x52004000

08000d0c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000d10:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <ExitRun0Mode+0x2c>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	4a08      	ldr	r2, [pc, #32]	@ (8000d38 <ExitRun0Mode+0x2c>)
 8000d16:	f043 0302 	orr.w	r3, r3, #2
 8000d1a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000d1c:	bf00      	nop
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <ExitRun0Mode+0x2c>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0f9      	beq.n	8000d1e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000d2a:	bf00      	nop
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	58024800 	.word	0x58024800

08000d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d3c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000d78 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000d40:	f7ff ffe4 	bl	8000d0c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d44:	f7ff ff42 	bl	8000bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d48:	480c      	ldr	r0, [pc, #48]	@ (8000d7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d4a:	490d      	ldr	r1, [pc, #52]	@ (8000d80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d60:	4c0a      	ldr	r4, [pc, #40]	@ (8000d8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d6e:	f005 ffb1 	bl	8006cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d72:	f7ff fc77 	bl	8000664 <main>
  bx  lr
 8000d76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d78:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d7c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d80:	2400002c 	.word	0x2400002c
  ldr r2, =_sidata
 8000d84:	08006d80 	.word	0x08006d80
  ldr r2, =_sbss
 8000d88:	2400002c 	.word	0x2400002c
  ldr r4, =_ebss
 8000d8c:	24000360 	.word	0x24000360

08000d90 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC3_IRQHandler>
	...

08000d94 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08c      	sub	sp, #48	@ 0x30
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d009      	beq.n	8000dbc <BSP_LED_Init+0x28>
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d006      	beq.n	8000dbc <BSP_LED_Init+0x28>
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d003      	beq.n	8000dbc <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000db4:	f06f 0301 	mvn.w	r3, #1
 8000db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000dba:	e055      	b.n	8000e68 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10f      	bne.n	8000de2 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8000e74 <BSP_LED_Init+0xe0>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc8:	4a2a      	ldr	r2, [pc, #168]	@ (8000e74 <BSP_LED_Init+0xe0>)
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd2:	4b28      	ldr	r3, [pc, #160]	@ (8000e74 <BSP_LED_Init+0xe0>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	e021      	b.n	8000e26 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d10f      	bne.n	8000e08 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000de8:	4b22      	ldr	r3, [pc, #136]	@ (8000e74 <BSP_LED_Init+0xe0>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dee:	4a21      	ldr	r2, [pc, #132]	@ (8000e74 <BSP_LED_Init+0xe0>)
 8000df0:	f043 0302 	orr.w	r3, r3, #2
 8000df4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e74 <BSP_LED_Init+0xe0>)
 8000dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	e00e      	b.n	8000e26 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000e08:	4b1a      	ldr	r3, [pc, #104]	@ (8000e74 <BSP_LED_Init+0xe0>)
 8000e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0e:	4a19      	ldr	r2, [pc, #100]	@ (8000e74 <BSP_LED_Init+0xe0>)
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e18:	4b16      	ldr	r3, [pc, #88]	@ (8000e74 <BSP_LED_Init+0xe0>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	4a13      	ldr	r2, [pc, #76]	@ (8000e78 <BSP_LED_Init+0xe4>)
 8000e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e2e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e7c <BSP_LED_Init+0xe8>)
 8000e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e44:	f107 0218 	add.w	r2, r7, #24
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f002 ff24 	bl	8003c98 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <BSP_LED_Init+0xe8>)
 8000e54:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4a07      	ldr	r2, [pc, #28]	@ (8000e78 <BSP_LED_Init+0xe4>)
 8000e5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e60:	2200      	movs	r2, #0
 8000e62:	4619      	mov	r1, r3
 8000e64:	f003 f8c8 	bl	8003ff8 <HAL_GPIO_WritePin>
  }

  return ret;
 8000e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3730      	adds	r7, #48	@ 0x30
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	58024400 	.word	0x58024400
 8000e78:	08006d44 	.word	0x08006d44
 8000e7c:	2400000c 	.word	0x2400000c

08000e80 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	460a      	mov	r2, r1
 8000e8a:	71fb      	strb	r3, [r7, #7]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000e90:	4b2e      	ldr	r3, [pc, #184]	@ (8000f4c <BSP_PB_Init+0xcc>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e96:	4a2d      	ldr	r2, [pc, #180]	@ (8000f4c <BSP_PB_Init+0xcc>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f4c <BSP_PB_Init+0xcc>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000eae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eb2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000ebc:	79bb      	ldrb	r3, [r7, #6]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d10c      	bne.n	8000edc <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	4a21      	ldr	r2, [pc, #132]	@ (8000f50 <BSP_PB_Init+0xd0>)
 8000eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ece:	f107 020c 	add.w	r2, r7, #12
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f002 fedf 	bl	8003c98 <HAL_GPIO_Init>
 8000eda:	e031      	b.n	8000f40 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000edc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ee0:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f50 <BSP_PB_Init+0xd0>)
 8000ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eea:	f107 020c 	add.w	r2, r7, #12
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f002 fed1 	bl	8003c98 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	4a16      	ldr	r2, [pc, #88]	@ (8000f54 <BSP_PB_Init+0xd4>)
 8000efc:	441a      	add	r2, r3
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	4915      	ldr	r1, [pc, #84]	@ (8000f58 <BSP_PB_Init+0xd8>)
 8000f02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f06:	4619      	mov	r1, r3
 8000f08:	4610      	mov	r0, r2
 8000f0a:	f002 fe80 	bl	8003c0e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	4a10      	ldr	r2, [pc, #64]	@ (8000f54 <BSP_PB_Init+0xd4>)
 8000f14:	1898      	adds	r0, r3, r2
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	4a10      	ldr	r2, [pc, #64]	@ (8000f5c <BSP_PB_Init+0xdc>)
 8000f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2100      	movs	r1, #0
 8000f22:	f002 fe55 	bl	8003bd0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000f26:	2028      	movs	r0, #40	@ 0x28
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8000f60 <BSP_PB_Init+0xe0>)
 8000f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f30:	2200      	movs	r2, #0
 8000f32:	4619      	mov	r1, r3
 8000f34:	f000 fa6f 	bl	8001416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000f38:	2328      	movs	r3, #40	@ 0x28
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 fa85 	bl	800144a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3720      	adds	r7, #32
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	58024400 	.word	0x58024400
 8000f50:	24000018 	.word	0x24000018
 8000f54:	240002c0 	.word	0x240002c0
 8000f58:	08006d4c 	.word	0x08006d4c
 8000f5c:	2400001c 	.word	0x2400001c
 8000f60:	24000020 	.word	0x24000020

08000f64 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <BSP_PB_IRQHandler+0x20>)
 8000f74:	4413      	add	r3, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f002 fe5e 	bl	8003c38 <HAL_EXTI_IRQHandler>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	240002c0 	.word	0x240002c0

08000f88 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000fb6:	f06f 0301 	mvn.w	r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	e018      	b.n	8000ff0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	2294      	movs	r2, #148	@ 0x94
 8000fc2:	fb02 f303 	mul.w	r3, r2, r3
 8000fc6:	4a0d      	ldr	r2, [pc, #52]	@ (8000ffc <BSP_COM_Init+0x5c>)
 8000fc8:	4413      	add	r3, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f852 	bl	8001074 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2294      	movs	r2, #148	@ 0x94
 8000fd4:	fb02 f303 	mul.w	r3, r2, r3
 8000fd8:	4a08      	ldr	r2, [pc, #32]	@ (8000ffc <BSP_COM_Init+0x5c>)
 8000fda:	4413      	add	r3, r2
 8000fdc:	6839      	ldr	r1, [r7, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f80e 	bl	8001000 <MX_USART3_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d002      	beq.n	8000ff0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000fea:	f06f 0303 	mvn.w	r3, #3
 8000fee:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	240002c8 	.word	0x240002c8

08001000 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <MX_USART3_Init+0x60>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	220c      	movs	r2, #12
 800101e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	895b      	ldrh	r3, [r3, #10]
 8001024:	461a      	mov	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	891b      	ldrh	r3, [r3, #8]
 8001036:	461a      	mov	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	899b      	ldrh	r3, [r3, #12]
 8001040:	461a      	mov	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800104c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f004 fe56 	bl	8005d00 <HAL_UART_Init>
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	24000008 	.word	0x24000008

08001064 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001068:	2000      	movs	r0, #0
 800106a:	f7ff ff8d 	bl	8000f88 <BSP_PB_Callback>
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	@ 0x28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800107c:	4b27      	ldr	r3, [pc, #156]	@ (800111c <COM1_MspInit+0xa8>)
 800107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001082:	4a26      	ldr	r2, [pc, #152]	@ (800111c <COM1_MspInit+0xa8>)
 8001084:	f043 0308 	orr.w	r3, r3, #8
 8001088:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <COM1_MspInit+0xa8>)
 800108e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <COM1_MspInit+0xa8>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a0:	4a1e      	ldr	r2, [pc, #120]	@ (800111c <COM1_MspInit+0xa8>)
 80010a2:	f043 0308 	orr.w	r3, r3, #8
 80010a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010aa:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <COM1_MspInit+0xa8>)
 80010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80010b8:	4b18      	ldr	r3, [pc, #96]	@ (800111c <COM1_MspInit+0xa8>)
 80010ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010be:	4a17      	ldr	r2, [pc, #92]	@ (800111c <COM1_MspInit+0xa8>)
 80010c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010c8:	4b14      	ldr	r3, [pc, #80]	@ (800111c <COM1_MspInit+0xa8>)
 80010ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80010d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010da:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e0:	2302      	movs	r3, #2
 80010e2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80010e4:	2301      	movs	r3, #1
 80010e6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80010e8:	2307      	movs	r3, #7
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	480b      	ldr	r0, [pc, #44]	@ (8001120 <COM1_MspInit+0xac>)
 80010f4:	f002 fdd0 	bl	8003c98 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80010f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010fc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001102:	2307      	movs	r3, #7
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	4804      	ldr	r0, [pc, #16]	@ (8001120 <COM1_MspInit+0xac>)
 800110e:	f002 fdc3 	bl	8003c98 <HAL_GPIO_Init>
}
 8001112:	bf00      	nop
 8001114:	3728      	adds	r7, #40	@ 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	58024400 	.word	0x58024400
 8001120:	58020c00 	.word	0x58020c00

08001124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112a:	2003      	movs	r0, #3
 800112c:	f000 f968 	bl	8001400 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001130:	f003 fdc6 	bl	8004cc0 <HAL_RCC_GetSysClockFreq>
 8001134:	4602      	mov	r2, r0
 8001136:	4b15      	ldr	r3, [pc, #84]	@ (800118c <HAL_Init+0x68>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	0a1b      	lsrs	r3, r3, #8
 800113c:	f003 030f 	and.w	r3, r3, #15
 8001140:	4913      	ldr	r1, [pc, #76]	@ (8001190 <HAL_Init+0x6c>)
 8001142:	5ccb      	ldrb	r3, [r1, r3]
 8001144:	f003 031f 	and.w	r3, r3, #31
 8001148:	fa22 f303 	lsr.w	r3, r2, r3
 800114c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800114e:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <HAL_Init+0x68>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	4a0e      	ldr	r2, [pc, #56]	@ (8001190 <HAL_Init+0x6c>)
 8001158:	5cd3      	ldrb	r3, [r2, r3]
 800115a:	f003 031f 	and.w	r3, r3, #31
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	fa22 f303 	lsr.w	r3, r2, r3
 8001164:	4a0b      	ldr	r2, [pc, #44]	@ (8001194 <HAL_Init+0x70>)
 8001166:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001168:	4a0b      	ldr	r2, [pc, #44]	@ (8001198 <HAL_Init+0x74>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800116e:	2000      	movs	r0, #0
 8001170:	f000 f814 	bl	800119c <HAL_InitTick>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e002      	b.n	8001184 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800117e:	f7ff fc2f 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	58024400 	.word	0x58024400
 8001190:	08006d34 	.word	0x08006d34
 8001194:	24000004 	.word	0x24000004
 8001198:	24000000 	.word	0x24000000

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011a4:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <HAL_InitTick+0x60>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d101      	bne.n	80011b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e021      	b.n	80011f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011b0:	4b13      	ldr	r3, [pc, #76]	@ (8001200 <HAL_InitTick+0x64>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <HAL_InitTick+0x60>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011be:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 f94d 	bl	8001466 <HAL_SYSTICK_Config>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00e      	b.n	80011f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b0f      	cmp	r3, #15
 80011da:	d80a      	bhi.n	80011f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011dc:	2200      	movs	r2, #0
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f000 f917 	bl	8001416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e8:	4a06      	ldr	r2, [pc, #24]	@ (8001204 <HAL_InitTick+0x68>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e000      	b.n	80011f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	24000028 	.word	0x24000028
 8001200:	24000000 	.word	0x24000000
 8001204:	24000024 	.word	0x24000024

08001208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800120c:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_IncTick+0x20>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4b06      	ldr	r3, [pc, #24]	@ (800122c <HAL_IncTick+0x24>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4413      	add	r3, r2
 8001218:	4a04      	ldr	r2, [pc, #16]	@ (800122c <HAL_IncTick+0x24>)
 800121a:	6013      	str	r3, [r2, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	24000028 	.word	0x24000028
 800122c:	2400035c 	.word	0x2400035c

08001230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b03      	ldr	r3, [pc, #12]	@ (8001244 <HAL_GetTick+0x14>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	2400035c 	.word	0x2400035c

08001248 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800124c:	4b03      	ldr	r3, [pc, #12]	@ (800125c <HAL_GetREVID+0x14>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	0c1b      	lsrs	r3, r3, #16
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	5c001000 	.word	0x5c001000

08001260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001270:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800127c:	4013      	ands	r3, r2
 800127e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 800128a:	4313      	orrs	r3, r2
 800128c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128e:	4a04      	ldr	r2, [pc, #16]	@ (80012a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	60d3      	str	r3, [r2, #12]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00
 80012a4:	05fa0000 	.word	0x05fa0000

080012a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ac:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	f003 0307 	and.w	r3, r3, #7
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	db0b      	blt.n	80012ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	f003 021f 	and.w	r2, r3, #31
 80012dc:	4907      	ldr	r1, [pc, #28]	@ (80012fc <__NVIC_EnableIRQ+0x38>)
 80012de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e2:	095b      	lsrs	r3, r3, #5
 80012e4:	2001      	movs	r0, #1
 80012e6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000e100 	.word	0xe000e100

08001300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800130c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001310:	2b00      	cmp	r3, #0
 8001312:	db0a      	blt.n	800132a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	490c      	ldr	r1, [pc, #48]	@ (800134c <__NVIC_SetPriority+0x4c>)
 800131a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800131e:	0112      	lsls	r2, r2, #4
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	440b      	add	r3, r1
 8001324:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001328:	e00a      	b.n	8001340 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4908      	ldr	r1, [pc, #32]	@ (8001350 <__NVIC_SetPriority+0x50>)
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	3b04      	subs	r3, #4
 8001338:	0112      	lsls	r2, r2, #4
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	440b      	add	r3, r1
 800133e:	761a      	strb	r2, [r3, #24]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000e100 	.word	0xe000e100
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	@ 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f1c3 0307 	rsb	r3, r3, #7
 800136e:	2b04      	cmp	r3, #4
 8001370:	bf28      	it	cs
 8001372:	2304      	movcs	r3, #4
 8001374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3304      	adds	r3, #4
 800137a:	2b06      	cmp	r3, #6
 800137c:	d902      	bls.n	8001384 <NVIC_EncodePriority+0x30>
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3b03      	subs	r3, #3
 8001382:	e000      	b.n	8001386 <NVIC_EncodePriority+0x32>
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	f04f 32ff 	mov.w	r2, #4294967295
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43da      	mvns	r2, r3
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	401a      	ands	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800139c:	f04f 31ff 	mov.w	r1, #4294967295
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43d9      	mvns	r1, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	4313      	orrs	r3, r2
         );
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3724      	adds	r7, #36	@ 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013cc:	d301      	bcc.n	80013d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ce:	2301      	movs	r3, #1
 80013d0:	e00f      	b.n	80013f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d2:	4a0a      	ldr	r2, [pc, #40]	@ (80013fc <SysTick_Config+0x40>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013da:	210f      	movs	r1, #15
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295
 80013e0:	f7ff ff8e 	bl	8001300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e4:	4b05      	ldr	r3, [pc, #20]	@ (80013fc <SysTick_Config+0x40>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ea:	4b04      	ldr	r3, [pc, #16]	@ (80013fc <SysTick_Config+0x40>)
 80013ec:	2207      	movs	r2, #7
 80013ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	e000e010 	.word	0xe000e010

08001400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff29 	bl	8001260 <__NVIC_SetPriorityGrouping>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001424:	f7ff ff40 	bl	80012a8 <__NVIC_GetPriorityGrouping>
 8001428:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	68b9      	ldr	r1, [r7, #8]
 800142e:	6978      	ldr	r0, [r7, #20]
 8001430:	f7ff ff90 	bl	8001354 <NVIC_EncodePriority>
 8001434:	4602      	mov	r2, r0
 8001436:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff5f 	bl	8001300 <__NVIC_SetPriority>
}
 8001442:	bf00      	nop
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff33 	bl	80012c4 <__NVIC_EnableIRQ>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ffa4 	bl	80013bc <SysTick_Config>
 8001474:	4603      	mov	r3, r0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e014      	b.n	80014ba <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	791b      	ldrb	r3, [r3, #4]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d105      	bne.n	80014a6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff fab7 	bl	8000a14 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2202      	movs	r2, #2
 80014aa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0a2      	b.n	8001622 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	795b      	ldrb	r3, [r3, #5]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d101      	bne.n	80014e8 <HAL_DAC_Start_DMA+0x24>
 80014e4:	2302      	movs	r3, #2
 80014e6:	e09c      	b.n	8001622 <HAL_DAC_Start_DMA+0x15e>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2201      	movs	r2, #1
 80014ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2202      	movs	r2, #2
 80014f2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d129      	bne.n	800154e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	4a4b      	ldr	r2, [pc, #300]	@ (800162c <HAL_DAC_Start_DMA+0x168>)
 8001500:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	4a4a      	ldr	r2, [pc, #296]	@ (8001630 <HAL_DAC_Start_DMA+0x16c>)
 8001508:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	4a49      	ldr	r2, [pc, #292]	@ (8001634 <HAL_DAC_Start_DMA+0x170>)
 8001510:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001520:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_DAC_Start_DMA+0x6c>
 8001528:	6a3b      	ldr	r3, [r7, #32]
 800152a:	2b04      	cmp	r3, #4
 800152c:	d005      	beq.n	800153a <HAL_DAC_Start_DMA+0x76>
 800152e:	e009      	b.n	8001544 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	3308      	adds	r3, #8
 8001536:	613b      	str	r3, [r7, #16]
        break;
 8001538:	e033      	b.n	80015a2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	330c      	adds	r3, #12
 8001540:	613b      	str	r3, [r7, #16]
        break;
 8001542:	e02e      	b.n	80015a2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	3310      	adds	r3, #16
 800154a:	613b      	str	r3, [r7, #16]
        break;
 800154c:	e029      	b.n	80015a2 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	4a39      	ldr	r2, [pc, #228]	@ (8001638 <HAL_DAC_Start_DMA+0x174>)
 8001554:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	4a38      	ldr	r2, [pc, #224]	@ (800163c <HAL_DAC_Start_DMA+0x178>)
 800155c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	4a37      	ldr	r2, [pc, #220]	@ (8001640 <HAL_DAC_Start_DMA+0x17c>)
 8001564:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001574:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_DAC_Start_DMA+0xc0>
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	2b04      	cmp	r3, #4
 8001580:	d005      	beq.n	800158e <HAL_DAC_Start_DMA+0xca>
 8001582:	e009      	b.n	8001598 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	3314      	adds	r3, #20
 800158a:	613b      	str	r3, [r7, #16]
        break;
 800158c:	e009      	b.n	80015a2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	3318      	adds	r3, #24
 8001594:	613b      	str	r3, [r7, #16]
        break;
 8001596:	e004      	b.n	80015a2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	331c      	adds	r3, #28
 800159e:	613b      	str	r3, [r7, #16]
        break;
 80015a0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d111      	bne.n	80015cc <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80015b6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6898      	ldr	r0, [r3, #8]
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	f000 fd89 	bl	80020d8 <HAL_DMA_Start_IT>
 80015c6:	4603      	mov	r3, r0
 80015c8:	75fb      	strb	r3, [r7, #23]
 80015ca:	e010      	b.n	80015ee <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80015da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	68d8      	ldr	r0, [r3, #12]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	f000 fd77 	bl	80020d8 <HAL_DMA_Start_IT>
 80015ea:	4603      	mov	r3, r0
 80015ec:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10c      	bne.n	8001614 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6819      	ldr	r1, [r3, #0]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	2201      	movs	r2, #1
 8001608:	409a      	lsls	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	e005      	b.n	8001620 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	f043 0204 	orr.w	r2, r3, #4
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001620:	7dfb      	ldrb	r3, [r7, #23]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	0800190d 	.word	0x0800190d
 8001630:	0800192f 	.word	0x0800192f
 8001634:	0800194b 	.word	0x0800194b
 8001638:	080019b5 	.word	0x080019b5
 800163c:	080019d7 	.word	0x080019d7
 8001640:	080019f3 	.word	0x080019f3

08001644 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	@ 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800168c:	2300      	movs	r3, #0
 800168e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <HAL_DAC_ConfigChannel+0x1e>
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e12d      	b.n	80018fe <HAL_DAC_ConfigChannel+0x27e>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b04      	cmp	r3, #4
    }
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	795b      	ldrb	r3, [r3, #5]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <HAL_DAC_ConfigChannel+0x34>
 80016b0:	2302      	movs	r3, #2
 80016b2:	e124      	b.n	80018fe <HAL_DAC_ConfigChannel+0x27e>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2201      	movs	r2, #1
 80016b8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2202      	movs	r2, #2
 80016be:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b04      	cmp	r3, #4
 80016c6:	d17a      	bne.n	80017be <HAL_DAC_ConfigChannel+0x13e>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80016c8:	f7ff fdb2 	bl	8001230 <HAL_GetTick>
 80016cc:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d13d      	bne.n	8001750 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80016d4:	e018      	b.n	8001708 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80016d6:	f7ff fdab 	bl	8001230 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d911      	bls.n	8001708 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016ea:	4b87      	ldr	r3, [pc, #540]	@ (8001908 <HAL_DAC_ConfigChannel+0x288>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00a      	beq.n	8001708 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	f043 0208 	orr.w	r2, r3, #8
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2203      	movs	r2, #3
 8001702:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e0fa      	b.n	80018fe <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800170e:	4b7e      	ldr	r3, [pc, #504]	@ (8001908 <HAL_DAC_ConfigChannel+0x288>)
 8001710:	4013      	ands	r3, r2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1df      	bne.n	80016d6 <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	6992      	ldr	r2, [r2, #24]
 800171e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001720:	e020      	b.n	8001764 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001722:	f7ff fd85 	bl	8001230 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b01      	cmp	r3, #1
 800172e:	d90f      	bls.n	8001750 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001736:	2b00      	cmp	r3, #0
 8001738:	da0a      	bge.n	8001750 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	f043 0208 	orr.w	r2, r3, #8
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2203      	movs	r2, #3
 800174a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e0d6      	b.n	80018fe <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001756:	2b00      	cmp	r3, #0
 8001758:	dbe3      	blt.n	8001722 <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	6992      	ldr	r2, [r2, #24]
 8001762:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001774:	fa01 f303 	lsl.w	r3, r1, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	ea02 0103 	and.w	r1, r2, r3
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	69da      	ldr	r2, [r3, #28]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f003 0310 	and.w	r3, r3, #16
 8001788:	409a      	lsls	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	21ff      	movs	r1, #255	@ 0xff
 80017a0:	fa01 f303 	lsl.w	r3, r1, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	ea02 0103 	and.w	r1, r2, r3
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	6a1a      	ldr	r2, [r3, #32]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	409a      	lsls	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d11d      	bne.n	8001802 <HAL_DAC_ConfigChannel+0x182>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017cc:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	221f      	movs	r2, #31
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f003 0310 	and.w	r3, r3, #16
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001808:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	2207      	movs	r2, #7
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d102      	bne.n	800182c <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = 0x00000000UL;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	@ 0x24
 800182a:	e00f      	b.n	800184c <HAL_DAC_ConfigChannel+0x1cc>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b02      	cmp	r3, #2
 8001832:	d102      	bne.n	800183a <HAL_DAC_ConfigChannel+0x1ba>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001834:	2301      	movs	r3, #1
 8001836:	627b      	str	r3, [r7, #36]	@ 0x24
 8001838:	e008      	b.n	800184c <HAL_DAC_ConfigChannel+0x1cc>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d102      	bne.n	8001848 <HAL_DAC_ConfigChannel+0x1c8>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001842:	2301      	movs	r3, #1
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
 8001846:	e001      	b.n	800184c <HAL_DAC_ConfigChannel+0x1cc>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	4313      	orrs	r3, r2
 8001856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001858:	4313      	orrs	r3, r2
 800185a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6819      	ldr	r1, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0310 	and.w	r3, r3, #16
 8001882:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	400a      	ands	r2, r1
 8001892:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f003 0310 	and.w	r3, r3, #16
 80018a2:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0310 	and.w	r3, r3, #16
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6819      	ldr	r1, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f003 0310 	and.w	r3, r3, #16
 80018de:	22c0      	movs	r2, #192	@ 0xc0
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43da      	mvns	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	400a      	ands	r2, r1
 80018ec:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2201      	movs	r2, #1
 80018f2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80018fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3728      	adds	r7, #40	@ 0x28
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20008000 	.word	0x20008000

0800190c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001918:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f7ff fe92 	bl	8001644 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2201      	movs	r2, #1
 8001924:	711a      	strb	r2, [r3, #4]
}
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b084      	sub	sp, #16
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800193a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f7ff fe8b 	bl	8001658 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001956:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	f043 0204 	orr.w	r2, r3, #4
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f7ff fe81 	bl	800166c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2201      	movs	r2, #1
 800196e:	711a      	strb	r2, [r3, #4]
}
 8001970:	bf00      	nop
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019c0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f7ff ffd8 	bl	8001978 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2201      	movs	r2, #1
 80019cc:	711a      	strb	r2, [r3, #4]
}
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b084      	sub	sp, #16
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019e2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7ff ffd1 	bl	800198c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b084      	sub	sp, #16
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019fe:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	f043 0204 	orr.w	r2, r3, #4
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f7ff ffc7 	bl	80019a0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2201      	movs	r2, #1
 8001a16:	711a      	strb	r2, [r3, #4]
}
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001a28:	f7ff fc02 	bl	8001230 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e316      	b.n	8002066 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a66      	ldr	r2, [pc, #408]	@ (8001bd8 <HAL_DMA_Init+0x1b8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d04a      	beq.n	8001ad8 <HAL_DMA_Init+0xb8>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a65      	ldr	r2, [pc, #404]	@ (8001bdc <HAL_DMA_Init+0x1bc>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d045      	beq.n	8001ad8 <HAL_DMA_Init+0xb8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a63      	ldr	r2, [pc, #396]	@ (8001be0 <HAL_DMA_Init+0x1c0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d040      	beq.n	8001ad8 <HAL_DMA_Init+0xb8>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a62      	ldr	r2, [pc, #392]	@ (8001be4 <HAL_DMA_Init+0x1c4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d03b      	beq.n	8001ad8 <HAL_DMA_Init+0xb8>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a60      	ldr	r2, [pc, #384]	@ (8001be8 <HAL_DMA_Init+0x1c8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d036      	beq.n	8001ad8 <HAL_DMA_Init+0xb8>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a5f      	ldr	r2, [pc, #380]	@ (8001bec <HAL_DMA_Init+0x1cc>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d031      	beq.n	8001ad8 <HAL_DMA_Init+0xb8>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a5d      	ldr	r2, [pc, #372]	@ (8001bf0 <HAL_DMA_Init+0x1d0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d02c      	beq.n	8001ad8 <HAL_DMA_Init+0xb8>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a5c      	ldr	r2, [pc, #368]	@ (8001bf4 <HAL_DMA_Init+0x1d4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d027      	beq.n	8001ad8 <HAL_DMA_Init+0xb8>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a5a      	ldr	r2, [pc, #360]	@ (8001bf8 <HAL_DMA_Init+0x1d8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d022      	beq.n	8001ad8 <HAL_DMA_Init+0xb8>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a59      	ldr	r2, [pc, #356]	@ (8001bfc <HAL_DMA_Init+0x1dc>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d01d      	beq.n	8001ad8 <HAL_DMA_Init+0xb8>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a57      	ldr	r2, [pc, #348]	@ (8001c00 <HAL_DMA_Init+0x1e0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d018      	beq.n	8001ad8 <HAL_DMA_Init+0xb8>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a56      	ldr	r2, [pc, #344]	@ (8001c04 <HAL_DMA_Init+0x1e4>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d013      	beq.n	8001ad8 <HAL_DMA_Init+0xb8>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a54      	ldr	r2, [pc, #336]	@ (8001c08 <HAL_DMA_Init+0x1e8>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d00e      	beq.n	8001ad8 <HAL_DMA_Init+0xb8>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a53      	ldr	r2, [pc, #332]	@ (8001c0c <HAL_DMA_Init+0x1ec>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d009      	beq.n	8001ad8 <HAL_DMA_Init+0xb8>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a51      	ldr	r2, [pc, #324]	@ (8001c10 <HAL_DMA_Init+0x1f0>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d004      	beq.n	8001ad8 <HAL_DMA_Init+0xb8>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a50      	ldr	r2, [pc, #320]	@ (8001c14 <HAL_DMA_Init+0x1f4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d101      	bne.n	8001adc <HAL_DMA_Init+0xbc>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <HAL_DMA_Init+0xbe>
 8001adc:	2300      	movs	r3, #0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 813b 	beq.w	8001d5a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a37      	ldr	r2, [pc, #220]	@ (8001bd8 <HAL_DMA_Init+0x1b8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d04a      	beq.n	8001b94 <HAL_DMA_Init+0x174>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a36      	ldr	r2, [pc, #216]	@ (8001bdc <HAL_DMA_Init+0x1bc>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d045      	beq.n	8001b94 <HAL_DMA_Init+0x174>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a34      	ldr	r2, [pc, #208]	@ (8001be0 <HAL_DMA_Init+0x1c0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d040      	beq.n	8001b94 <HAL_DMA_Init+0x174>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a33      	ldr	r2, [pc, #204]	@ (8001be4 <HAL_DMA_Init+0x1c4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d03b      	beq.n	8001b94 <HAL_DMA_Init+0x174>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a31      	ldr	r2, [pc, #196]	@ (8001be8 <HAL_DMA_Init+0x1c8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d036      	beq.n	8001b94 <HAL_DMA_Init+0x174>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a30      	ldr	r2, [pc, #192]	@ (8001bec <HAL_DMA_Init+0x1cc>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d031      	beq.n	8001b94 <HAL_DMA_Init+0x174>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a2e      	ldr	r2, [pc, #184]	@ (8001bf0 <HAL_DMA_Init+0x1d0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d02c      	beq.n	8001b94 <HAL_DMA_Init+0x174>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a2d      	ldr	r2, [pc, #180]	@ (8001bf4 <HAL_DMA_Init+0x1d4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d027      	beq.n	8001b94 <HAL_DMA_Init+0x174>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a2b      	ldr	r2, [pc, #172]	@ (8001bf8 <HAL_DMA_Init+0x1d8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d022      	beq.n	8001b94 <HAL_DMA_Init+0x174>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a2a      	ldr	r2, [pc, #168]	@ (8001bfc <HAL_DMA_Init+0x1dc>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d01d      	beq.n	8001b94 <HAL_DMA_Init+0x174>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a28      	ldr	r2, [pc, #160]	@ (8001c00 <HAL_DMA_Init+0x1e0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d018      	beq.n	8001b94 <HAL_DMA_Init+0x174>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a27      	ldr	r2, [pc, #156]	@ (8001c04 <HAL_DMA_Init+0x1e4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d013      	beq.n	8001b94 <HAL_DMA_Init+0x174>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a25      	ldr	r2, [pc, #148]	@ (8001c08 <HAL_DMA_Init+0x1e8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00e      	beq.n	8001b94 <HAL_DMA_Init+0x174>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a24      	ldr	r2, [pc, #144]	@ (8001c0c <HAL_DMA_Init+0x1ec>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d009      	beq.n	8001b94 <HAL_DMA_Init+0x174>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a22      	ldr	r2, [pc, #136]	@ (8001c10 <HAL_DMA_Init+0x1f0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d004      	beq.n	8001b94 <HAL_DMA_Init+0x174>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a21      	ldr	r2, [pc, #132]	@ (8001c14 <HAL_DMA_Init+0x1f4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d108      	bne.n	8001ba6 <HAL_DMA_Init+0x186>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0201 	bic.w	r2, r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	e007      	b.n	8001bb6 <HAL_DMA_Init+0x196>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0201 	bic.w	r2, r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001bb6:	e02f      	b.n	8001c18 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bb8:	f7ff fb3a 	bl	8001230 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b05      	cmp	r3, #5
 8001bc4:	d928      	bls.n	8001c18 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2220      	movs	r2, #32
 8001bca:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2203      	movs	r2, #3
 8001bd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e246      	b.n	8002066 <HAL_DMA_Init+0x646>
 8001bd8:	40020010 	.word	0x40020010
 8001bdc:	40020028 	.word	0x40020028
 8001be0:	40020040 	.word	0x40020040
 8001be4:	40020058 	.word	0x40020058
 8001be8:	40020070 	.word	0x40020070
 8001bec:	40020088 	.word	0x40020088
 8001bf0:	400200a0 	.word	0x400200a0
 8001bf4:	400200b8 	.word	0x400200b8
 8001bf8:	40020410 	.word	0x40020410
 8001bfc:	40020428 	.word	0x40020428
 8001c00:	40020440 	.word	0x40020440
 8001c04:	40020458 	.word	0x40020458
 8001c08:	40020470 	.word	0x40020470
 8001c0c:	40020488 	.word	0x40020488
 8001c10:	400204a0 	.word	0x400204a0
 8001c14:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1c8      	bne.n	8001bb8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4b83      	ldr	r3, [pc, #524]	@ (8001e40 <HAL_DMA_Init+0x420>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001c3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c56:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d107      	bne.n	8001c7c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c74:	4313      	orrs	r3, r2
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001c7c:	4b71      	ldr	r3, [pc, #452]	@ (8001e44 <HAL_DMA_Init+0x424>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b71      	ldr	r3, [pc, #452]	@ (8001e48 <HAL_DMA_Init+0x428>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c88:	d328      	bcc.n	8001cdc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b28      	cmp	r3, #40	@ 0x28
 8001c90:	d903      	bls.n	8001c9a <HAL_DMA_Init+0x27a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b2e      	cmp	r3, #46	@ 0x2e
 8001c98:	d917      	bls.n	8001cca <HAL_DMA_Init+0x2aa>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001ca0:	d903      	bls.n	8001caa <HAL_DMA_Init+0x28a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b42      	cmp	r3, #66	@ 0x42
 8001ca8:	d90f      	bls.n	8001cca <HAL_DMA_Init+0x2aa>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b46      	cmp	r3, #70	@ 0x46
 8001cb0:	d903      	bls.n	8001cba <HAL_DMA_Init+0x29a>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b48      	cmp	r3, #72	@ 0x48
 8001cb8:	d907      	bls.n	8001cca <HAL_DMA_Init+0x2aa>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b4e      	cmp	r3, #78	@ 0x4e
 8001cc0:	d905      	bls.n	8001cce <HAL_DMA_Init+0x2ae>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b52      	cmp	r3, #82	@ 0x52
 8001cc8:	d801      	bhi.n	8001cce <HAL_DMA_Init+0x2ae>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <HAL_DMA_Init+0x2b0>
 8001cce:	2300      	movs	r3, #0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001cda:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f023 0307 	bic.w	r3, r3, #7
 8001cf2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d117      	bne.n	8001d36 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00e      	beq.n	8001d36 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f001 fdcf 	bl	80038bc <DMA_CheckFifoParam>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d008      	beq.n	8001d36 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2240      	movs	r2, #64	@ 0x40
 8001d28:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e197      	b.n	8002066 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f001 fd0a 	bl	8003758 <DMA_CalcBaseAndBitshift>
 8001d44:	4603      	mov	r3, r0
 8001d46:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d4c:	f003 031f 	and.w	r3, r3, #31
 8001d50:	223f      	movs	r2, #63	@ 0x3f
 8001d52:	409a      	lsls	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	e0cd      	b.n	8001ef6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a3b      	ldr	r2, [pc, #236]	@ (8001e4c <HAL_DMA_Init+0x42c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d022      	beq.n	8001daa <HAL_DMA_Init+0x38a>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a39      	ldr	r2, [pc, #228]	@ (8001e50 <HAL_DMA_Init+0x430>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d01d      	beq.n	8001daa <HAL_DMA_Init+0x38a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a38      	ldr	r2, [pc, #224]	@ (8001e54 <HAL_DMA_Init+0x434>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d018      	beq.n	8001daa <HAL_DMA_Init+0x38a>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a36      	ldr	r2, [pc, #216]	@ (8001e58 <HAL_DMA_Init+0x438>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d013      	beq.n	8001daa <HAL_DMA_Init+0x38a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a35      	ldr	r2, [pc, #212]	@ (8001e5c <HAL_DMA_Init+0x43c>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d00e      	beq.n	8001daa <HAL_DMA_Init+0x38a>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a33      	ldr	r2, [pc, #204]	@ (8001e60 <HAL_DMA_Init+0x440>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d009      	beq.n	8001daa <HAL_DMA_Init+0x38a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a32      	ldr	r2, [pc, #200]	@ (8001e64 <HAL_DMA_Init+0x444>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d004      	beq.n	8001daa <HAL_DMA_Init+0x38a>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a30      	ldr	r2, [pc, #192]	@ (8001e68 <HAL_DMA_Init+0x448>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d101      	bne.n	8001dae <HAL_DMA_Init+0x38e>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <HAL_DMA_Init+0x390>
 8001dae:	2300      	movs	r3, #0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 8097 	beq.w	8001ee4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a24      	ldr	r2, [pc, #144]	@ (8001e4c <HAL_DMA_Init+0x42c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d021      	beq.n	8001e04 <HAL_DMA_Init+0x3e4>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a22      	ldr	r2, [pc, #136]	@ (8001e50 <HAL_DMA_Init+0x430>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d01c      	beq.n	8001e04 <HAL_DMA_Init+0x3e4>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a21      	ldr	r2, [pc, #132]	@ (8001e54 <HAL_DMA_Init+0x434>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d017      	beq.n	8001e04 <HAL_DMA_Init+0x3e4>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1f      	ldr	r2, [pc, #124]	@ (8001e58 <HAL_DMA_Init+0x438>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d012      	beq.n	8001e04 <HAL_DMA_Init+0x3e4>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a1e      	ldr	r2, [pc, #120]	@ (8001e5c <HAL_DMA_Init+0x43c>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d00d      	beq.n	8001e04 <HAL_DMA_Init+0x3e4>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a1c      	ldr	r2, [pc, #112]	@ (8001e60 <HAL_DMA_Init+0x440>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d008      	beq.n	8001e04 <HAL_DMA_Init+0x3e4>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a1b      	ldr	r2, [pc, #108]	@ (8001e64 <HAL_DMA_Init+0x444>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d003      	beq.n	8001e04 <HAL_DMA_Init+0x3e4>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a19      	ldr	r2, [pc, #100]	@ (8001e68 <HAL_DMA_Init+0x448>)
 8001e02:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	4b13      	ldr	r3, [pc, #76]	@ (8001e6c <HAL_DMA_Init+0x44c>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b40      	cmp	r3, #64	@ 0x40
 8001e2a:	d021      	beq.n	8001e70 <HAL_DMA_Init+0x450>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b80      	cmp	r3, #128	@ 0x80
 8001e32:	d102      	bne.n	8001e3a <HAL_DMA_Init+0x41a>
 8001e34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e38:	e01b      	b.n	8001e72 <HAL_DMA_Init+0x452>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e019      	b.n	8001e72 <HAL_DMA_Init+0x452>
 8001e3e:	bf00      	nop
 8001e40:	fe10803f 	.word	0xfe10803f
 8001e44:	5c001000 	.word	0x5c001000
 8001e48:	ffff0000 	.word	0xffff0000
 8001e4c:	58025408 	.word	0x58025408
 8001e50:	5802541c 	.word	0x5802541c
 8001e54:	58025430 	.word	0x58025430
 8001e58:	58025444 	.word	0x58025444
 8001e5c:	58025458 	.word	0x58025458
 8001e60:	5802546c 	.word	0x5802546c
 8001e64:	58025480 	.word	0x58025480
 8001e68:	58025494 	.word	0x58025494
 8001e6c:	fffe000f 	.word	0xfffe000f
 8001e70:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68d2      	ldr	r2, [r2, #12]
 8001e76:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ea0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b6e      	ldr	r3, [pc, #440]	@ (8002070 <HAL_DMA_Init+0x650>)
 8001eb8:	4413      	add	r3, r2
 8001eba:	4a6e      	ldr	r2, [pc, #440]	@ (8002074 <HAL_DMA_Init+0x654>)
 8001ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	009a      	lsls	r2, r3, #2
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f001 fc45 	bl	8003758 <DMA_CalcBaseAndBitshift>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed6:	f003 031f 	and.w	r3, r3, #31
 8001eda:	2201      	movs	r2, #1
 8001edc:	409a      	lsls	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	e008      	b.n	8001ef6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2240      	movs	r2, #64	@ 0x40
 8001ee8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2203      	movs	r2, #3
 8001eee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e0b7      	b.n	8002066 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a5f      	ldr	r2, [pc, #380]	@ (8002078 <HAL_DMA_Init+0x658>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d072      	beq.n	8001fe6 <HAL_DMA_Init+0x5c6>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a5d      	ldr	r2, [pc, #372]	@ (800207c <HAL_DMA_Init+0x65c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d06d      	beq.n	8001fe6 <HAL_DMA_Init+0x5c6>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a5c      	ldr	r2, [pc, #368]	@ (8002080 <HAL_DMA_Init+0x660>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d068      	beq.n	8001fe6 <HAL_DMA_Init+0x5c6>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a5a      	ldr	r2, [pc, #360]	@ (8002084 <HAL_DMA_Init+0x664>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d063      	beq.n	8001fe6 <HAL_DMA_Init+0x5c6>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a59      	ldr	r2, [pc, #356]	@ (8002088 <HAL_DMA_Init+0x668>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d05e      	beq.n	8001fe6 <HAL_DMA_Init+0x5c6>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a57      	ldr	r2, [pc, #348]	@ (800208c <HAL_DMA_Init+0x66c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d059      	beq.n	8001fe6 <HAL_DMA_Init+0x5c6>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a56      	ldr	r2, [pc, #344]	@ (8002090 <HAL_DMA_Init+0x670>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d054      	beq.n	8001fe6 <HAL_DMA_Init+0x5c6>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a54      	ldr	r2, [pc, #336]	@ (8002094 <HAL_DMA_Init+0x674>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d04f      	beq.n	8001fe6 <HAL_DMA_Init+0x5c6>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a53      	ldr	r2, [pc, #332]	@ (8002098 <HAL_DMA_Init+0x678>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d04a      	beq.n	8001fe6 <HAL_DMA_Init+0x5c6>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a51      	ldr	r2, [pc, #324]	@ (800209c <HAL_DMA_Init+0x67c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d045      	beq.n	8001fe6 <HAL_DMA_Init+0x5c6>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a50      	ldr	r2, [pc, #320]	@ (80020a0 <HAL_DMA_Init+0x680>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d040      	beq.n	8001fe6 <HAL_DMA_Init+0x5c6>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a4e      	ldr	r2, [pc, #312]	@ (80020a4 <HAL_DMA_Init+0x684>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d03b      	beq.n	8001fe6 <HAL_DMA_Init+0x5c6>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a4d      	ldr	r2, [pc, #308]	@ (80020a8 <HAL_DMA_Init+0x688>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d036      	beq.n	8001fe6 <HAL_DMA_Init+0x5c6>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a4b      	ldr	r2, [pc, #300]	@ (80020ac <HAL_DMA_Init+0x68c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d031      	beq.n	8001fe6 <HAL_DMA_Init+0x5c6>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a4a      	ldr	r2, [pc, #296]	@ (80020b0 <HAL_DMA_Init+0x690>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d02c      	beq.n	8001fe6 <HAL_DMA_Init+0x5c6>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a48      	ldr	r2, [pc, #288]	@ (80020b4 <HAL_DMA_Init+0x694>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d027      	beq.n	8001fe6 <HAL_DMA_Init+0x5c6>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a47      	ldr	r2, [pc, #284]	@ (80020b8 <HAL_DMA_Init+0x698>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d022      	beq.n	8001fe6 <HAL_DMA_Init+0x5c6>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a45      	ldr	r2, [pc, #276]	@ (80020bc <HAL_DMA_Init+0x69c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d01d      	beq.n	8001fe6 <HAL_DMA_Init+0x5c6>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a44      	ldr	r2, [pc, #272]	@ (80020c0 <HAL_DMA_Init+0x6a0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d018      	beq.n	8001fe6 <HAL_DMA_Init+0x5c6>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a42      	ldr	r2, [pc, #264]	@ (80020c4 <HAL_DMA_Init+0x6a4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d013      	beq.n	8001fe6 <HAL_DMA_Init+0x5c6>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a41      	ldr	r2, [pc, #260]	@ (80020c8 <HAL_DMA_Init+0x6a8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d00e      	beq.n	8001fe6 <HAL_DMA_Init+0x5c6>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a3f      	ldr	r2, [pc, #252]	@ (80020cc <HAL_DMA_Init+0x6ac>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d009      	beq.n	8001fe6 <HAL_DMA_Init+0x5c6>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a3e      	ldr	r2, [pc, #248]	@ (80020d0 <HAL_DMA_Init+0x6b0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d004      	beq.n	8001fe6 <HAL_DMA_Init+0x5c6>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a3c      	ldr	r2, [pc, #240]	@ (80020d4 <HAL_DMA_Init+0x6b4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d101      	bne.n	8001fea <HAL_DMA_Init+0x5ca>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <HAL_DMA_Init+0x5cc>
 8001fea:	2300      	movs	r3, #0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d032      	beq.n	8002056 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f001 fcdf 	bl	80039b4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b80      	cmp	r3, #128	@ 0x80
 8001ffc:	d102      	bne.n	8002004 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002018:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d010      	beq.n	8002044 <HAL_DMA_Init+0x624>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b08      	cmp	r3, #8
 8002028:	d80c      	bhi.n	8002044 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f001 fd5c 	bl	8003ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	e008      	b.n	8002056 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	a7fdabf8 	.word	0xa7fdabf8
 8002074:	cccccccd 	.word	0xcccccccd
 8002078:	40020010 	.word	0x40020010
 800207c:	40020028 	.word	0x40020028
 8002080:	40020040 	.word	0x40020040
 8002084:	40020058 	.word	0x40020058
 8002088:	40020070 	.word	0x40020070
 800208c:	40020088 	.word	0x40020088
 8002090:	400200a0 	.word	0x400200a0
 8002094:	400200b8 	.word	0x400200b8
 8002098:	40020410 	.word	0x40020410
 800209c:	40020428 	.word	0x40020428
 80020a0:	40020440 	.word	0x40020440
 80020a4:	40020458 	.word	0x40020458
 80020a8:	40020470 	.word	0x40020470
 80020ac:	40020488 	.word	0x40020488
 80020b0:	400204a0 	.word	0x400204a0
 80020b4:	400204b8 	.word	0x400204b8
 80020b8:	58025408 	.word	0x58025408
 80020bc:	5802541c 	.word	0x5802541c
 80020c0:	58025430 	.word	0x58025430
 80020c4:	58025444 	.word	0x58025444
 80020c8:	58025458 	.word	0x58025458
 80020cc:	5802546c 	.word	0x5802546c
 80020d0:	58025480 	.word	0x58025480
 80020d4:	58025494 	.word	0x58025494

080020d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
 80020e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e226      	b.n	8002542 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_DMA_Start_IT+0x2a>
 80020fe:	2302      	movs	r3, #2
 8002100:	e21f      	b.n	8002542 <HAL_DMA_Start_IT+0x46a>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b01      	cmp	r3, #1
 8002114:	f040 820a 	bne.w	800252c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2202      	movs	r2, #2
 800211c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a68      	ldr	r2, [pc, #416]	@ (80022cc <HAL_DMA_Start_IT+0x1f4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d04a      	beq.n	80021c6 <HAL_DMA_Start_IT+0xee>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a66      	ldr	r2, [pc, #408]	@ (80022d0 <HAL_DMA_Start_IT+0x1f8>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d045      	beq.n	80021c6 <HAL_DMA_Start_IT+0xee>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a65      	ldr	r2, [pc, #404]	@ (80022d4 <HAL_DMA_Start_IT+0x1fc>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d040      	beq.n	80021c6 <HAL_DMA_Start_IT+0xee>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a63      	ldr	r2, [pc, #396]	@ (80022d8 <HAL_DMA_Start_IT+0x200>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d03b      	beq.n	80021c6 <HAL_DMA_Start_IT+0xee>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a62      	ldr	r2, [pc, #392]	@ (80022dc <HAL_DMA_Start_IT+0x204>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d036      	beq.n	80021c6 <HAL_DMA_Start_IT+0xee>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a60      	ldr	r2, [pc, #384]	@ (80022e0 <HAL_DMA_Start_IT+0x208>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d031      	beq.n	80021c6 <HAL_DMA_Start_IT+0xee>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a5f      	ldr	r2, [pc, #380]	@ (80022e4 <HAL_DMA_Start_IT+0x20c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d02c      	beq.n	80021c6 <HAL_DMA_Start_IT+0xee>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a5d      	ldr	r2, [pc, #372]	@ (80022e8 <HAL_DMA_Start_IT+0x210>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d027      	beq.n	80021c6 <HAL_DMA_Start_IT+0xee>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a5c      	ldr	r2, [pc, #368]	@ (80022ec <HAL_DMA_Start_IT+0x214>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d022      	beq.n	80021c6 <HAL_DMA_Start_IT+0xee>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a5a      	ldr	r2, [pc, #360]	@ (80022f0 <HAL_DMA_Start_IT+0x218>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d01d      	beq.n	80021c6 <HAL_DMA_Start_IT+0xee>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a59      	ldr	r2, [pc, #356]	@ (80022f4 <HAL_DMA_Start_IT+0x21c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d018      	beq.n	80021c6 <HAL_DMA_Start_IT+0xee>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a57      	ldr	r2, [pc, #348]	@ (80022f8 <HAL_DMA_Start_IT+0x220>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d013      	beq.n	80021c6 <HAL_DMA_Start_IT+0xee>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a56      	ldr	r2, [pc, #344]	@ (80022fc <HAL_DMA_Start_IT+0x224>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d00e      	beq.n	80021c6 <HAL_DMA_Start_IT+0xee>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a54      	ldr	r2, [pc, #336]	@ (8002300 <HAL_DMA_Start_IT+0x228>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d009      	beq.n	80021c6 <HAL_DMA_Start_IT+0xee>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a53      	ldr	r2, [pc, #332]	@ (8002304 <HAL_DMA_Start_IT+0x22c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d004      	beq.n	80021c6 <HAL_DMA_Start_IT+0xee>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a51      	ldr	r2, [pc, #324]	@ (8002308 <HAL_DMA_Start_IT+0x230>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d108      	bne.n	80021d8 <HAL_DMA_Start_IT+0x100>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0201 	bic.w	r2, r2, #1
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	e007      	b.n	80021e8 <HAL_DMA_Start_IT+0x110>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0201 	bic.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68b9      	ldr	r1, [r7, #8]
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f001 f906 	bl	8003400 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a34      	ldr	r2, [pc, #208]	@ (80022cc <HAL_DMA_Start_IT+0x1f4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d04a      	beq.n	8002294 <HAL_DMA_Start_IT+0x1bc>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a33      	ldr	r2, [pc, #204]	@ (80022d0 <HAL_DMA_Start_IT+0x1f8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d045      	beq.n	8002294 <HAL_DMA_Start_IT+0x1bc>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a31      	ldr	r2, [pc, #196]	@ (80022d4 <HAL_DMA_Start_IT+0x1fc>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d040      	beq.n	8002294 <HAL_DMA_Start_IT+0x1bc>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a30      	ldr	r2, [pc, #192]	@ (80022d8 <HAL_DMA_Start_IT+0x200>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d03b      	beq.n	8002294 <HAL_DMA_Start_IT+0x1bc>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a2e      	ldr	r2, [pc, #184]	@ (80022dc <HAL_DMA_Start_IT+0x204>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d036      	beq.n	8002294 <HAL_DMA_Start_IT+0x1bc>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a2d      	ldr	r2, [pc, #180]	@ (80022e0 <HAL_DMA_Start_IT+0x208>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d031      	beq.n	8002294 <HAL_DMA_Start_IT+0x1bc>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a2b      	ldr	r2, [pc, #172]	@ (80022e4 <HAL_DMA_Start_IT+0x20c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d02c      	beq.n	8002294 <HAL_DMA_Start_IT+0x1bc>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a2a      	ldr	r2, [pc, #168]	@ (80022e8 <HAL_DMA_Start_IT+0x210>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d027      	beq.n	8002294 <HAL_DMA_Start_IT+0x1bc>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a28      	ldr	r2, [pc, #160]	@ (80022ec <HAL_DMA_Start_IT+0x214>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d022      	beq.n	8002294 <HAL_DMA_Start_IT+0x1bc>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a27      	ldr	r2, [pc, #156]	@ (80022f0 <HAL_DMA_Start_IT+0x218>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d01d      	beq.n	8002294 <HAL_DMA_Start_IT+0x1bc>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a25      	ldr	r2, [pc, #148]	@ (80022f4 <HAL_DMA_Start_IT+0x21c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d018      	beq.n	8002294 <HAL_DMA_Start_IT+0x1bc>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a24      	ldr	r2, [pc, #144]	@ (80022f8 <HAL_DMA_Start_IT+0x220>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d013      	beq.n	8002294 <HAL_DMA_Start_IT+0x1bc>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a22      	ldr	r2, [pc, #136]	@ (80022fc <HAL_DMA_Start_IT+0x224>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00e      	beq.n	8002294 <HAL_DMA_Start_IT+0x1bc>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a21      	ldr	r2, [pc, #132]	@ (8002300 <HAL_DMA_Start_IT+0x228>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d009      	beq.n	8002294 <HAL_DMA_Start_IT+0x1bc>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a1f      	ldr	r2, [pc, #124]	@ (8002304 <HAL_DMA_Start_IT+0x22c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d004      	beq.n	8002294 <HAL_DMA_Start_IT+0x1bc>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a1e      	ldr	r2, [pc, #120]	@ (8002308 <HAL_DMA_Start_IT+0x230>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d101      	bne.n	8002298 <HAL_DMA_Start_IT+0x1c0>
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <HAL_DMA_Start_IT+0x1c2>
 8002298:	2300      	movs	r3, #0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d036      	beq.n	800230c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f023 021e 	bic.w	r2, r3, #30
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0216 	orr.w	r2, r2, #22
 80022b0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d03e      	beq.n	8002338 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0208 	orr.w	r2, r2, #8
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	e035      	b.n	8002338 <HAL_DMA_Start_IT+0x260>
 80022cc:	40020010 	.word	0x40020010
 80022d0:	40020028 	.word	0x40020028
 80022d4:	40020040 	.word	0x40020040
 80022d8:	40020058 	.word	0x40020058
 80022dc:	40020070 	.word	0x40020070
 80022e0:	40020088 	.word	0x40020088
 80022e4:	400200a0 	.word	0x400200a0
 80022e8:	400200b8 	.word	0x400200b8
 80022ec:	40020410 	.word	0x40020410
 80022f0:	40020428 	.word	0x40020428
 80022f4:	40020440 	.word	0x40020440
 80022f8:	40020458 	.word	0x40020458
 80022fc:	40020470 	.word	0x40020470
 8002300:	40020488 	.word	0x40020488
 8002304:	400204a0 	.word	0x400204a0
 8002308:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 020e 	bic.w	r2, r3, #14
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 020a 	orr.w	r2, r2, #10
 800231e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002324:	2b00      	cmp	r3, #0
 8002326:	d007      	beq.n	8002338 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0204 	orr.w	r2, r2, #4
 8002336:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a83      	ldr	r2, [pc, #524]	@ (800254c <HAL_DMA_Start_IT+0x474>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d072      	beq.n	8002428 <HAL_DMA_Start_IT+0x350>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a82      	ldr	r2, [pc, #520]	@ (8002550 <HAL_DMA_Start_IT+0x478>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d06d      	beq.n	8002428 <HAL_DMA_Start_IT+0x350>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a80      	ldr	r2, [pc, #512]	@ (8002554 <HAL_DMA_Start_IT+0x47c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d068      	beq.n	8002428 <HAL_DMA_Start_IT+0x350>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a7f      	ldr	r2, [pc, #508]	@ (8002558 <HAL_DMA_Start_IT+0x480>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d063      	beq.n	8002428 <HAL_DMA_Start_IT+0x350>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a7d      	ldr	r2, [pc, #500]	@ (800255c <HAL_DMA_Start_IT+0x484>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d05e      	beq.n	8002428 <HAL_DMA_Start_IT+0x350>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a7c      	ldr	r2, [pc, #496]	@ (8002560 <HAL_DMA_Start_IT+0x488>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d059      	beq.n	8002428 <HAL_DMA_Start_IT+0x350>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a7a      	ldr	r2, [pc, #488]	@ (8002564 <HAL_DMA_Start_IT+0x48c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d054      	beq.n	8002428 <HAL_DMA_Start_IT+0x350>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a79      	ldr	r2, [pc, #484]	@ (8002568 <HAL_DMA_Start_IT+0x490>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d04f      	beq.n	8002428 <HAL_DMA_Start_IT+0x350>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a77      	ldr	r2, [pc, #476]	@ (800256c <HAL_DMA_Start_IT+0x494>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d04a      	beq.n	8002428 <HAL_DMA_Start_IT+0x350>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a76      	ldr	r2, [pc, #472]	@ (8002570 <HAL_DMA_Start_IT+0x498>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d045      	beq.n	8002428 <HAL_DMA_Start_IT+0x350>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a74      	ldr	r2, [pc, #464]	@ (8002574 <HAL_DMA_Start_IT+0x49c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d040      	beq.n	8002428 <HAL_DMA_Start_IT+0x350>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a73      	ldr	r2, [pc, #460]	@ (8002578 <HAL_DMA_Start_IT+0x4a0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d03b      	beq.n	8002428 <HAL_DMA_Start_IT+0x350>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a71      	ldr	r2, [pc, #452]	@ (800257c <HAL_DMA_Start_IT+0x4a4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d036      	beq.n	8002428 <HAL_DMA_Start_IT+0x350>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a70      	ldr	r2, [pc, #448]	@ (8002580 <HAL_DMA_Start_IT+0x4a8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d031      	beq.n	8002428 <HAL_DMA_Start_IT+0x350>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a6e      	ldr	r2, [pc, #440]	@ (8002584 <HAL_DMA_Start_IT+0x4ac>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d02c      	beq.n	8002428 <HAL_DMA_Start_IT+0x350>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a6d      	ldr	r2, [pc, #436]	@ (8002588 <HAL_DMA_Start_IT+0x4b0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d027      	beq.n	8002428 <HAL_DMA_Start_IT+0x350>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a6b      	ldr	r2, [pc, #428]	@ (800258c <HAL_DMA_Start_IT+0x4b4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d022      	beq.n	8002428 <HAL_DMA_Start_IT+0x350>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a6a      	ldr	r2, [pc, #424]	@ (8002590 <HAL_DMA_Start_IT+0x4b8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d01d      	beq.n	8002428 <HAL_DMA_Start_IT+0x350>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a68      	ldr	r2, [pc, #416]	@ (8002594 <HAL_DMA_Start_IT+0x4bc>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d018      	beq.n	8002428 <HAL_DMA_Start_IT+0x350>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a67      	ldr	r2, [pc, #412]	@ (8002598 <HAL_DMA_Start_IT+0x4c0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d013      	beq.n	8002428 <HAL_DMA_Start_IT+0x350>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a65      	ldr	r2, [pc, #404]	@ (800259c <HAL_DMA_Start_IT+0x4c4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d00e      	beq.n	8002428 <HAL_DMA_Start_IT+0x350>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a64      	ldr	r2, [pc, #400]	@ (80025a0 <HAL_DMA_Start_IT+0x4c8>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d009      	beq.n	8002428 <HAL_DMA_Start_IT+0x350>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a62      	ldr	r2, [pc, #392]	@ (80025a4 <HAL_DMA_Start_IT+0x4cc>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d004      	beq.n	8002428 <HAL_DMA_Start_IT+0x350>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a61      	ldr	r2, [pc, #388]	@ (80025a8 <HAL_DMA_Start_IT+0x4d0>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d101      	bne.n	800242c <HAL_DMA_Start_IT+0x354>
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <HAL_DMA_Start_IT+0x356>
 800242c:	2300      	movs	r3, #0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d01a      	beq.n	8002468 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d007      	beq.n	8002450 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800244a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800244e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002454:	2b00      	cmp	r3, #0
 8002456:	d007      	beq.n	8002468 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002462:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002466:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a37      	ldr	r2, [pc, #220]	@ (800254c <HAL_DMA_Start_IT+0x474>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d04a      	beq.n	8002508 <HAL_DMA_Start_IT+0x430>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a36      	ldr	r2, [pc, #216]	@ (8002550 <HAL_DMA_Start_IT+0x478>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d045      	beq.n	8002508 <HAL_DMA_Start_IT+0x430>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a34      	ldr	r2, [pc, #208]	@ (8002554 <HAL_DMA_Start_IT+0x47c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d040      	beq.n	8002508 <HAL_DMA_Start_IT+0x430>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a33      	ldr	r2, [pc, #204]	@ (8002558 <HAL_DMA_Start_IT+0x480>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d03b      	beq.n	8002508 <HAL_DMA_Start_IT+0x430>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a31      	ldr	r2, [pc, #196]	@ (800255c <HAL_DMA_Start_IT+0x484>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d036      	beq.n	8002508 <HAL_DMA_Start_IT+0x430>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a30      	ldr	r2, [pc, #192]	@ (8002560 <HAL_DMA_Start_IT+0x488>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d031      	beq.n	8002508 <HAL_DMA_Start_IT+0x430>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a2e      	ldr	r2, [pc, #184]	@ (8002564 <HAL_DMA_Start_IT+0x48c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d02c      	beq.n	8002508 <HAL_DMA_Start_IT+0x430>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a2d      	ldr	r2, [pc, #180]	@ (8002568 <HAL_DMA_Start_IT+0x490>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d027      	beq.n	8002508 <HAL_DMA_Start_IT+0x430>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a2b      	ldr	r2, [pc, #172]	@ (800256c <HAL_DMA_Start_IT+0x494>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d022      	beq.n	8002508 <HAL_DMA_Start_IT+0x430>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a2a      	ldr	r2, [pc, #168]	@ (8002570 <HAL_DMA_Start_IT+0x498>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d01d      	beq.n	8002508 <HAL_DMA_Start_IT+0x430>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a28      	ldr	r2, [pc, #160]	@ (8002574 <HAL_DMA_Start_IT+0x49c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d018      	beq.n	8002508 <HAL_DMA_Start_IT+0x430>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a27      	ldr	r2, [pc, #156]	@ (8002578 <HAL_DMA_Start_IT+0x4a0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d013      	beq.n	8002508 <HAL_DMA_Start_IT+0x430>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a25      	ldr	r2, [pc, #148]	@ (800257c <HAL_DMA_Start_IT+0x4a4>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d00e      	beq.n	8002508 <HAL_DMA_Start_IT+0x430>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a24      	ldr	r2, [pc, #144]	@ (8002580 <HAL_DMA_Start_IT+0x4a8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d009      	beq.n	8002508 <HAL_DMA_Start_IT+0x430>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a22      	ldr	r2, [pc, #136]	@ (8002584 <HAL_DMA_Start_IT+0x4ac>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d004      	beq.n	8002508 <HAL_DMA_Start_IT+0x430>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a21      	ldr	r2, [pc, #132]	@ (8002588 <HAL_DMA_Start_IT+0x4b0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d108      	bne.n	800251a <HAL_DMA_Start_IT+0x442>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	e012      	b.n	8002540 <HAL_DMA_Start_IT+0x468>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0201 	orr.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	e009      	b.n	8002540 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002532:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002540:	7dfb      	ldrb	r3, [r7, #23]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40020010 	.word	0x40020010
 8002550:	40020028 	.word	0x40020028
 8002554:	40020040 	.word	0x40020040
 8002558:	40020058 	.word	0x40020058
 800255c:	40020070 	.word	0x40020070
 8002560:	40020088 	.word	0x40020088
 8002564:	400200a0 	.word	0x400200a0
 8002568:	400200b8 	.word	0x400200b8
 800256c:	40020410 	.word	0x40020410
 8002570:	40020428 	.word	0x40020428
 8002574:	40020440 	.word	0x40020440
 8002578:	40020458 	.word	0x40020458
 800257c:	40020470 	.word	0x40020470
 8002580:	40020488 	.word	0x40020488
 8002584:	400204a0 	.word	0x400204a0
 8002588:	400204b8 	.word	0x400204b8
 800258c:	58025408 	.word	0x58025408
 8002590:	5802541c 	.word	0x5802541c
 8002594:	58025430 	.word	0x58025430
 8002598:	58025444 	.word	0x58025444
 800259c:	58025458 	.word	0x58025458
 80025a0:	5802546c 	.word	0x5802546c
 80025a4:	58025480 	.word	0x58025480
 80025a8:	58025494 	.word	0x58025494

080025ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08a      	sub	sp, #40	@ 0x28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025b8:	4b67      	ldr	r3, [pc, #412]	@ (8002758 <HAL_DMA_IRQHandler+0x1ac>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a67      	ldr	r2, [pc, #412]	@ (800275c <HAL_DMA_IRQHandler+0x1b0>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	0a9b      	lsrs	r3, r3, #10
 80025c4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a5f      	ldr	r2, [pc, #380]	@ (8002760 <HAL_DMA_IRQHandler+0x1b4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d04a      	beq.n	800267e <HAL_DMA_IRQHandler+0xd2>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a5d      	ldr	r2, [pc, #372]	@ (8002764 <HAL_DMA_IRQHandler+0x1b8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d045      	beq.n	800267e <HAL_DMA_IRQHandler+0xd2>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a5c      	ldr	r2, [pc, #368]	@ (8002768 <HAL_DMA_IRQHandler+0x1bc>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d040      	beq.n	800267e <HAL_DMA_IRQHandler+0xd2>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a5a      	ldr	r2, [pc, #360]	@ (800276c <HAL_DMA_IRQHandler+0x1c0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d03b      	beq.n	800267e <HAL_DMA_IRQHandler+0xd2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a59      	ldr	r2, [pc, #356]	@ (8002770 <HAL_DMA_IRQHandler+0x1c4>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d036      	beq.n	800267e <HAL_DMA_IRQHandler+0xd2>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a57      	ldr	r2, [pc, #348]	@ (8002774 <HAL_DMA_IRQHandler+0x1c8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d031      	beq.n	800267e <HAL_DMA_IRQHandler+0xd2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a56      	ldr	r2, [pc, #344]	@ (8002778 <HAL_DMA_IRQHandler+0x1cc>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d02c      	beq.n	800267e <HAL_DMA_IRQHandler+0xd2>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a54      	ldr	r2, [pc, #336]	@ (800277c <HAL_DMA_IRQHandler+0x1d0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d027      	beq.n	800267e <HAL_DMA_IRQHandler+0xd2>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a53      	ldr	r2, [pc, #332]	@ (8002780 <HAL_DMA_IRQHandler+0x1d4>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d022      	beq.n	800267e <HAL_DMA_IRQHandler+0xd2>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a51      	ldr	r2, [pc, #324]	@ (8002784 <HAL_DMA_IRQHandler+0x1d8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d01d      	beq.n	800267e <HAL_DMA_IRQHandler+0xd2>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a50      	ldr	r2, [pc, #320]	@ (8002788 <HAL_DMA_IRQHandler+0x1dc>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d018      	beq.n	800267e <HAL_DMA_IRQHandler+0xd2>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a4e      	ldr	r2, [pc, #312]	@ (800278c <HAL_DMA_IRQHandler+0x1e0>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d013      	beq.n	800267e <HAL_DMA_IRQHandler+0xd2>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a4d      	ldr	r2, [pc, #308]	@ (8002790 <HAL_DMA_IRQHandler+0x1e4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d00e      	beq.n	800267e <HAL_DMA_IRQHandler+0xd2>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a4b      	ldr	r2, [pc, #300]	@ (8002794 <HAL_DMA_IRQHandler+0x1e8>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d009      	beq.n	800267e <HAL_DMA_IRQHandler+0xd2>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a4a      	ldr	r2, [pc, #296]	@ (8002798 <HAL_DMA_IRQHandler+0x1ec>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d004      	beq.n	800267e <HAL_DMA_IRQHandler+0xd2>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a48      	ldr	r2, [pc, #288]	@ (800279c <HAL_DMA_IRQHandler+0x1f0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d101      	bne.n	8002682 <HAL_DMA_IRQHandler+0xd6>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <HAL_DMA_IRQHandler+0xd8>
 8002682:	2300      	movs	r3, #0
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 842b 	beq.w	8002ee0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800268e:	f003 031f 	and.w	r3, r3, #31
 8002692:	2208      	movs	r2, #8
 8002694:	409a      	lsls	r2, r3
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	2b00      	cmp	r3, #0
 800269c:	f000 80a2 	beq.w	80027e4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002760 <HAL_DMA_IRQHandler+0x1b4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d04a      	beq.n	8002740 <HAL_DMA_IRQHandler+0x194>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002764 <HAL_DMA_IRQHandler+0x1b8>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d045      	beq.n	8002740 <HAL_DMA_IRQHandler+0x194>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002768 <HAL_DMA_IRQHandler+0x1bc>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d040      	beq.n	8002740 <HAL_DMA_IRQHandler+0x194>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a2a      	ldr	r2, [pc, #168]	@ (800276c <HAL_DMA_IRQHandler+0x1c0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d03b      	beq.n	8002740 <HAL_DMA_IRQHandler+0x194>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a28      	ldr	r2, [pc, #160]	@ (8002770 <HAL_DMA_IRQHandler+0x1c4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d036      	beq.n	8002740 <HAL_DMA_IRQHandler+0x194>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a27      	ldr	r2, [pc, #156]	@ (8002774 <HAL_DMA_IRQHandler+0x1c8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d031      	beq.n	8002740 <HAL_DMA_IRQHandler+0x194>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a25      	ldr	r2, [pc, #148]	@ (8002778 <HAL_DMA_IRQHandler+0x1cc>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d02c      	beq.n	8002740 <HAL_DMA_IRQHandler+0x194>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a24      	ldr	r2, [pc, #144]	@ (800277c <HAL_DMA_IRQHandler+0x1d0>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d027      	beq.n	8002740 <HAL_DMA_IRQHandler+0x194>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a22      	ldr	r2, [pc, #136]	@ (8002780 <HAL_DMA_IRQHandler+0x1d4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d022      	beq.n	8002740 <HAL_DMA_IRQHandler+0x194>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a21      	ldr	r2, [pc, #132]	@ (8002784 <HAL_DMA_IRQHandler+0x1d8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d01d      	beq.n	8002740 <HAL_DMA_IRQHandler+0x194>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a1f      	ldr	r2, [pc, #124]	@ (8002788 <HAL_DMA_IRQHandler+0x1dc>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d018      	beq.n	8002740 <HAL_DMA_IRQHandler+0x194>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1e      	ldr	r2, [pc, #120]	@ (800278c <HAL_DMA_IRQHandler+0x1e0>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d013      	beq.n	8002740 <HAL_DMA_IRQHandler+0x194>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1c      	ldr	r2, [pc, #112]	@ (8002790 <HAL_DMA_IRQHandler+0x1e4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00e      	beq.n	8002740 <HAL_DMA_IRQHandler+0x194>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1b      	ldr	r2, [pc, #108]	@ (8002794 <HAL_DMA_IRQHandler+0x1e8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d009      	beq.n	8002740 <HAL_DMA_IRQHandler+0x194>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a19      	ldr	r2, [pc, #100]	@ (8002798 <HAL_DMA_IRQHandler+0x1ec>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d004      	beq.n	8002740 <HAL_DMA_IRQHandler+0x194>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a18      	ldr	r2, [pc, #96]	@ (800279c <HAL_DMA_IRQHandler+0x1f0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d12f      	bne.n	80027a0 <HAL_DMA_IRQHandler+0x1f4>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	2b00      	cmp	r3, #0
 800274c:	bf14      	ite	ne
 800274e:	2301      	movne	r3, #1
 8002750:	2300      	moveq	r3, #0
 8002752:	b2db      	uxtb	r3, r3
 8002754:	e02e      	b.n	80027b4 <HAL_DMA_IRQHandler+0x208>
 8002756:	bf00      	nop
 8002758:	24000000 	.word	0x24000000
 800275c:	1b4e81b5 	.word	0x1b4e81b5
 8002760:	40020010 	.word	0x40020010
 8002764:	40020028 	.word	0x40020028
 8002768:	40020040 	.word	0x40020040
 800276c:	40020058 	.word	0x40020058
 8002770:	40020070 	.word	0x40020070
 8002774:	40020088 	.word	0x40020088
 8002778:	400200a0 	.word	0x400200a0
 800277c:	400200b8 	.word	0x400200b8
 8002780:	40020410 	.word	0x40020410
 8002784:	40020428 	.word	0x40020428
 8002788:	40020440 	.word	0x40020440
 800278c:	40020458 	.word	0x40020458
 8002790:	40020470 	.word	0x40020470
 8002794:	40020488 	.word	0x40020488
 8002798:	400204a0 	.word	0x400204a0
 800279c:	400204b8 	.word	0x400204b8
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	bf14      	ite	ne
 80027ae:	2301      	movne	r3, #1
 80027b0:	2300      	moveq	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d015      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0204 	bic.w	r2, r2, #4
 80027c6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	2208      	movs	r2, #8
 80027d2:	409a      	lsls	r2, r3
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027dc:	f043 0201 	orr.w	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	fa22 f303 	lsr.w	r3, r2, r3
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d06e      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a69      	ldr	r2, [pc, #420]	@ (80029a4 <HAL_DMA_IRQHandler+0x3f8>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d04a      	beq.n	800289a <HAL_DMA_IRQHandler+0x2ee>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a67      	ldr	r2, [pc, #412]	@ (80029a8 <HAL_DMA_IRQHandler+0x3fc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d045      	beq.n	800289a <HAL_DMA_IRQHandler+0x2ee>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a66      	ldr	r2, [pc, #408]	@ (80029ac <HAL_DMA_IRQHandler+0x400>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d040      	beq.n	800289a <HAL_DMA_IRQHandler+0x2ee>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a64      	ldr	r2, [pc, #400]	@ (80029b0 <HAL_DMA_IRQHandler+0x404>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d03b      	beq.n	800289a <HAL_DMA_IRQHandler+0x2ee>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a63      	ldr	r2, [pc, #396]	@ (80029b4 <HAL_DMA_IRQHandler+0x408>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d036      	beq.n	800289a <HAL_DMA_IRQHandler+0x2ee>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a61      	ldr	r2, [pc, #388]	@ (80029b8 <HAL_DMA_IRQHandler+0x40c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d031      	beq.n	800289a <HAL_DMA_IRQHandler+0x2ee>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a60      	ldr	r2, [pc, #384]	@ (80029bc <HAL_DMA_IRQHandler+0x410>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d02c      	beq.n	800289a <HAL_DMA_IRQHandler+0x2ee>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a5e      	ldr	r2, [pc, #376]	@ (80029c0 <HAL_DMA_IRQHandler+0x414>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d027      	beq.n	800289a <HAL_DMA_IRQHandler+0x2ee>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a5d      	ldr	r2, [pc, #372]	@ (80029c4 <HAL_DMA_IRQHandler+0x418>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d022      	beq.n	800289a <HAL_DMA_IRQHandler+0x2ee>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a5b      	ldr	r2, [pc, #364]	@ (80029c8 <HAL_DMA_IRQHandler+0x41c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d01d      	beq.n	800289a <HAL_DMA_IRQHandler+0x2ee>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a5a      	ldr	r2, [pc, #360]	@ (80029cc <HAL_DMA_IRQHandler+0x420>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d018      	beq.n	800289a <HAL_DMA_IRQHandler+0x2ee>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a58      	ldr	r2, [pc, #352]	@ (80029d0 <HAL_DMA_IRQHandler+0x424>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d013      	beq.n	800289a <HAL_DMA_IRQHandler+0x2ee>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a57      	ldr	r2, [pc, #348]	@ (80029d4 <HAL_DMA_IRQHandler+0x428>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d00e      	beq.n	800289a <HAL_DMA_IRQHandler+0x2ee>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a55      	ldr	r2, [pc, #340]	@ (80029d8 <HAL_DMA_IRQHandler+0x42c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d009      	beq.n	800289a <HAL_DMA_IRQHandler+0x2ee>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a54      	ldr	r2, [pc, #336]	@ (80029dc <HAL_DMA_IRQHandler+0x430>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d004      	beq.n	800289a <HAL_DMA_IRQHandler+0x2ee>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a52      	ldr	r2, [pc, #328]	@ (80029e0 <HAL_DMA_IRQHandler+0x434>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d10a      	bne.n	80028b0 <HAL_DMA_IRQHandler+0x304>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	bf14      	ite	ne
 80028a8:	2301      	movne	r3, #1
 80028aa:	2300      	moveq	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	e003      	b.n	80028b8 <HAL_DMA_IRQHandler+0x30c>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2300      	movs	r3, #0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00d      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	2201      	movs	r2, #1
 80028c6:	409a      	lsls	r2, r3
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d0:	f043 0202 	orr.w	r2, r3, #2
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	2204      	movs	r2, #4
 80028e2:	409a      	lsls	r2, r3
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 808f 	beq.w	8002a0c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a2c      	ldr	r2, [pc, #176]	@ (80029a4 <HAL_DMA_IRQHandler+0x3f8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d04a      	beq.n	800298e <HAL_DMA_IRQHandler+0x3e2>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a2a      	ldr	r2, [pc, #168]	@ (80029a8 <HAL_DMA_IRQHandler+0x3fc>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d045      	beq.n	800298e <HAL_DMA_IRQHandler+0x3e2>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a29      	ldr	r2, [pc, #164]	@ (80029ac <HAL_DMA_IRQHandler+0x400>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d040      	beq.n	800298e <HAL_DMA_IRQHandler+0x3e2>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a27      	ldr	r2, [pc, #156]	@ (80029b0 <HAL_DMA_IRQHandler+0x404>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d03b      	beq.n	800298e <HAL_DMA_IRQHandler+0x3e2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a26      	ldr	r2, [pc, #152]	@ (80029b4 <HAL_DMA_IRQHandler+0x408>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d036      	beq.n	800298e <HAL_DMA_IRQHandler+0x3e2>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a24      	ldr	r2, [pc, #144]	@ (80029b8 <HAL_DMA_IRQHandler+0x40c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d031      	beq.n	800298e <HAL_DMA_IRQHandler+0x3e2>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a23      	ldr	r2, [pc, #140]	@ (80029bc <HAL_DMA_IRQHandler+0x410>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d02c      	beq.n	800298e <HAL_DMA_IRQHandler+0x3e2>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a21      	ldr	r2, [pc, #132]	@ (80029c0 <HAL_DMA_IRQHandler+0x414>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d027      	beq.n	800298e <HAL_DMA_IRQHandler+0x3e2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a20      	ldr	r2, [pc, #128]	@ (80029c4 <HAL_DMA_IRQHandler+0x418>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d022      	beq.n	800298e <HAL_DMA_IRQHandler+0x3e2>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a1e      	ldr	r2, [pc, #120]	@ (80029c8 <HAL_DMA_IRQHandler+0x41c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d01d      	beq.n	800298e <HAL_DMA_IRQHandler+0x3e2>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a1d      	ldr	r2, [pc, #116]	@ (80029cc <HAL_DMA_IRQHandler+0x420>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d018      	beq.n	800298e <HAL_DMA_IRQHandler+0x3e2>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a1b      	ldr	r2, [pc, #108]	@ (80029d0 <HAL_DMA_IRQHandler+0x424>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d013      	beq.n	800298e <HAL_DMA_IRQHandler+0x3e2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a1a      	ldr	r2, [pc, #104]	@ (80029d4 <HAL_DMA_IRQHandler+0x428>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d00e      	beq.n	800298e <HAL_DMA_IRQHandler+0x3e2>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a18      	ldr	r2, [pc, #96]	@ (80029d8 <HAL_DMA_IRQHandler+0x42c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d009      	beq.n	800298e <HAL_DMA_IRQHandler+0x3e2>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a17      	ldr	r2, [pc, #92]	@ (80029dc <HAL_DMA_IRQHandler+0x430>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d004      	beq.n	800298e <HAL_DMA_IRQHandler+0x3e2>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a15      	ldr	r2, [pc, #84]	@ (80029e0 <HAL_DMA_IRQHandler+0x434>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d12a      	bne.n	80029e4 <HAL_DMA_IRQHandler+0x438>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	bf14      	ite	ne
 800299c:	2301      	movne	r3, #1
 800299e:	2300      	moveq	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	e023      	b.n	80029ec <HAL_DMA_IRQHandler+0x440>
 80029a4:	40020010 	.word	0x40020010
 80029a8:	40020028 	.word	0x40020028
 80029ac:	40020040 	.word	0x40020040
 80029b0:	40020058 	.word	0x40020058
 80029b4:	40020070 	.word	0x40020070
 80029b8:	40020088 	.word	0x40020088
 80029bc:	400200a0 	.word	0x400200a0
 80029c0:	400200b8 	.word	0x400200b8
 80029c4:	40020410 	.word	0x40020410
 80029c8:	40020428 	.word	0x40020428
 80029cc:	40020440 	.word	0x40020440
 80029d0:	40020458 	.word	0x40020458
 80029d4:	40020470 	.word	0x40020470
 80029d8:	40020488 	.word	0x40020488
 80029dc:	400204a0 	.word	0x400204a0
 80029e0:	400204b8 	.word	0x400204b8
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2300      	movs	r3, #0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00d      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	2204      	movs	r2, #4
 80029fa:	409a      	lsls	r2, r3
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a04:	f043 0204 	orr.w	r2, r3, #4
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	2210      	movs	r2, #16
 8002a16:	409a      	lsls	r2, r3
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80a6 	beq.w	8002b6e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a85      	ldr	r2, [pc, #532]	@ (8002c3c <HAL_DMA_IRQHandler+0x690>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d04a      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x516>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a83      	ldr	r2, [pc, #524]	@ (8002c40 <HAL_DMA_IRQHandler+0x694>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d045      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x516>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a82      	ldr	r2, [pc, #520]	@ (8002c44 <HAL_DMA_IRQHandler+0x698>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d040      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x516>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a80      	ldr	r2, [pc, #512]	@ (8002c48 <HAL_DMA_IRQHandler+0x69c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d03b      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x516>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a7f      	ldr	r2, [pc, #508]	@ (8002c4c <HAL_DMA_IRQHandler+0x6a0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d036      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x516>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a7d      	ldr	r2, [pc, #500]	@ (8002c50 <HAL_DMA_IRQHandler+0x6a4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d031      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x516>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a7c      	ldr	r2, [pc, #496]	@ (8002c54 <HAL_DMA_IRQHandler+0x6a8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d02c      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x516>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a7a      	ldr	r2, [pc, #488]	@ (8002c58 <HAL_DMA_IRQHandler+0x6ac>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d027      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x516>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a79      	ldr	r2, [pc, #484]	@ (8002c5c <HAL_DMA_IRQHandler+0x6b0>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d022      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x516>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a77      	ldr	r2, [pc, #476]	@ (8002c60 <HAL_DMA_IRQHandler+0x6b4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d01d      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x516>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a76      	ldr	r2, [pc, #472]	@ (8002c64 <HAL_DMA_IRQHandler+0x6b8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d018      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x516>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a74      	ldr	r2, [pc, #464]	@ (8002c68 <HAL_DMA_IRQHandler+0x6bc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x516>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a73      	ldr	r2, [pc, #460]	@ (8002c6c <HAL_DMA_IRQHandler+0x6c0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d00e      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x516>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a71      	ldr	r2, [pc, #452]	@ (8002c70 <HAL_DMA_IRQHandler+0x6c4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d009      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x516>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a70      	ldr	r2, [pc, #448]	@ (8002c74 <HAL_DMA_IRQHandler+0x6c8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d004      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x516>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a6e      	ldr	r2, [pc, #440]	@ (8002c78 <HAL_DMA_IRQHandler+0x6cc>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d10a      	bne.n	8002ad8 <HAL_DMA_IRQHandler+0x52c>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf14      	ite	ne
 8002ad0:	2301      	movne	r3, #1
 8002ad2:	2300      	moveq	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	e009      	b.n	8002aec <HAL_DMA_IRQHandler+0x540>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	bf14      	ite	ne
 8002ae6:	2301      	movne	r3, #1
 8002ae8:	2300      	moveq	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d03e      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af4:	f003 031f 	and.w	r3, r3, #31
 8002af8:	2210      	movs	r2, #16
 8002afa:	409a      	lsls	r2, r3
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d018      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d108      	bne.n	8002b2e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d024      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	4798      	blx	r3
 8002b2c:	e01f      	b.n	8002b6e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d01b      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
 8002b3e:	e016      	b.n	8002b6e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d107      	bne.n	8002b5e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0208 	bic.w	r2, r2, #8
 8002b5c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b72:	f003 031f 	and.w	r3, r3, #31
 8002b76:	2220      	movs	r2, #32
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 8110 	beq.w	8002da4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a2c      	ldr	r2, [pc, #176]	@ (8002c3c <HAL_DMA_IRQHandler+0x690>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d04a      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x678>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a2b      	ldr	r2, [pc, #172]	@ (8002c40 <HAL_DMA_IRQHandler+0x694>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d045      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x678>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a29      	ldr	r2, [pc, #164]	@ (8002c44 <HAL_DMA_IRQHandler+0x698>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d040      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x678>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a28      	ldr	r2, [pc, #160]	@ (8002c48 <HAL_DMA_IRQHandler+0x69c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d03b      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x678>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a26      	ldr	r2, [pc, #152]	@ (8002c4c <HAL_DMA_IRQHandler+0x6a0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d036      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x678>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a25      	ldr	r2, [pc, #148]	@ (8002c50 <HAL_DMA_IRQHandler+0x6a4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d031      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x678>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a23      	ldr	r2, [pc, #140]	@ (8002c54 <HAL_DMA_IRQHandler+0x6a8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d02c      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x678>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a22      	ldr	r2, [pc, #136]	@ (8002c58 <HAL_DMA_IRQHandler+0x6ac>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d027      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x678>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a20      	ldr	r2, [pc, #128]	@ (8002c5c <HAL_DMA_IRQHandler+0x6b0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d022      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x678>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a1f      	ldr	r2, [pc, #124]	@ (8002c60 <HAL_DMA_IRQHandler+0x6b4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d01d      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x678>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1d      	ldr	r2, [pc, #116]	@ (8002c64 <HAL_DMA_IRQHandler+0x6b8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d018      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x678>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c68 <HAL_DMA_IRQHandler+0x6bc>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d013      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x678>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a1a      	ldr	r2, [pc, #104]	@ (8002c6c <HAL_DMA_IRQHandler+0x6c0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00e      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x678>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a19      	ldr	r2, [pc, #100]	@ (8002c70 <HAL_DMA_IRQHandler+0x6c4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d009      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x678>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a17      	ldr	r2, [pc, #92]	@ (8002c74 <HAL_DMA_IRQHandler+0x6c8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d004      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x678>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a16      	ldr	r2, [pc, #88]	@ (8002c78 <HAL_DMA_IRQHandler+0x6cc>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d12b      	bne.n	8002c7c <HAL_DMA_IRQHandler+0x6d0>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0310 	and.w	r3, r3, #16
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	bf14      	ite	ne
 8002c32:	2301      	movne	r3, #1
 8002c34:	2300      	moveq	r3, #0
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	e02a      	b.n	8002c90 <HAL_DMA_IRQHandler+0x6e4>
 8002c3a:	bf00      	nop
 8002c3c:	40020010 	.word	0x40020010
 8002c40:	40020028 	.word	0x40020028
 8002c44:	40020040 	.word	0x40020040
 8002c48:	40020058 	.word	0x40020058
 8002c4c:	40020070 	.word	0x40020070
 8002c50:	40020088 	.word	0x40020088
 8002c54:	400200a0 	.word	0x400200a0
 8002c58:	400200b8 	.word	0x400200b8
 8002c5c:	40020410 	.word	0x40020410
 8002c60:	40020428 	.word	0x40020428
 8002c64:	40020440 	.word	0x40020440
 8002c68:	40020458 	.word	0x40020458
 8002c6c:	40020470 	.word	0x40020470
 8002c70:	40020488 	.word	0x40020488
 8002c74:	400204a0 	.word	0x400204a0
 8002c78:	400204b8 	.word	0x400204b8
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	bf14      	ite	ne
 8002c8a:	2301      	movne	r3, #1
 8002c8c:	2300      	moveq	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 8087 	beq.w	8002da4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c9a:	f003 031f 	and.w	r3, r3, #31
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d139      	bne.n	8002d26 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0216 	bic.w	r2, r2, #22
 8002cc0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695a      	ldr	r2, [r3, #20]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cd0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d103      	bne.n	8002ce2 <HAL_DMA_IRQHandler+0x736>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d007      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0208 	bic.w	r2, r2, #8
 8002cf0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf6:	f003 031f 	and.w	r3, r3, #31
 8002cfa:	223f      	movs	r2, #63	@ 0x3f
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 834a 	beq.w	80033b0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	4798      	blx	r3
          }
          return;
 8002d24:	e344      	b.n	80033b0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d018      	beq.n	8002d66 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d108      	bne.n	8002d54 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d02c      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	4798      	blx	r3
 8002d52:	e027      	b.n	8002da4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d023      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	4798      	blx	r3
 8002d64:	e01e      	b.n	8002da4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10f      	bne.n	8002d94 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0210 	bic.w	r2, r2, #16
 8002d82:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 8306 	beq.w	80033ba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 8088 	beq.w	8002ecc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2204      	movs	r2, #4
 8002dc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a7a      	ldr	r2, [pc, #488]	@ (8002fb4 <HAL_DMA_IRQHandler+0xa08>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d04a      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x8b8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a79      	ldr	r2, [pc, #484]	@ (8002fb8 <HAL_DMA_IRQHandler+0xa0c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d045      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x8b8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a77      	ldr	r2, [pc, #476]	@ (8002fbc <HAL_DMA_IRQHandler+0xa10>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d040      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x8b8>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a76      	ldr	r2, [pc, #472]	@ (8002fc0 <HAL_DMA_IRQHandler+0xa14>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d03b      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x8b8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a74      	ldr	r2, [pc, #464]	@ (8002fc4 <HAL_DMA_IRQHandler+0xa18>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d036      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x8b8>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a73      	ldr	r2, [pc, #460]	@ (8002fc8 <HAL_DMA_IRQHandler+0xa1c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d031      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x8b8>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a71      	ldr	r2, [pc, #452]	@ (8002fcc <HAL_DMA_IRQHandler+0xa20>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d02c      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x8b8>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a70      	ldr	r2, [pc, #448]	@ (8002fd0 <HAL_DMA_IRQHandler+0xa24>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d027      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x8b8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a6e      	ldr	r2, [pc, #440]	@ (8002fd4 <HAL_DMA_IRQHandler+0xa28>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d022      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x8b8>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a6d      	ldr	r2, [pc, #436]	@ (8002fd8 <HAL_DMA_IRQHandler+0xa2c>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d01d      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x8b8>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a6b      	ldr	r2, [pc, #428]	@ (8002fdc <HAL_DMA_IRQHandler+0xa30>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d018      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x8b8>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a6a      	ldr	r2, [pc, #424]	@ (8002fe0 <HAL_DMA_IRQHandler+0xa34>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d013      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x8b8>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a68      	ldr	r2, [pc, #416]	@ (8002fe4 <HAL_DMA_IRQHandler+0xa38>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00e      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x8b8>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a67      	ldr	r2, [pc, #412]	@ (8002fe8 <HAL_DMA_IRQHandler+0xa3c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d009      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x8b8>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a65      	ldr	r2, [pc, #404]	@ (8002fec <HAL_DMA_IRQHandler+0xa40>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d004      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x8b8>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a64      	ldr	r2, [pc, #400]	@ (8002ff0 <HAL_DMA_IRQHandler+0xa44>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d108      	bne.n	8002e76 <HAL_DMA_IRQHandler+0x8ca>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	e007      	b.n	8002e86 <HAL_DMA_IRQHandler+0x8da>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0201 	bic.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d307      	bcc.n	8002ea2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1f2      	bne.n	8002e86 <HAL_DMA_IRQHandler+0x8da>
 8002ea0:	e000      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002ea2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d004      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002eba:	e003      	b.n	8002ec4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 8272 	beq.w	80033ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	4798      	blx	r3
 8002ede:	e26c      	b.n	80033ba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a43      	ldr	r2, [pc, #268]	@ (8002ff4 <HAL_DMA_IRQHandler+0xa48>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d022      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x984>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a42      	ldr	r2, [pc, #264]	@ (8002ff8 <HAL_DMA_IRQHandler+0xa4c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d01d      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x984>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a40      	ldr	r2, [pc, #256]	@ (8002ffc <HAL_DMA_IRQHandler+0xa50>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d018      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x984>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a3f      	ldr	r2, [pc, #252]	@ (8003000 <HAL_DMA_IRQHandler+0xa54>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d013      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x984>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a3d      	ldr	r2, [pc, #244]	@ (8003004 <HAL_DMA_IRQHandler+0xa58>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00e      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x984>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a3c      	ldr	r2, [pc, #240]	@ (8003008 <HAL_DMA_IRQHandler+0xa5c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d009      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x984>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a3a      	ldr	r2, [pc, #232]	@ (800300c <HAL_DMA_IRQHandler+0xa60>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d004      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x984>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a39      	ldr	r2, [pc, #228]	@ (8003010 <HAL_DMA_IRQHandler+0xa64>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d101      	bne.n	8002f34 <HAL_DMA_IRQHandler+0x988>
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <HAL_DMA_IRQHandler+0x98a>
 8002f34:	2300      	movs	r3, #0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 823f 	beq.w	80033ba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f48:	f003 031f 	and.w	r3, r3, #31
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	409a      	lsls	r2, r3
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80cd 	beq.w	80030f4 <HAL_DMA_IRQHandler+0xb48>
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80c7 	beq.w	80030f4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6a:	f003 031f 	and.w	r3, r3, #31
 8002f6e:	2204      	movs	r2, #4
 8002f70:	409a      	lsls	r2, r3
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d049      	beq.n	8003014 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d109      	bne.n	8002f9e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8210 	beq.w	80033b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f9c:	e20a      	b.n	80033b4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 8206 	beq.w	80033b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fb0:	e200      	b.n	80033b4 <HAL_DMA_IRQHandler+0xe08>
 8002fb2:	bf00      	nop
 8002fb4:	40020010 	.word	0x40020010
 8002fb8:	40020028 	.word	0x40020028
 8002fbc:	40020040 	.word	0x40020040
 8002fc0:	40020058 	.word	0x40020058
 8002fc4:	40020070 	.word	0x40020070
 8002fc8:	40020088 	.word	0x40020088
 8002fcc:	400200a0 	.word	0x400200a0
 8002fd0:	400200b8 	.word	0x400200b8
 8002fd4:	40020410 	.word	0x40020410
 8002fd8:	40020428 	.word	0x40020428
 8002fdc:	40020440 	.word	0x40020440
 8002fe0:	40020458 	.word	0x40020458
 8002fe4:	40020470 	.word	0x40020470
 8002fe8:	40020488 	.word	0x40020488
 8002fec:	400204a0 	.word	0x400204a0
 8002ff0:	400204b8 	.word	0x400204b8
 8002ff4:	58025408 	.word	0x58025408
 8002ff8:	5802541c 	.word	0x5802541c
 8002ffc:	58025430 	.word	0x58025430
 8003000:	58025444 	.word	0x58025444
 8003004:	58025458 	.word	0x58025458
 8003008:	5802546c 	.word	0x5802546c
 800300c:	58025480 	.word	0x58025480
 8003010:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f003 0320 	and.w	r3, r3, #32
 800301a:	2b00      	cmp	r3, #0
 800301c:	d160      	bne.n	80030e0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a7f      	ldr	r2, [pc, #508]	@ (8003220 <HAL_DMA_IRQHandler+0xc74>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d04a      	beq.n	80030be <HAL_DMA_IRQHandler+0xb12>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a7d      	ldr	r2, [pc, #500]	@ (8003224 <HAL_DMA_IRQHandler+0xc78>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d045      	beq.n	80030be <HAL_DMA_IRQHandler+0xb12>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a7c      	ldr	r2, [pc, #496]	@ (8003228 <HAL_DMA_IRQHandler+0xc7c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d040      	beq.n	80030be <HAL_DMA_IRQHandler+0xb12>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a7a      	ldr	r2, [pc, #488]	@ (800322c <HAL_DMA_IRQHandler+0xc80>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d03b      	beq.n	80030be <HAL_DMA_IRQHandler+0xb12>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a79      	ldr	r2, [pc, #484]	@ (8003230 <HAL_DMA_IRQHandler+0xc84>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d036      	beq.n	80030be <HAL_DMA_IRQHandler+0xb12>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a77      	ldr	r2, [pc, #476]	@ (8003234 <HAL_DMA_IRQHandler+0xc88>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d031      	beq.n	80030be <HAL_DMA_IRQHandler+0xb12>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a76      	ldr	r2, [pc, #472]	@ (8003238 <HAL_DMA_IRQHandler+0xc8c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d02c      	beq.n	80030be <HAL_DMA_IRQHandler+0xb12>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a74      	ldr	r2, [pc, #464]	@ (800323c <HAL_DMA_IRQHandler+0xc90>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d027      	beq.n	80030be <HAL_DMA_IRQHandler+0xb12>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a73      	ldr	r2, [pc, #460]	@ (8003240 <HAL_DMA_IRQHandler+0xc94>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d022      	beq.n	80030be <HAL_DMA_IRQHandler+0xb12>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a71      	ldr	r2, [pc, #452]	@ (8003244 <HAL_DMA_IRQHandler+0xc98>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01d      	beq.n	80030be <HAL_DMA_IRQHandler+0xb12>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a70      	ldr	r2, [pc, #448]	@ (8003248 <HAL_DMA_IRQHandler+0xc9c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d018      	beq.n	80030be <HAL_DMA_IRQHandler+0xb12>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a6e      	ldr	r2, [pc, #440]	@ (800324c <HAL_DMA_IRQHandler+0xca0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d013      	beq.n	80030be <HAL_DMA_IRQHandler+0xb12>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a6d      	ldr	r2, [pc, #436]	@ (8003250 <HAL_DMA_IRQHandler+0xca4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00e      	beq.n	80030be <HAL_DMA_IRQHandler+0xb12>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a6b      	ldr	r2, [pc, #428]	@ (8003254 <HAL_DMA_IRQHandler+0xca8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d009      	beq.n	80030be <HAL_DMA_IRQHandler+0xb12>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a6a      	ldr	r2, [pc, #424]	@ (8003258 <HAL_DMA_IRQHandler+0xcac>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d004      	beq.n	80030be <HAL_DMA_IRQHandler+0xb12>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a68      	ldr	r2, [pc, #416]	@ (800325c <HAL_DMA_IRQHandler+0xcb0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d108      	bne.n	80030d0 <HAL_DMA_IRQHandler+0xb24>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0208 	bic.w	r2, r2, #8
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	e007      	b.n	80030e0 <HAL_DMA_IRQHandler+0xb34>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0204 	bic.w	r2, r2, #4
 80030de:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 8165 	beq.w	80033b4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80030f2:	e15f      	b.n	80033b4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	2202      	movs	r2, #2
 80030fe:	409a      	lsls	r2, r3
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	4013      	ands	r3, r2
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 80c5 	beq.w	8003294 <HAL_DMA_IRQHandler+0xce8>
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80bf 	beq.w	8003294 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311a:	f003 031f 	and.w	r3, r3, #31
 800311e:	2202      	movs	r2, #2
 8003120:	409a      	lsls	r2, r3
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d018      	beq.n	8003162 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d109      	bne.n	800314e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 813a 	beq.w	80033b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800314c:	e134      	b.n	80033b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 8130 	beq.w	80033b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003160:	e12a      	b.n	80033b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b00      	cmp	r3, #0
 800316a:	f040 8089 	bne.w	8003280 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a2b      	ldr	r2, [pc, #172]	@ (8003220 <HAL_DMA_IRQHandler+0xc74>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d04a      	beq.n	800320e <HAL_DMA_IRQHandler+0xc62>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a29      	ldr	r2, [pc, #164]	@ (8003224 <HAL_DMA_IRQHandler+0xc78>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d045      	beq.n	800320e <HAL_DMA_IRQHandler+0xc62>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a28      	ldr	r2, [pc, #160]	@ (8003228 <HAL_DMA_IRQHandler+0xc7c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d040      	beq.n	800320e <HAL_DMA_IRQHandler+0xc62>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a26      	ldr	r2, [pc, #152]	@ (800322c <HAL_DMA_IRQHandler+0xc80>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d03b      	beq.n	800320e <HAL_DMA_IRQHandler+0xc62>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a25      	ldr	r2, [pc, #148]	@ (8003230 <HAL_DMA_IRQHandler+0xc84>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d036      	beq.n	800320e <HAL_DMA_IRQHandler+0xc62>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a23      	ldr	r2, [pc, #140]	@ (8003234 <HAL_DMA_IRQHandler+0xc88>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d031      	beq.n	800320e <HAL_DMA_IRQHandler+0xc62>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a22      	ldr	r2, [pc, #136]	@ (8003238 <HAL_DMA_IRQHandler+0xc8c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d02c      	beq.n	800320e <HAL_DMA_IRQHandler+0xc62>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a20      	ldr	r2, [pc, #128]	@ (800323c <HAL_DMA_IRQHandler+0xc90>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d027      	beq.n	800320e <HAL_DMA_IRQHandler+0xc62>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003240 <HAL_DMA_IRQHandler+0xc94>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d022      	beq.n	800320e <HAL_DMA_IRQHandler+0xc62>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003244 <HAL_DMA_IRQHandler+0xc98>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d01d      	beq.n	800320e <HAL_DMA_IRQHandler+0xc62>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003248 <HAL_DMA_IRQHandler+0xc9c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d018      	beq.n	800320e <HAL_DMA_IRQHandler+0xc62>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a1a      	ldr	r2, [pc, #104]	@ (800324c <HAL_DMA_IRQHandler+0xca0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d013      	beq.n	800320e <HAL_DMA_IRQHandler+0xc62>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a19      	ldr	r2, [pc, #100]	@ (8003250 <HAL_DMA_IRQHandler+0xca4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00e      	beq.n	800320e <HAL_DMA_IRQHandler+0xc62>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a17      	ldr	r2, [pc, #92]	@ (8003254 <HAL_DMA_IRQHandler+0xca8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d009      	beq.n	800320e <HAL_DMA_IRQHandler+0xc62>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a16      	ldr	r2, [pc, #88]	@ (8003258 <HAL_DMA_IRQHandler+0xcac>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d004      	beq.n	800320e <HAL_DMA_IRQHandler+0xc62>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a14      	ldr	r2, [pc, #80]	@ (800325c <HAL_DMA_IRQHandler+0xcb0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d128      	bne.n	8003260 <HAL_DMA_IRQHandler+0xcb4>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0214 	bic.w	r2, r2, #20
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	e027      	b.n	8003270 <HAL_DMA_IRQHandler+0xcc4>
 8003220:	40020010 	.word	0x40020010
 8003224:	40020028 	.word	0x40020028
 8003228:	40020040 	.word	0x40020040
 800322c:	40020058 	.word	0x40020058
 8003230:	40020070 	.word	0x40020070
 8003234:	40020088 	.word	0x40020088
 8003238:	400200a0 	.word	0x400200a0
 800323c:	400200b8 	.word	0x400200b8
 8003240:	40020410 	.word	0x40020410
 8003244:	40020428 	.word	0x40020428
 8003248:	40020440 	.word	0x40020440
 800324c:	40020458 	.word	0x40020458
 8003250:	40020470 	.word	0x40020470
 8003254:	40020488 	.word	0x40020488
 8003258:	400204a0 	.word	0x400204a0
 800325c:	400204b8 	.word	0x400204b8
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 020a 	bic.w	r2, r2, #10
 800326e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 8097 	beq.w	80033b8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003292:	e091      	b.n	80033b8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	2208      	movs	r2, #8
 800329e:	409a      	lsls	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 8088 	beq.w	80033ba <HAL_DMA_IRQHandler+0xe0e>
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 8082 	beq.w	80033ba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a41      	ldr	r2, [pc, #260]	@ (80033c0 <HAL_DMA_IRQHandler+0xe14>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d04a      	beq.n	8003356 <HAL_DMA_IRQHandler+0xdaa>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a3f      	ldr	r2, [pc, #252]	@ (80033c4 <HAL_DMA_IRQHandler+0xe18>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d045      	beq.n	8003356 <HAL_DMA_IRQHandler+0xdaa>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a3e      	ldr	r2, [pc, #248]	@ (80033c8 <HAL_DMA_IRQHandler+0xe1c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d040      	beq.n	8003356 <HAL_DMA_IRQHandler+0xdaa>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a3c      	ldr	r2, [pc, #240]	@ (80033cc <HAL_DMA_IRQHandler+0xe20>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d03b      	beq.n	8003356 <HAL_DMA_IRQHandler+0xdaa>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a3b      	ldr	r2, [pc, #236]	@ (80033d0 <HAL_DMA_IRQHandler+0xe24>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d036      	beq.n	8003356 <HAL_DMA_IRQHandler+0xdaa>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a39      	ldr	r2, [pc, #228]	@ (80033d4 <HAL_DMA_IRQHandler+0xe28>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d031      	beq.n	8003356 <HAL_DMA_IRQHandler+0xdaa>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a38      	ldr	r2, [pc, #224]	@ (80033d8 <HAL_DMA_IRQHandler+0xe2c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d02c      	beq.n	8003356 <HAL_DMA_IRQHandler+0xdaa>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a36      	ldr	r2, [pc, #216]	@ (80033dc <HAL_DMA_IRQHandler+0xe30>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d027      	beq.n	8003356 <HAL_DMA_IRQHandler+0xdaa>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a35      	ldr	r2, [pc, #212]	@ (80033e0 <HAL_DMA_IRQHandler+0xe34>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d022      	beq.n	8003356 <HAL_DMA_IRQHandler+0xdaa>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a33      	ldr	r2, [pc, #204]	@ (80033e4 <HAL_DMA_IRQHandler+0xe38>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d01d      	beq.n	8003356 <HAL_DMA_IRQHandler+0xdaa>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a32      	ldr	r2, [pc, #200]	@ (80033e8 <HAL_DMA_IRQHandler+0xe3c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d018      	beq.n	8003356 <HAL_DMA_IRQHandler+0xdaa>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a30      	ldr	r2, [pc, #192]	@ (80033ec <HAL_DMA_IRQHandler+0xe40>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d013      	beq.n	8003356 <HAL_DMA_IRQHandler+0xdaa>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a2f      	ldr	r2, [pc, #188]	@ (80033f0 <HAL_DMA_IRQHandler+0xe44>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d00e      	beq.n	8003356 <HAL_DMA_IRQHandler+0xdaa>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a2d      	ldr	r2, [pc, #180]	@ (80033f4 <HAL_DMA_IRQHandler+0xe48>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d009      	beq.n	8003356 <HAL_DMA_IRQHandler+0xdaa>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a2c      	ldr	r2, [pc, #176]	@ (80033f8 <HAL_DMA_IRQHandler+0xe4c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d004      	beq.n	8003356 <HAL_DMA_IRQHandler+0xdaa>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a2a      	ldr	r2, [pc, #168]	@ (80033fc <HAL_DMA_IRQHandler+0xe50>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d108      	bne.n	8003368 <HAL_DMA_IRQHandler+0xdbc>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 021c 	bic.w	r2, r2, #28
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	e007      	b.n	8003378 <HAL_DMA_IRQHandler+0xdcc>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 020e 	bic.w	r2, r2, #14
 8003376:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	2201      	movs	r2, #1
 8003382:	409a      	lsls	r2, r3
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d009      	beq.n	80033ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	4798      	blx	r3
 80033ae:	e004      	b.n	80033ba <HAL_DMA_IRQHandler+0xe0e>
          return;
 80033b0:	bf00      	nop
 80033b2:	e002      	b.n	80033ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033b4:	bf00      	nop
 80033b6:	e000      	b.n	80033ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033b8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80033ba:	3728      	adds	r7, #40	@ 0x28
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40020010 	.word	0x40020010
 80033c4:	40020028 	.word	0x40020028
 80033c8:	40020040 	.word	0x40020040
 80033cc:	40020058 	.word	0x40020058
 80033d0:	40020070 	.word	0x40020070
 80033d4:	40020088 	.word	0x40020088
 80033d8:	400200a0 	.word	0x400200a0
 80033dc:	400200b8 	.word	0x400200b8
 80033e0:	40020410 	.word	0x40020410
 80033e4:	40020428 	.word	0x40020428
 80033e8:	40020440 	.word	0x40020440
 80033ec:	40020458 	.word	0x40020458
 80033f0:	40020470 	.word	0x40020470
 80033f4:	40020488 	.word	0x40020488
 80033f8:	400204a0 	.word	0x400204a0
 80033fc:	400204b8 	.word	0x400204b8

08003400 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003412:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003418:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a7f      	ldr	r2, [pc, #508]	@ (800361c <DMA_SetConfig+0x21c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d072      	beq.n	800350a <DMA_SetConfig+0x10a>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a7d      	ldr	r2, [pc, #500]	@ (8003620 <DMA_SetConfig+0x220>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d06d      	beq.n	800350a <DMA_SetConfig+0x10a>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a7c      	ldr	r2, [pc, #496]	@ (8003624 <DMA_SetConfig+0x224>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d068      	beq.n	800350a <DMA_SetConfig+0x10a>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a7a      	ldr	r2, [pc, #488]	@ (8003628 <DMA_SetConfig+0x228>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d063      	beq.n	800350a <DMA_SetConfig+0x10a>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a79      	ldr	r2, [pc, #484]	@ (800362c <DMA_SetConfig+0x22c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d05e      	beq.n	800350a <DMA_SetConfig+0x10a>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a77      	ldr	r2, [pc, #476]	@ (8003630 <DMA_SetConfig+0x230>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d059      	beq.n	800350a <DMA_SetConfig+0x10a>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a76      	ldr	r2, [pc, #472]	@ (8003634 <DMA_SetConfig+0x234>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d054      	beq.n	800350a <DMA_SetConfig+0x10a>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a74      	ldr	r2, [pc, #464]	@ (8003638 <DMA_SetConfig+0x238>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d04f      	beq.n	800350a <DMA_SetConfig+0x10a>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a73      	ldr	r2, [pc, #460]	@ (800363c <DMA_SetConfig+0x23c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d04a      	beq.n	800350a <DMA_SetConfig+0x10a>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a71      	ldr	r2, [pc, #452]	@ (8003640 <DMA_SetConfig+0x240>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d045      	beq.n	800350a <DMA_SetConfig+0x10a>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a70      	ldr	r2, [pc, #448]	@ (8003644 <DMA_SetConfig+0x244>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d040      	beq.n	800350a <DMA_SetConfig+0x10a>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a6e      	ldr	r2, [pc, #440]	@ (8003648 <DMA_SetConfig+0x248>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d03b      	beq.n	800350a <DMA_SetConfig+0x10a>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a6d      	ldr	r2, [pc, #436]	@ (800364c <DMA_SetConfig+0x24c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d036      	beq.n	800350a <DMA_SetConfig+0x10a>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a6b      	ldr	r2, [pc, #428]	@ (8003650 <DMA_SetConfig+0x250>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d031      	beq.n	800350a <DMA_SetConfig+0x10a>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a6a      	ldr	r2, [pc, #424]	@ (8003654 <DMA_SetConfig+0x254>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d02c      	beq.n	800350a <DMA_SetConfig+0x10a>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a68      	ldr	r2, [pc, #416]	@ (8003658 <DMA_SetConfig+0x258>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d027      	beq.n	800350a <DMA_SetConfig+0x10a>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a67      	ldr	r2, [pc, #412]	@ (800365c <DMA_SetConfig+0x25c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d022      	beq.n	800350a <DMA_SetConfig+0x10a>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a65      	ldr	r2, [pc, #404]	@ (8003660 <DMA_SetConfig+0x260>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01d      	beq.n	800350a <DMA_SetConfig+0x10a>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a64      	ldr	r2, [pc, #400]	@ (8003664 <DMA_SetConfig+0x264>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d018      	beq.n	800350a <DMA_SetConfig+0x10a>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a62      	ldr	r2, [pc, #392]	@ (8003668 <DMA_SetConfig+0x268>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d013      	beq.n	800350a <DMA_SetConfig+0x10a>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a61      	ldr	r2, [pc, #388]	@ (800366c <DMA_SetConfig+0x26c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00e      	beq.n	800350a <DMA_SetConfig+0x10a>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a5f      	ldr	r2, [pc, #380]	@ (8003670 <DMA_SetConfig+0x270>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d009      	beq.n	800350a <DMA_SetConfig+0x10a>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a5e      	ldr	r2, [pc, #376]	@ (8003674 <DMA_SetConfig+0x274>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d004      	beq.n	800350a <DMA_SetConfig+0x10a>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a5c      	ldr	r2, [pc, #368]	@ (8003678 <DMA_SetConfig+0x278>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d101      	bne.n	800350e <DMA_SetConfig+0x10e>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <DMA_SetConfig+0x110>
 800350e:	2300      	movs	r3, #0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00d      	beq.n	8003530 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800351c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003522:	2b00      	cmp	r3, #0
 8003524:	d004      	beq.n	8003530 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800352e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a39      	ldr	r2, [pc, #228]	@ (800361c <DMA_SetConfig+0x21c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d04a      	beq.n	80035d0 <DMA_SetConfig+0x1d0>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a38      	ldr	r2, [pc, #224]	@ (8003620 <DMA_SetConfig+0x220>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d045      	beq.n	80035d0 <DMA_SetConfig+0x1d0>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a36      	ldr	r2, [pc, #216]	@ (8003624 <DMA_SetConfig+0x224>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d040      	beq.n	80035d0 <DMA_SetConfig+0x1d0>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a35      	ldr	r2, [pc, #212]	@ (8003628 <DMA_SetConfig+0x228>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d03b      	beq.n	80035d0 <DMA_SetConfig+0x1d0>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a33      	ldr	r2, [pc, #204]	@ (800362c <DMA_SetConfig+0x22c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d036      	beq.n	80035d0 <DMA_SetConfig+0x1d0>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a32      	ldr	r2, [pc, #200]	@ (8003630 <DMA_SetConfig+0x230>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d031      	beq.n	80035d0 <DMA_SetConfig+0x1d0>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a30      	ldr	r2, [pc, #192]	@ (8003634 <DMA_SetConfig+0x234>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d02c      	beq.n	80035d0 <DMA_SetConfig+0x1d0>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a2f      	ldr	r2, [pc, #188]	@ (8003638 <DMA_SetConfig+0x238>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d027      	beq.n	80035d0 <DMA_SetConfig+0x1d0>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a2d      	ldr	r2, [pc, #180]	@ (800363c <DMA_SetConfig+0x23c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d022      	beq.n	80035d0 <DMA_SetConfig+0x1d0>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a2c      	ldr	r2, [pc, #176]	@ (8003640 <DMA_SetConfig+0x240>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d01d      	beq.n	80035d0 <DMA_SetConfig+0x1d0>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a2a      	ldr	r2, [pc, #168]	@ (8003644 <DMA_SetConfig+0x244>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d018      	beq.n	80035d0 <DMA_SetConfig+0x1d0>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a29      	ldr	r2, [pc, #164]	@ (8003648 <DMA_SetConfig+0x248>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d013      	beq.n	80035d0 <DMA_SetConfig+0x1d0>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a27      	ldr	r2, [pc, #156]	@ (800364c <DMA_SetConfig+0x24c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d00e      	beq.n	80035d0 <DMA_SetConfig+0x1d0>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a26      	ldr	r2, [pc, #152]	@ (8003650 <DMA_SetConfig+0x250>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d009      	beq.n	80035d0 <DMA_SetConfig+0x1d0>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a24      	ldr	r2, [pc, #144]	@ (8003654 <DMA_SetConfig+0x254>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d004      	beq.n	80035d0 <DMA_SetConfig+0x1d0>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a23      	ldr	r2, [pc, #140]	@ (8003658 <DMA_SetConfig+0x258>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d101      	bne.n	80035d4 <DMA_SetConfig+0x1d4>
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <DMA_SetConfig+0x1d6>
 80035d4:	2300      	movs	r3, #0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d059      	beq.n	800368e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035de:	f003 031f 	and.w	r3, r3, #31
 80035e2:	223f      	movs	r2, #63	@ 0x3f
 80035e4:	409a      	lsls	r2, r3
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80035f8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2b40      	cmp	r3, #64	@ 0x40
 8003608:	d138      	bne.n	800367c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800361a:	e086      	b.n	800372a <DMA_SetConfig+0x32a>
 800361c:	40020010 	.word	0x40020010
 8003620:	40020028 	.word	0x40020028
 8003624:	40020040 	.word	0x40020040
 8003628:	40020058 	.word	0x40020058
 800362c:	40020070 	.word	0x40020070
 8003630:	40020088 	.word	0x40020088
 8003634:	400200a0 	.word	0x400200a0
 8003638:	400200b8 	.word	0x400200b8
 800363c:	40020410 	.word	0x40020410
 8003640:	40020428 	.word	0x40020428
 8003644:	40020440 	.word	0x40020440
 8003648:	40020458 	.word	0x40020458
 800364c:	40020470 	.word	0x40020470
 8003650:	40020488 	.word	0x40020488
 8003654:	400204a0 	.word	0x400204a0
 8003658:	400204b8 	.word	0x400204b8
 800365c:	58025408 	.word	0x58025408
 8003660:	5802541c 	.word	0x5802541c
 8003664:	58025430 	.word	0x58025430
 8003668:	58025444 	.word	0x58025444
 800366c:	58025458 	.word	0x58025458
 8003670:	5802546c 	.word	0x5802546c
 8003674:	58025480 	.word	0x58025480
 8003678:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	60da      	str	r2, [r3, #12]
}
 800368c:	e04d      	b.n	800372a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a29      	ldr	r2, [pc, #164]	@ (8003738 <DMA_SetConfig+0x338>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d022      	beq.n	80036de <DMA_SetConfig+0x2de>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a27      	ldr	r2, [pc, #156]	@ (800373c <DMA_SetConfig+0x33c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d01d      	beq.n	80036de <DMA_SetConfig+0x2de>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a26      	ldr	r2, [pc, #152]	@ (8003740 <DMA_SetConfig+0x340>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d018      	beq.n	80036de <DMA_SetConfig+0x2de>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a24      	ldr	r2, [pc, #144]	@ (8003744 <DMA_SetConfig+0x344>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d013      	beq.n	80036de <DMA_SetConfig+0x2de>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a23      	ldr	r2, [pc, #140]	@ (8003748 <DMA_SetConfig+0x348>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00e      	beq.n	80036de <DMA_SetConfig+0x2de>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a21      	ldr	r2, [pc, #132]	@ (800374c <DMA_SetConfig+0x34c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d009      	beq.n	80036de <DMA_SetConfig+0x2de>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a20      	ldr	r2, [pc, #128]	@ (8003750 <DMA_SetConfig+0x350>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d004      	beq.n	80036de <DMA_SetConfig+0x2de>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003754 <DMA_SetConfig+0x354>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d101      	bne.n	80036e2 <DMA_SetConfig+0x2e2>
 80036de:	2301      	movs	r3, #1
 80036e0:	e000      	b.n	80036e4 <DMA_SetConfig+0x2e4>
 80036e2:	2300      	movs	r3, #0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d020      	beq.n	800372a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ec:	f003 031f 	and.w	r3, r3, #31
 80036f0:	2201      	movs	r2, #1
 80036f2:	409a      	lsls	r2, r3
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2b40      	cmp	r3, #64	@ 0x40
 8003706:	d108      	bne.n	800371a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	60da      	str	r2, [r3, #12]
}
 8003718:	e007      	b.n	800372a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	60da      	str	r2, [r3, #12]
}
 800372a:	bf00      	nop
 800372c:	371c      	adds	r7, #28
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	58025408 	.word	0x58025408
 800373c:	5802541c 	.word	0x5802541c
 8003740:	58025430 	.word	0x58025430
 8003744:	58025444 	.word	0x58025444
 8003748:	58025458 	.word	0x58025458
 800374c:	5802546c 	.word	0x5802546c
 8003750:	58025480 	.word	0x58025480
 8003754:	58025494 	.word	0x58025494

08003758 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a42      	ldr	r2, [pc, #264]	@ (8003870 <DMA_CalcBaseAndBitshift+0x118>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d04a      	beq.n	8003800 <DMA_CalcBaseAndBitshift+0xa8>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a41      	ldr	r2, [pc, #260]	@ (8003874 <DMA_CalcBaseAndBitshift+0x11c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d045      	beq.n	8003800 <DMA_CalcBaseAndBitshift+0xa8>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a3f      	ldr	r2, [pc, #252]	@ (8003878 <DMA_CalcBaseAndBitshift+0x120>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d040      	beq.n	8003800 <DMA_CalcBaseAndBitshift+0xa8>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a3e      	ldr	r2, [pc, #248]	@ (800387c <DMA_CalcBaseAndBitshift+0x124>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d03b      	beq.n	8003800 <DMA_CalcBaseAndBitshift+0xa8>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a3c      	ldr	r2, [pc, #240]	@ (8003880 <DMA_CalcBaseAndBitshift+0x128>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d036      	beq.n	8003800 <DMA_CalcBaseAndBitshift+0xa8>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a3b      	ldr	r2, [pc, #236]	@ (8003884 <DMA_CalcBaseAndBitshift+0x12c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d031      	beq.n	8003800 <DMA_CalcBaseAndBitshift+0xa8>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a39      	ldr	r2, [pc, #228]	@ (8003888 <DMA_CalcBaseAndBitshift+0x130>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d02c      	beq.n	8003800 <DMA_CalcBaseAndBitshift+0xa8>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a38      	ldr	r2, [pc, #224]	@ (800388c <DMA_CalcBaseAndBitshift+0x134>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d027      	beq.n	8003800 <DMA_CalcBaseAndBitshift+0xa8>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a36      	ldr	r2, [pc, #216]	@ (8003890 <DMA_CalcBaseAndBitshift+0x138>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d022      	beq.n	8003800 <DMA_CalcBaseAndBitshift+0xa8>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a35      	ldr	r2, [pc, #212]	@ (8003894 <DMA_CalcBaseAndBitshift+0x13c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d01d      	beq.n	8003800 <DMA_CalcBaseAndBitshift+0xa8>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a33      	ldr	r2, [pc, #204]	@ (8003898 <DMA_CalcBaseAndBitshift+0x140>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d018      	beq.n	8003800 <DMA_CalcBaseAndBitshift+0xa8>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a32      	ldr	r2, [pc, #200]	@ (800389c <DMA_CalcBaseAndBitshift+0x144>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d013      	beq.n	8003800 <DMA_CalcBaseAndBitshift+0xa8>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a30      	ldr	r2, [pc, #192]	@ (80038a0 <DMA_CalcBaseAndBitshift+0x148>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00e      	beq.n	8003800 <DMA_CalcBaseAndBitshift+0xa8>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a2f      	ldr	r2, [pc, #188]	@ (80038a4 <DMA_CalcBaseAndBitshift+0x14c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d009      	beq.n	8003800 <DMA_CalcBaseAndBitshift+0xa8>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a2d      	ldr	r2, [pc, #180]	@ (80038a8 <DMA_CalcBaseAndBitshift+0x150>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d004      	beq.n	8003800 <DMA_CalcBaseAndBitshift+0xa8>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a2c      	ldr	r2, [pc, #176]	@ (80038ac <DMA_CalcBaseAndBitshift+0x154>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d101      	bne.n	8003804 <DMA_CalcBaseAndBitshift+0xac>
 8003800:	2301      	movs	r3, #1
 8003802:	e000      	b.n	8003806 <DMA_CalcBaseAndBitshift+0xae>
 8003804:	2300      	movs	r3, #0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d024      	beq.n	8003854 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	3b10      	subs	r3, #16
 8003812:	4a27      	ldr	r2, [pc, #156]	@ (80038b0 <DMA_CalcBaseAndBitshift+0x158>)
 8003814:	fba2 2303 	umull	r2, r3, r2, r3
 8003818:	091b      	lsrs	r3, r3, #4
 800381a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	4a24      	ldr	r2, [pc, #144]	@ (80038b4 <DMA_CalcBaseAndBitshift+0x15c>)
 8003824:	5cd3      	ldrb	r3, [r2, r3]
 8003826:	461a      	mov	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b03      	cmp	r3, #3
 8003830:	d908      	bls.n	8003844 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	4b1f      	ldr	r3, [pc, #124]	@ (80038b8 <DMA_CalcBaseAndBitshift+0x160>)
 800383a:	4013      	ands	r3, r2
 800383c:	1d1a      	adds	r2, r3, #4
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	659a      	str	r2, [r3, #88]	@ 0x58
 8003842:	e00d      	b.n	8003860 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	4b1b      	ldr	r3, [pc, #108]	@ (80038b8 <DMA_CalcBaseAndBitshift+0x160>)
 800384c:	4013      	ands	r3, r2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6593      	str	r3, [r2, #88]	@ 0x58
 8003852:	e005      	b.n	8003860 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003864:	4618      	mov	r0, r3
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	40020010 	.word	0x40020010
 8003874:	40020028 	.word	0x40020028
 8003878:	40020040 	.word	0x40020040
 800387c:	40020058 	.word	0x40020058
 8003880:	40020070 	.word	0x40020070
 8003884:	40020088 	.word	0x40020088
 8003888:	400200a0 	.word	0x400200a0
 800388c:	400200b8 	.word	0x400200b8
 8003890:	40020410 	.word	0x40020410
 8003894:	40020428 	.word	0x40020428
 8003898:	40020440 	.word	0x40020440
 800389c:	40020458 	.word	0x40020458
 80038a0:	40020470 	.word	0x40020470
 80038a4:	40020488 	.word	0x40020488
 80038a8:	400204a0 	.word	0x400204a0
 80038ac:	400204b8 	.word	0x400204b8
 80038b0:	aaaaaaab 	.word	0xaaaaaaab
 80038b4:	08006d50 	.word	0x08006d50
 80038b8:	fffffc00 	.word	0xfffffc00

080038bc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d120      	bne.n	8003912 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d858      	bhi.n	800398a <DMA_CheckFifoParam+0xce>
 80038d8:	a201      	add	r2, pc, #4	@ (adr r2, 80038e0 <DMA_CheckFifoParam+0x24>)
 80038da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038de:	bf00      	nop
 80038e0:	080038f1 	.word	0x080038f1
 80038e4:	08003903 	.word	0x08003903
 80038e8:	080038f1 	.word	0x080038f1
 80038ec:	0800398b 	.word	0x0800398b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d048      	beq.n	800398e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003900:	e045      	b.n	800398e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003906:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800390a:	d142      	bne.n	8003992 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003910:	e03f      	b.n	8003992 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800391a:	d123      	bne.n	8003964 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003920:	2b03      	cmp	r3, #3
 8003922:	d838      	bhi.n	8003996 <DMA_CheckFifoParam+0xda>
 8003924:	a201      	add	r2, pc, #4	@ (adr r2, 800392c <DMA_CheckFifoParam+0x70>)
 8003926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392a:	bf00      	nop
 800392c:	0800393d 	.word	0x0800393d
 8003930:	08003943 	.word	0x08003943
 8003934:	0800393d 	.word	0x0800393d
 8003938:	08003955 	.word	0x08003955
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	73fb      	strb	r3, [r7, #15]
        break;
 8003940:	e030      	b.n	80039a4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003946:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d025      	beq.n	800399a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003952:	e022      	b.n	800399a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003958:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800395c:	d11f      	bne.n	800399e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003962:	e01c      	b.n	800399e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003968:	2b02      	cmp	r3, #2
 800396a:	d902      	bls.n	8003972 <DMA_CheckFifoParam+0xb6>
 800396c:	2b03      	cmp	r3, #3
 800396e:	d003      	beq.n	8003978 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003970:	e018      	b.n	80039a4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	73fb      	strb	r3, [r7, #15]
        break;
 8003976:	e015      	b.n	80039a4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00e      	beq.n	80039a2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	73fb      	strb	r3, [r7, #15]
    break;
 8003988:	e00b      	b.n	80039a2 <DMA_CheckFifoParam+0xe6>
        break;
 800398a:	bf00      	nop
 800398c:	e00a      	b.n	80039a4 <DMA_CheckFifoParam+0xe8>
        break;
 800398e:	bf00      	nop
 8003990:	e008      	b.n	80039a4 <DMA_CheckFifoParam+0xe8>
        break;
 8003992:	bf00      	nop
 8003994:	e006      	b.n	80039a4 <DMA_CheckFifoParam+0xe8>
        break;
 8003996:	bf00      	nop
 8003998:	e004      	b.n	80039a4 <DMA_CheckFifoParam+0xe8>
        break;
 800399a:	bf00      	nop
 800399c:	e002      	b.n	80039a4 <DMA_CheckFifoParam+0xe8>
        break;
 800399e:	bf00      	nop
 80039a0:	e000      	b.n	80039a4 <DMA_CheckFifoParam+0xe8>
    break;
 80039a2:	bf00      	nop
    }
  }

  return status;
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop

080039b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a38      	ldr	r2, [pc, #224]	@ (8003aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d022      	beq.n	8003a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a36      	ldr	r2, [pc, #216]	@ (8003aac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d01d      	beq.n	8003a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a35      	ldr	r2, [pc, #212]	@ (8003ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d018      	beq.n	8003a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a33      	ldr	r2, [pc, #204]	@ (8003ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a32      	ldr	r2, [pc, #200]	@ (8003ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d00e      	beq.n	8003a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a30      	ldr	r2, [pc, #192]	@ (8003abc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d009      	beq.n	8003a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a2f      	ldr	r2, [pc, #188]	@ (8003ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d004      	beq.n	8003a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a2d      	ldr	r2, [pc, #180]	@ (8003ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d101      	bne.n	8003a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003a16:	2300      	movs	r3, #0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01a      	beq.n	8003a52 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	3b08      	subs	r3, #8
 8003a24:	4a28      	ldr	r2, [pc, #160]	@ (8003ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003a26:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2a:	091b      	lsrs	r3, r3, #4
 8003a2c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4b26      	ldr	r3, [pc, #152]	@ (8003acc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	461a      	mov	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a24      	ldr	r2, [pc, #144]	@ (8003ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003a40:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f003 031f 	and.w	r3, r3, #31
 8003a48:	2201      	movs	r2, #1
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003a50:	e024      	b.n	8003a9c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	3b10      	subs	r3, #16
 8003a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a60:	091b      	lsrs	r3, r3, #4
 8003a62:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	4a1c      	ldr	r2, [pc, #112]	@ (8003ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d806      	bhi.n	8003a7a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8003adc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d902      	bls.n	8003a7a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	3308      	adds	r3, #8
 8003a78:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4b18      	ldr	r3, [pc, #96]	@ (8003ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003a7e:	4413      	add	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	461a      	mov	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a16      	ldr	r2, [pc, #88]	@ (8003ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003a8c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f003 031f 	and.w	r3, r3, #31
 8003a94:	2201      	movs	r2, #1
 8003a96:	409a      	lsls	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003a9c:	bf00      	nop
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	58025408 	.word	0x58025408
 8003aac:	5802541c 	.word	0x5802541c
 8003ab0:	58025430 	.word	0x58025430
 8003ab4:	58025444 	.word	0x58025444
 8003ab8:	58025458 	.word	0x58025458
 8003abc:	5802546c 	.word	0x5802546c
 8003ac0:	58025480 	.word	0x58025480
 8003ac4:	58025494 	.word	0x58025494
 8003ac8:	cccccccd 	.word	0xcccccccd
 8003acc:	16009600 	.word	0x16009600
 8003ad0:	58025880 	.word	0x58025880
 8003ad4:	aaaaaaab 	.word	0xaaaaaaab
 8003ad8:	400204b8 	.word	0x400204b8
 8003adc:	4002040f 	.word	0x4002040f
 8003ae0:	10008200 	.word	0x10008200
 8003ae4:	40020880 	.word	0x40020880

08003ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d04a      	beq.n	8003b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d847      	bhi.n	8003b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a25      	ldr	r2, [pc, #148]	@ (8003ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d022      	beq.n	8003b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a24      	ldr	r2, [pc, #144]	@ (8003ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d01d      	beq.n	8003b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a22      	ldr	r2, [pc, #136]	@ (8003ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d018      	beq.n	8003b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a21      	ldr	r2, [pc, #132]	@ (8003bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d013      	beq.n	8003b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a1f      	ldr	r2, [pc, #124]	@ (8003bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00e      	beq.n	8003b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a1e      	ldr	r2, [pc, #120]	@ (8003bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d009      	beq.n	8003b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d004      	beq.n	8003b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8003bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d101      	bne.n	8003b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003b54:	2301      	movs	r3, #1
 8003b56:	e000      	b.n	8003b5a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00a      	beq.n	8003b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4b17      	ldr	r3, [pc, #92]	@ (8003bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003b62:	4413      	add	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	461a      	mov	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a15      	ldr	r2, [pc, #84]	@ (8003bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003b70:	671a      	str	r2, [r3, #112]	@ 0x70
 8003b72:	e009      	b.n	8003b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4b14      	ldr	r3, [pc, #80]	@ (8003bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003b78:	4413      	add	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a11      	ldr	r2, [pc, #68]	@ (8003bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003b86:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003b94:	bf00      	nop
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	58025408 	.word	0x58025408
 8003ba4:	5802541c 	.word	0x5802541c
 8003ba8:	58025430 	.word	0x58025430
 8003bac:	58025444 	.word	0x58025444
 8003bb0:	58025458 	.word	0x58025458
 8003bb4:	5802546c 	.word	0x5802546c
 8003bb8:	58025480 	.word	0x58025480
 8003bbc:	58025494 	.word	0x58025494
 8003bc0:	1600963f 	.word	0x1600963f
 8003bc4:	58025940 	.word	0x58025940
 8003bc8:	1000823f 	.word	0x1000823f
 8003bcc:	40020940 	.word	0x40020940

08003bd0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	607a      	str	r2, [r7, #4]
 8003bdc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e00a      	b.n	8003c02 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8003bec:	7afb      	ldrb	r3, [r7, #11]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d103      	bne.n	8003bfa <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	605a      	str	r2, [r3, #4]
      break;
 8003bf8:	e002      	b.n	8003c00 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8003bfe:	bf00      	nop
  }

  return status;
 8003c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e003      	b.n	8003c2a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003c28:	2300      	movs	r3, #0
  }
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	0c1b      	lsrs	r3, r3, #16
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 031f 	and.w	r3, r3, #31
 8003c54:	2201      	movs	r2, #1
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	011a      	lsls	r2, r3, #4
 8003c60:	4b0c      	ldr	r3, [pc, #48]	@ (8003c94 <HAL_EXTI_IRQHandler+0x5c>)
 8003c62:	4413      	add	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d009      	beq.n	8003c8a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	4798      	blx	r3
    }
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	58000088 	.word	0x58000088

08003c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b089      	sub	sp, #36	@ 0x24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003ca6:	4b89      	ldr	r3, [pc, #548]	@ (8003ecc <HAL_GPIO_Init+0x234>)
 8003ca8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003caa:	e194      	b.n	8003fd6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb8:	4013      	ands	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 8186 	beq.w	8003fd0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d005      	beq.n	8003cdc <HAL_GPIO_Init+0x44>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d130      	bne.n	8003d3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d12:	2201      	movs	r2, #1
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	091b      	lsrs	r3, r3, #4
 8003d28:	f003 0201 	and.w	r2, r3, #1
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d017      	beq.n	8003d7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	2203      	movs	r2, #3
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d123      	bne.n	8003dce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	08da      	lsrs	r2, r3, #3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3208      	adds	r2, #8
 8003d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	220f      	movs	r2, #15
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	43db      	mvns	r3, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4013      	ands	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	691a      	ldr	r2, [r3, #16]
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	08da      	lsrs	r2, r3, #3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3208      	adds	r2, #8
 8003dc8:	69b9      	ldr	r1, [r7, #24]
 8003dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	2203      	movs	r2, #3
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43db      	mvns	r3, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4013      	ands	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f003 0203 	and.w	r2, r3, #3
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 80e0 	beq.w	8003fd0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e10:	4b2f      	ldr	r3, [pc, #188]	@ (8003ed0 <HAL_GPIO_Init+0x238>)
 8003e12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e16:	4a2e      	ldr	r2, [pc, #184]	@ (8003ed0 <HAL_GPIO_Init+0x238>)
 8003e18:	f043 0302 	orr.w	r3, r3, #2
 8003e1c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003e20:	4b2b      	ldr	r3, [pc, #172]	@ (8003ed0 <HAL_GPIO_Init+0x238>)
 8003e22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e2e:	4a29      	ldr	r2, [pc, #164]	@ (8003ed4 <HAL_GPIO_Init+0x23c>)
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	089b      	lsrs	r3, r3, #2
 8003e34:	3302      	adds	r3, #2
 8003e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	220f      	movs	r2, #15
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a20      	ldr	r2, [pc, #128]	@ (8003ed8 <HAL_GPIO_Init+0x240>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d052      	beq.n	8003f00 <HAL_GPIO_Init+0x268>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8003edc <HAL_GPIO_Init+0x244>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d031      	beq.n	8003ec6 <HAL_GPIO_Init+0x22e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a1e      	ldr	r2, [pc, #120]	@ (8003ee0 <HAL_GPIO_Init+0x248>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d02b      	beq.n	8003ec2 <HAL_GPIO_Init+0x22a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ee4 <HAL_GPIO_Init+0x24c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d025      	beq.n	8003ebe <HAL_GPIO_Init+0x226>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee8 <HAL_GPIO_Init+0x250>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d01f      	beq.n	8003eba <HAL_GPIO_Init+0x222>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8003eec <HAL_GPIO_Init+0x254>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d019      	beq.n	8003eb6 <HAL_GPIO_Init+0x21e>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a1a      	ldr	r2, [pc, #104]	@ (8003ef0 <HAL_GPIO_Init+0x258>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d013      	beq.n	8003eb2 <HAL_GPIO_Init+0x21a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a19      	ldr	r2, [pc, #100]	@ (8003ef4 <HAL_GPIO_Init+0x25c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00d      	beq.n	8003eae <HAL_GPIO_Init+0x216>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a18      	ldr	r2, [pc, #96]	@ (8003ef8 <HAL_GPIO_Init+0x260>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d007      	beq.n	8003eaa <HAL_GPIO_Init+0x212>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a17      	ldr	r2, [pc, #92]	@ (8003efc <HAL_GPIO_Init+0x264>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d101      	bne.n	8003ea6 <HAL_GPIO_Init+0x20e>
 8003ea2:	2309      	movs	r3, #9
 8003ea4:	e02d      	b.n	8003f02 <HAL_GPIO_Init+0x26a>
 8003ea6:	230a      	movs	r3, #10
 8003ea8:	e02b      	b.n	8003f02 <HAL_GPIO_Init+0x26a>
 8003eaa:	2308      	movs	r3, #8
 8003eac:	e029      	b.n	8003f02 <HAL_GPIO_Init+0x26a>
 8003eae:	2307      	movs	r3, #7
 8003eb0:	e027      	b.n	8003f02 <HAL_GPIO_Init+0x26a>
 8003eb2:	2306      	movs	r3, #6
 8003eb4:	e025      	b.n	8003f02 <HAL_GPIO_Init+0x26a>
 8003eb6:	2305      	movs	r3, #5
 8003eb8:	e023      	b.n	8003f02 <HAL_GPIO_Init+0x26a>
 8003eba:	2304      	movs	r3, #4
 8003ebc:	e021      	b.n	8003f02 <HAL_GPIO_Init+0x26a>
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e01f      	b.n	8003f02 <HAL_GPIO_Init+0x26a>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e01d      	b.n	8003f02 <HAL_GPIO_Init+0x26a>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e01b      	b.n	8003f02 <HAL_GPIO_Init+0x26a>
 8003eca:	bf00      	nop
 8003ecc:	58000080 	.word	0x58000080
 8003ed0:	58024400 	.word	0x58024400
 8003ed4:	58000400 	.word	0x58000400
 8003ed8:	58020000 	.word	0x58020000
 8003edc:	58020400 	.word	0x58020400
 8003ee0:	58020800 	.word	0x58020800
 8003ee4:	58020c00 	.word	0x58020c00
 8003ee8:	58021000 	.word	0x58021000
 8003eec:	58021400 	.word	0x58021400
 8003ef0:	58021800 	.word	0x58021800
 8003ef4:	58021c00 	.word	0x58021c00
 8003ef8:	58022000 	.word	0x58022000
 8003efc:	58022400 	.word	0x58022400
 8003f00:	2300      	movs	r3, #0
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	f002 0203 	and.w	r2, r2, #3
 8003f08:	0092      	lsls	r2, r2, #2
 8003f0a:	4093      	lsls	r3, r2
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f12:	4938      	ldr	r1, [pc, #224]	@ (8003ff4 <HAL_GPIO_Init+0x35c>)
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	089b      	lsrs	r3, r3, #2
 8003f18:	3302      	adds	r3, #2
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003f46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003f74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	43db      	mvns	r3, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f47f ae63 	bne.w	8003cac <HAL_GPIO_Init+0x14>
  }
}
 8003fe6:	bf00      	nop
 8003fe8:	bf00      	nop
 8003fea:	3724      	adds	r7, #36	@ 0x24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	58000400 	.word	0x58000400

08003ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	807b      	strh	r3, [r7, #2]
 8004004:	4613      	mov	r3, r2
 8004006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004008:	787b      	ldrb	r3, [r7, #1]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800400e:	887a      	ldrh	r2, [r7, #2]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004014:	e003      	b.n	800401e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004016:	887b      	ldrh	r3, [r7, #2]
 8004018:	041a      	lsls	r2, r3, #16
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	619a      	str	r2, [r3, #24]
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
	...

0800402c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004034:	4b19      	ldr	r3, [pc, #100]	@ (800409c <HAL_PWREx_ConfigSupply+0x70>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b04      	cmp	r3, #4
 800403e:	d00a      	beq.n	8004056 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004040:	4b16      	ldr	r3, [pc, #88]	@ (800409c <HAL_PWREx_ConfigSupply+0x70>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	429a      	cmp	r2, r3
 800404c:	d001      	beq.n	8004052 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e01f      	b.n	8004092 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	e01d      	b.n	8004092 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004056:	4b11      	ldr	r3, [pc, #68]	@ (800409c <HAL_PWREx_ConfigSupply+0x70>)
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f023 0207 	bic.w	r2, r3, #7
 800405e:	490f      	ldr	r1, [pc, #60]	@ (800409c <HAL_PWREx_ConfigSupply+0x70>)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4313      	orrs	r3, r2
 8004064:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004066:	f7fd f8e3 	bl	8001230 <HAL_GetTick>
 800406a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800406c:	e009      	b.n	8004082 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800406e:	f7fd f8df 	bl	8001230 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800407c:	d901      	bls.n	8004082 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e007      	b.n	8004092 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004082:	4b06      	ldr	r3, [pc, #24]	@ (800409c <HAL_PWREx_ConfigSupply+0x70>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800408a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800408e:	d1ee      	bne.n	800406e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	58024800 	.word	0x58024800

080040a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08c      	sub	sp, #48	@ 0x30
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d102      	bne.n	80040b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	f000 bc48 	b.w	8004944 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 8088 	beq.w	80041d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040c2:	4b99      	ldr	r3, [pc, #612]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040cc:	4b96      	ldr	r3, [pc, #600]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 80040ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80040d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d4:	2b10      	cmp	r3, #16
 80040d6:	d007      	beq.n	80040e8 <HAL_RCC_OscConfig+0x48>
 80040d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040da:	2b18      	cmp	r3, #24
 80040dc:	d111      	bne.n	8004102 <HAL_RCC_OscConfig+0x62>
 80040de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d10c      	bne.n	8004102 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e8:	4b8f      	ldr	r3, [pc, #572]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d06d      	beq.n	80041d0 <HAL_RCC_OscConfig+0x130>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d169      	bne.n	80041d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	f000 bc21 	b.w	8004944 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800410a:	d106      	bne.n	800411a <HAL_RCC_OscConfig+0x7a>
 800410c:	4b86      	ldr	r3, [pc, #536]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a85      	ldr	r2, [pc, #532]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 8004112:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	e02e      	b.n	8004178 <HAL_RCC_OscConfig+0xd8>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10c      	bne.n	800413c <HAL_RCC_OscConfig+0x9c>
 8004122:	4b81      	ldr	r3, [pc, #516]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a80      	ldr	r2, [pc, #512]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 8004128:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4b7e      	ldr	r3, [pc, #504]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a7d      	ldr	r2, [pc, #500]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 8004134:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e01d      	b.n	8004178 <HAL_RCC_OscConfig+0xd8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004144:	d10c      	bne.n	8004160 <HAL_RCC_OscConfig+0xc0>
 8004146:	4b78      	ldr	r3, [pc, #480]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a77      	ldr	r2, [pc, #476]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 800414c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	4b75      	ldr	r3, [pc, #468]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a74      	ldr	r2, [pc, #464]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 8004158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	e00b      	b.n	8004178 <HAL_RCC_OscConfig+0xd8>
 8004160:	4b71      	ldr	r3, [pc, #452]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a70      	ldr	r2, [pc, #448]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 8004166:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	4b6e      	ldr	r3, [pc, #440]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a6d      	ldr	r2, [pc, #436]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 8004172:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d013      	beq.n	80041a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fd f856 	bl	8001230 <HAL_GetTick>
 8004184:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004188:	f7fd f852 	bl	8001230 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b64      	cmp	r3, #100	@ 0x64
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e3d4      	b.n	8004944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800419a:	4b63      	ldr	r3, [pc, #396]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0f0      	beq.n	8004188 <HAL_RCC_OscConfig+0xe8>
 80041a6:	e014      	b.n	80041d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fd f842 	bl	8001230 <HAL_GetTick>
 80041ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b0:	f7fd f83e 	bl	8001230 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b64      	cmp	r3, #100	@ 0x64
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e3c0      	b.n	8004944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041c2:	4b59      	ldr	r3, [pc, #356]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0x110>
 80041ce:	e000      	b.n	80041d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 80ca 	beq.w	8004374 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041e0:	4b51      	ldr	r3, [pc, #324]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041ea:	4b4f      	ldr	r3, [pc, #316]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 80041ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d007      	beq.n	8004206 <HAL_RCC_OscConfig+0x166>
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	2b18      	cmp	r3, #24
 80041fa:	d156      	bne.n	80042aa <HAL_RCC_OscConfig+0x20a>
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d151      	bne.n	80042aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004206:	4b48      	ldr	r3, [pc, #288]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b00      	cmp	r3, #0
 8004210:	d005      	beq.n	800421e <HAL_RCC_OscConfig+0x17e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e392      	b.n	8004944 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800421e:	4b42      	ldr	r3, [pc, #264]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f023 0219 	bic.w	r2, r3, #25
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	493f      	ldr	r1, [pc, #252]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 800422c:	4313      	orrs	r3, r2
 800422e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004230:	f7fc fffe 	bl	8001230 <HAL_GetTick>
 8004234:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004238:	f7fc fffa 	bl	8001230 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e37c      	b.n	8004944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800424a:	4b37      	ldr	r3, [pc, #220]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004256:	f7fc fff7 	bl	8001248 <HAL_GetREVID>
 800425a:	4603      	mov	r3, r0
 800425c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004260:	4293      	cmp	r3, r2
 8004262:	d817      	bhi.n	8004294 <HAL_RCC_OscConfig+0x1f4>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	2b40      	cmp	r3, #64	@ 0x40
 800426a:	d108      	bne.n	800427e <HAL_RCC_OscConfig+0x1de>
 800426c:	4b2e      	ldr	r3, [pc, #184]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004274:	4a2c      	ldr	r2, [pc, #176]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 8004276:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800427a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800427c:	e07a      	b.n	8004374 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800427e:	4b2a      	ldr	r3, [pc, #168]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	031b      	lsls	r3, r3, #12
 800428c:	4926      	ldr	r1, [pc, #152]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 800428e:	4313      	orrs	r3, r2
 8004290:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004292:	e06f      	b.n	8004374 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004294:	4b24      	ldr	r3, [pc, #144]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	061b      	lsls	r3, r3, #24
 80042a2:	4921      	ldr	r1, [pc, #132]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042a8:	e064      	b.n	8004374 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d047      	beq.n	8004342 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80042b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f023 0219 	bic.w	r2, r3, #25
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	491a      	ldr	r1, [pc, #104]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c4:	f7fc ffb4 	bl	8001230 <HAL_GetTick>
 80042c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042cc:	f7fc ffb0 	bl	8001230 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e332      	b.n	8004944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042de:	4b12      	ldr	r3, [pc, #72]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0f0      	beq.n	80042cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ea:	f7fc ffad 	bl	8001248 <HAL_GetREVID>
 80042ee:	4603      	mov	r3, r0
 80042f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d819      	bhi.n	800432c <HAL_RCC_OscConfig+0x28c>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	2b40      	cmp	r3, #64	@ 0x40
 80042fe:	d108      	bne.n	8004312 <HAL_RCC_OscConfig+0x272>
 8004300:	4b09      	ldr	r3, [pc, #36]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004308:	4a07      	ldr	r2, [pc, #28]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 800430a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800430e:	6053      	str	r3, [r2, #4]
 8004310:	e030      	b.n	8004374 <HAL_RCC_OscConfig+0x2d4>
 8004312:	4b05      	ldr	r3, [pc, #20]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	031b      	lsls	r3, r3, #12
 8004320:	4901      	ldr	r1, [pc, #4]	@ (8004328 <HAL_RCC_OscConfig+0x288>)
 8004322:	4313      	orrs	r3, r2
 8004324:	604b      	str	r3, [r1, #4]
 8004326:	e025      	b.n	8004374 <HAL_RCC_OscConfig+0x2d4>
 8004328:	58024400 	.word	0x58024400
 800432c:	4b9a      	ldr	r3, [pc, #616]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	061b      	lsls	r3, r3, #24
 800433a:	4997      	ldr	r1, [pc, #604]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 800433c:	4313      	orrs	r3, r2
 800433e:	604b      	str	r3, [r1, #4]
 8004340:	e018      	b.n	8004374 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004342:	4b95      	ldr	r3, [pc, #596]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a94      	ldr	r2, [pc, #592]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 8004348:	f023 0301 	bic.w	r3, r3, #1
 800434c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434e:	f7fc ff6f 	bl	8001230 <HAL_GetTick>
 8004352:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004356:	f7fc ff6b 	bl	8001230 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e2ed      	b.n	8004944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004368:	4b8b      	ldr	r3, [pc, #556]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1f0      	bne.n	8004356 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 80a9 	beq.w	80044d4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004382:	4b85      	ldr	r3, [pc, #532]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800438a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800438c:	4b82      	ldr	r3, [pc, #520]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 800438e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004390:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	2b08      	cmp	r3, #8
 8004396:	d007      	beq.n	80043a8 <HAL_RCC_OscConfig+0x308>
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	2b18      	cmp	r3, #24
 800439c:	d13a      	bne.n	8004414 <HAL_RCC_OscConfig+0x374>
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f003 0303 	and.w	r3, r3, #3
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d135      	bne.n	8004414 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043a8:	4b7b      	ldr	r3, [pc, #492]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <HAL_RCC_OscConfig+0x320>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	2b80      	cmp	r3, #128	@ 0x80
 80043ba:	d001      	beq.n	80043c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e2c1      	b.n	8004944 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043c0:	f7fc ff42 	bl	8001248 <HAL_GetREVID>
 80043c4:	4603      	mov	r3, r0
 80043c6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d817      	bhi.n	80043fe <HAL_RCC_OscConfig+0x35e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	2b20      	cmp	r3, #32
 80043d4:	d108      	bne.n	80043e8 <HAL_RCC_OscConfig+0x348>
 80043d6:	4b70      	ldr	r3, [pc, #448]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80043de:	4a6e      	ldr	r2, [pc, #440]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 80043e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80043e4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043e6:	e075      	b.n	80044d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043e8:	4b6b      	ldr	r3, [pc, #428]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	069b      	lsls	r3, r3, #26
 80043f6:	4968      	ldr	r1, [pc, #416]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043fc:	e06a      	b.n	80044d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043fe:	4b66      	ldr	r3, [pc, #408]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	061b      	lsls	r3, r3, #24
 800440c:	4962      	ldr	r1, [pc, #392]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 800440e:	4313      	orrs	r3, r2
 8004410:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004412:	e05f      	b.n	80044d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d042      	beq.n	80044a2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800441c:	4b5e      	ldr	r3, [pc, #376]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a5d      	ldr	r2, [pc, #372]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 8004422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7fc ff02 	bl	8001230 <HAL_GetTick>
 800442c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004430:	f7fc fefe 	bl	8001230 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e280      	b.n	8004944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004442:	4b55      	ldr	r3, [pc, #340]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800444e:	f7fc fefb 	bl	8001248 <HAL_GetREVID>
 8004452:	4603      	mov	r3, r0
 8004454:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004458:	4293      	cmp	r3, r2
 800445a:	d817      	bhi.n	800448c <HAL_RCC_OscConfig+0x3ec>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	2b20      	cmp	r3, #32
 8004462:	d108      	bne.n	8004476 <HAL_RCC_OscConfig+0x3d6>
 8004464:	4b4c      	ldr	r3, [pc, #304]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800446c:	4a4a      	ldr	r2, [pc, #296]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 800446e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004472:	6053      	str	r3, [r2, #4]
 8004474:	e02e      	b.n	80044d4 <HAL_RCC_OscConfig+0x434>
 8004476:	4b48      	ldr	r3, [pc, #288]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	069b      	lsls	r3, r3, #26
 8004484:	4944      	ldr	r1, [pc, #272]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 8004486:	4313      	orrs	r3, r2
 8004488:	604b      	str	r3, [r1, #4]
 800448a:	e023      	b.n	80044d4 <HAL_RCC_OscConfig+0x434>
 800448c:	4b42      	ldr	r3, [pc, #264]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	061b      	lsls	r3, r3, #24
 800449a:	493f      	ldr	r1, [pc, #252]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 800449c:	4313      	orrs	r3, r2
 800449e:	60cb      	str	r3, [r1, #12]
 80044a0:	e018      	b.n	80044d4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80044a2:	4b3d      	ldr	r3, [pc, #244]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a3c      	ldr	r2, [pc, #240]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 80044a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ae:	f7fc febf 	bl	8001230 <HAL_GetTick>
 80044b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80044b6:	f7fc febb 	bl	8001230 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e23d      	b.n	8004944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80044c8:	4b33      	ldr	r3, [pc, #204]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1f0      	bne.n	80044b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d036      	beq.n	800454e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d019      	beq.n	800451c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 80044ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ec:	4a2a      	ldr	r2, [pc, #168]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f4:	f7fc fe9c 	bl	8001230 <HAL_GetTick>
 80044f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044fc:	f7fc fe98 	bl	8001230 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e21a      	b.n	8004944 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800450e:	4b22      	ldr	r3, [pc, #136]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 8004510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0x45c>
 800451a:	e018      	b.n	800454e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800451c:	4b1e      	ldr	r3, [pc, #120]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 800451e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004520:	4a1d      	ldr	r2, [pc, #116]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 8004522:	f023 0301 	bic.w	r3, r3, #1
 8004526:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004528:	f7fc fe82 	bl	8001230 <HAL_GetTick>
 800452c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004530:	f7fc fe7e 	bl	8001230 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e200      	b.n	8004944 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004542:	4b15      	ldr	r3, [pc, #84]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 8004544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f0      	bne.n	8004530 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b00      	cmp	r3, #0
 8004558:	d039      	beq.n	80045ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d01c      	beq.n	800459c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004562:	4b0d      	ldr	r3, [pc, #52]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a0c      	ldr	r2, [pc, #48]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 8004568:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800456c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800456e:	f7fc fe5f 	bl	8001230 <HAL_GetTick>
 8004572:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004576:	f7fc fe5b 	bl	8001230 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e1dd      	b.n	8004944 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004588:	4b03      	ldr	r3, [pc, #12]	@ (8004598 <HAL_RCC_OscConfig+0x4f8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0f0      	beq.n	8004576 <HAL_RCC_OscConfig+0x4d6>
 8004594:	e01b      	b.n	80045ce <HAL_RCC_OscConfig+0x52e>
 8004596:	bf00      	nop
 8004598:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800459c:	4b9b      	ldr	r3, [pc, #620]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a9a      	ldr	r2, [pc, #616]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 80045a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80045a8:	f7fc fe42 	bl	8001230 <HAL_GetTick>
 80045ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045b0:	f7fc fe3e 	bl	8001230 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e1c0      	b.n	8004944 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045c2:	4b92      	ldr	r3, [pc, #584]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 8081 	beq.w	80046de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045dc:	4b8c      	ldr	r3, [pc, #560]	@ (8004810 <HAL_RCC_OscConfig+0x770>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a8b      	ldr	r2, [pc, #556]	@ (8004810 <HAL_RCC_OscConfig+0x770>)
 80045e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045e8:	f7fc fe22 	bl	8001230 <HAL_GetTick>
 80045ec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f0:	f7fc fe1e 	bl	8001230 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b64      	cmp	r3, #100	@ 0x64
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e1a0      	b.n	8004944 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004602:	4b83      	ldr	r3, [pc, #524]	@ (8004810 <HAL_RCC_OscConfig+0x770>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0f0      	beq.n	80045f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d106      	bne.n	8004624 <HAL_RCC_OscConfig+0x584>
 8004616:	4b7d      	ldr	r3, [pc, #500]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 8004618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461a:	4a7c      	ldr	r2, [pc, #496]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	6713      	str	r3, [r2, #112]	@ 0x70
 8004622:	e02d      	b.n	8004680 <HAL_RCC_OscConfig+0x5e0>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10c      	bne.n	8004646 <HAL_RCC_OscConfig+0x5a6>
 800462c:	4b77      	ldr	r3, [pc, #476]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 800462e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004630:	4a76      	ldr	r2, [pc, #472]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 8004632:	f023 0301 	bic.w	r3, r3, #1
 8004636:	6713      	str	r3, [r2, #112]	@ 0x70
 8004638:	4b74      	ldr	r3, [pc, #464]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 800463a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800463c:	4a73      	ldr	r2, [pc, #460]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 800463e:	f023 0304 	bic.w	r3, r3, #4
 8004642:	6713      	str	r3, [r2, #112]	@ 0x70
 8004644:	e01c      	b.n	8004680 <HAL_RCC_OscConfig+0x5e0>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b05      	cmp	r3, #5
 800464c:	d10c      	bne.n	8004668 <HAL_RCC_OscConfig+0x5c8>
 800464e:	4b6f      	ldr	r3, [pc, #444]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004652:	4a6e      	ldr	r2, [pc, #440]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 8004654:	f043 0304 	orr.w	r3, r3, #4
 8004658:	6713      	str	r3, [r2, #112]	@ 0x70
 800465a:	4b6c      	ldr	r3, [pc, #432]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465e:	4a6b      	ldr	r2, [pc, #428]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 8004660:	f043 0301 	orr.w	r3, r3, #1
 8004664:	6713      	str	r3, [r2, #112]	@ 0x70
 8004666:	e00b      	b.n	8004680 <HAL_RCC_OscConfig+0x5e0>
 8004668:	4b68      	ldr	r3, [pc, #416]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 800466a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466c:	4a67      	ldr	r2, [pc, #412]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 800466e:	f023 0301 	bic.w	r3, r3, #1
 8004672:	6713      	str	r3, [r2, #112]	@ 0x70
 8004674:	4b65      	ldr	r3, [pc, #404]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 8004676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004678:	4a64      	ldr	r2, [pc, #400]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 800467a:	f023 0304 	bic.w	r3, r3, #4
 800467e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d015      	beq.n	80046b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004688:	f7fc fdd2 	bl	8001230 <HAL_GetTick>
 800468c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800468e:	e00a      	b.n	80046a6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004690:	f7fc fdce 	bl	8001230 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800469e:	4293      	cmp	r3, r2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e14e      	b.n	8004944 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046a6:	4b59      	ldr	r3, [pc, #356]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 80046a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0ee      	beq.n	8004690 <HAL_RCC_OscConfig+0x5f0>
 80046b2:	e014      	b.n	80046de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b4:	f7fc fdbc 	bl	8001230 <HAL_GetTick>
 80046b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046ba:	e00a      	b.n	80046d2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046bc:	f7fc fdb8 	bl	8001230 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e138      	b.n	8004944 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046d2:	4b4e      	ldr	r3, [pc, #312]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 80046d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1ee      	bne.n	80046bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 812d 	beq.w	8004942 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80046e8:	4b48      	ldr	r3, [pc, #288]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046f0:	2b18      	cmp	r3, #24
 80046f2:	f000 80bd 	beq.w	8004870 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	f040 809e 	bne.w	800483c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004700:	4b42      	ldr	r3, [pc, #264]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a41      	ldr	r2, [pc, #260]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 8004706:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800470a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470c:	f7fc fd90 	bl	8001230 <HAL_GetTick>
 8004710:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004714:	f7fc fd8c 	bl	8001230 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e10e      	b.n	8004944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004726:	4b39      	ldr	r3, [pc, #228]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004732:	4b36      	ldr	r3, [pc, #216]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 8004734:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004736:	4b37      	ldr	r3, [pc, #220]	@ (8004814 <HAL_RCC_OscConfig+0x774>)
 8004738:	4013      	ands	r3, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004742:	0112      	lsls	r2, r2, #4
 8004744:	430a      	orrs	r2, r1
 8004746:	4931      	ldr	r1, [pc, #196]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 8004748:	4313      	orrs	r3, r2
 800474a:	628b      	str	r3, [r1, #40]	@ 0x28
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004750:	3b01      	subs	r3, #1
 8004752:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800475a:	3b01      	subs	r3, #1
 800475c:	025b      	lsls	r3, r3, #9
 800475e:	b29b      	uxth	r3, r3
 8004760:	431a      	orrs	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004766:	3b01      	subs	r3, #1
 8004768:	041b      	lsls	r3, r3, #16
 800476a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004774:	3b01      	subs	r3, #1
 8004776:	061b      	lsls	r3, r3, #24
 8004778:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800477c:	4923      	ldr	r1, [pc, #140]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 800477e:	4313      	orrs	r3, r2
 8004780:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004782:	4b22      	ldr	r3, [pc, #136]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 8004784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004786:	4a21      	ldr	r2, [pc, #132]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 8004788:	f023 0301 	bic.w	r3, r3, #1
 800478c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800478e:	4b1f      	ldr	r3, [pc, #124]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 8004790:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004792:	4b21      	ldr	r3, [pc, #132]	@ (8004818 <HAL_RCC_OscConfig+0x778>)
 8004794:	4013      	ands	r3, r2
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800479a:	00d2      	lsls	r2, r2, #3
 800479c:	491b      	ldr	r1, [pc, #108]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80047a2:	4b1a      	ldr	r3, [pc, #104]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 80047a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a6:	f023 020c 	bic.w	r2, r3, #12
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ae:	4917      	ldr	r1, [pc, #92]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80047b4:	4b15      	ldr	r3, [pc, #84]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 80047b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b8:	f023 0202 	bic.w	r2, r3, #2
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c0:	4912      	ldr	r1, [pc, #72]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80047c6:	4b11      	ldr	r3, [pc, #68]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 80047c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ca:	4a10      	ldr	r2, [pc, #64]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 80047cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047d2:	4b0e      	ldr	r3, [pc, #56]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 80047d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d6:	4a0d      	ldr	r2, [pc, #52]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 80047d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80047de:	4b0b      	ldr	r3, [pc, #44]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 80047e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e2:	4a0a      	ldr	r2, [pc, #40]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 80047e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80047ea:	4b08      	ldr	r3, [pc, #32]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 80047ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ee:	4a07      	ldr	r2, [pc, #28]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 80047f0:	f043 0301 	orr.w	r3, r3, #1
 80047f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047f6:	4b05      	ldr	r3, [pc, #20]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a04      	ldr	r2, [pc, #16]	@ (800480c <HAL_RCC_OscConfig+0x76c>)
 80047fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004802:	f7fc fd15 	bl	8001230 <HAL_GetTick>
 8004806:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004808:	e011      	b.n	800482e <HAL_RCC_OscConfig+0x78e>
 800480a:	bf00      	nop
 800480c:	58024400 	.word	0x58024400
 8004810:	58024800 	.word	0x58024800
 8004814:	fffffc0c 	.word	0xfffffc0c
 8004818:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800481c:	f7fc fd08 	bl	8001230 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e08a      	b.n	8004944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800482e:	4b47      	ldr	r3, [pc, #284]	@ (800494c <HAL_RCC_OscConfig+0x8ac>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0f0      	beq.n	800481c <HAL_RCC_OscConfig+0x77c>
 800483a:	e082      	b.n	8004942 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800483c:	4b43      	ldr	r3, [pc, #268]	@ (800494c <HAL_RCC_OscConfig+0x8ac>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a42      	ldr	r2, [pc, #264]	@ (800494c <HAL_RCC_OscConfig+0x8ac>)
 8004842:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004848:	f7fc fcf2 	bl	8001230 <HAL_GetTick>
 800484c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004850:	f7fc fcee 	bl	8001230 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e070      	b.n	8004944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004862:	4b3a      	ldr	r3, [pc, #232]	@ (800494c <HAL_RCC_OscConfig+0x8ac>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0x7b0>
 800486e:	e068      	b.n	8004942 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004870:	4b36      	ldr	r3, [pc, #216]	@ (800494c <HAL_RCC_OscConfig+0x8ac>)
 8004872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004874:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004876:	4b35      	ldr	r3, [pc, #212]	@ (800494c <HAL_RCC_OscConfig+0x8ac>)
 8004878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800487a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004880:	2b01      	cmp	r3, #1
 8004882:	d031      	beq.n	80048e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f003 0203 	and.w	r2, r3, #3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800488e:	429a      	cmp	r2, r3
 8004890:	d12a      	bne.n	80048e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	091b      	lsrs	r3, r3, #4
 8004896:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800489e:	429a      	cmp	r2, r3
 80048a0:	d122      	bne.n	80048e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d11a      	bne.n	80048e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	0a5b      	lsrs	r3, r3, #9
 80048b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d111      	bne.n	80048e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	0c1b      	lsrs	r3, r3, #16
 80048c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d108      	bne.n	80048e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	0e1b      	lsrs	r3, r3, #24
 80048da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d001      	beq.n	80048ec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e02b      	b.n	8004944 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80048ec:	4b17      	ldr	r3, [pc, #92]	@ (800494c <HAL_RCC_OscConfig+0x8ac>)
 80048ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f0:	08db      	lsrs	r3, r3, #3
 80048f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d01f      	beq.n	8004942 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004902:	4b12      	ldr	r3, [pc, #72]	@ (800494c <HAL_RCC_OscConfig+0x8ac>)
 8004904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004906:	4a11      	ldr	r2, [pc, #68]	@ (800494c <HAL_RCC_OscConfig+0x8ac>)
 8004908:	f023 0301 	bic.w	r3, r3, #1
 800490c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800490e:	f7fc fc8f 	bl	8001230 <HAL_GetTick>
 8004912:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004914:	bf00      	nop
 8004916:	f7fc fc8b 	bl	8001230 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491e:	4293      	cmp	r3, r2
 8004920:	d0f9      	beq.n	8004916 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004922:	4b0a      	ldr	r3, [pc, #40]	@ (800494c <HAL_RCC_OscConfig+0x8ac>)
 8004924:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004926:	4b0a      	ldr	r3, [pc, #40]	@ (8004950 <HAL_RCC_OscConfig+0x8b0>)
 8004928:	4013      	ands	r3, r2
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800492e:	00d2      	lsls	r2, r2, #3
 8004930:	4906      	ldr	r1, [pc, #24]	@ (800494c <HAL_RCC_OscConfig+0x8ac>)
 8004932:	4313      	orrs	r3, r2
 8004934:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004936:	4b05      	ldr	r3, [pc, #20]	@ (800494c <HAL_RCC_OscConfig+0x8ac>)
 8004938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493a:	4a04      	ldr	r2, [pc, #16]	@ (800494c <HAL_RCC_OscConfig+0x8ac>)
 800493c:	f043 0301 	orr.w	r3, r3, #1
 8004940:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3730      	adds	r7, #48	@ 0x30
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	58024400 	.word	0x58024400
 8004950:	ffff0007 	.word	0xffff0007

08004954 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e19c      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004968:	4b8a      	ldr	r3, [pc, #552]	@ (8004b94 <HAL_RCC_ClockConfig+0x240>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 030f 	and.w	r3, r3, #15
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d910      	bls.n	8004998 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004976:	4b87      	ldr	r3, [pc, #540]	@ (8004b94 <HAL_RCC_ClockConfig+0x240>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f023 020f 	bic.w	r2, r3, #15
 800497e:	4985      	ldr	r1, [pc, #532]	@ (8004b94 <HAL_RCC_ClockConfig+0x240>)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	4313      	orrs	r3, r2
 8004984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004986:	4b83      	ldr	r3, [pc, #524]	@ (8004b94 <HAL_RCC_ClockConfig+0x240>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d001      	beq.n	8004998 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e184      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d010      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	4b7b      	ldr	r3, [pc, #492]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d908      	bls.n	80049c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049b4:	4b78      	ldr	r3, [pc, #480]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	4975      	ldr	r1, [pc, #468]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d010      	beq.n	80049f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	695a      	ldr	r2, [r3, #20]
 80049d6:	4b70      	ldr	r3, [pc, #448]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049de:	429a      	cmp	r2, r3
 80049e0:	d908      	bls.n	80049f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049e2:	4b6d      	ldr	r3, [pc, #436]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	496a      	ldr	r1, [pc, #424]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d010      	beq.n	8004a22 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	699a      	ldr	r2, [r3, #24]
 8004a04:	4b64      	ldr	r3, [pc, #400]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d908      	bls.n	8004a22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a10:	4b61      	ldr	r3, [pc, #388]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	495e      	ldr	r1, [pc, #376]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d010      	beq.n	8004a50 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69da      	ldr	r2, [r3, #28]
 8004a32:	4b59      	ldr	r3, [pc, #356]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d908      	bls.n	8004a50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a3e:	4b56      	ldr	r3, [pc, #344]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	4953      	ldr	r1, [pc, #332]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d010      	beq.n	8004a7e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	4b4d      	ldr	r3, [pc, #308]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	f003 030f 	and.w	r3, r3, #15
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d908      	bls.n	8004a7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a6c:	4b4a      	ldr	r3, [pc, #296]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	f023 020f 	bic.w	r2, r3, #15
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	4947      	ldr	r1, [pc, #284]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d055      	beq.n	8004b36 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004a8a:	4b43      	ldr	r3, [pc, #268]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	4940      	ldr	r1, [pc, #256]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d107      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004aa4:	4b3c      	ldr	r3, [pc, #240]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d121      	bne.n	8004af4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e0f6      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2b03      	cmp	r3, #3
 8004aba:	d107      	bne.n	8004acc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004abc:	4b36      	ldr	r3, [pc, #216]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d115      	bne.n	8004af4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e0ea      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d107      	bne.n	8004ae4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ad4:	4b30      	ldr	r3, [pc, #192]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d109      	bne.n	8004af4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e0de      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ae4:	4b2c      	ldr	r3, [pc, #176]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0d6      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004af4:	4b28      	ldr	r3, [pc, #160]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	f023 0207 	bic.w	r2, r3, #7
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	4925      	ldr	r1, [pc, #148]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b06:	f7fc fb93 	bl	8001230 <HAL_GetTick>
 8004b0a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0c:	e00a      	b.n	8004b24 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b0e:	f7fc fb8f 	bl	8001230 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e0be      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b24:	4b1c      	ldr	r3, [pc, #112]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d1eb      	bne.n	8004b0e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d010      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	4b14      	ldr	r3, [pc, #80]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d208      	bcs.n	8004b64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b52:	4b11      	ldr	r3, [pc, #68]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	f023 020f 	bic.w	r2, r3, #15
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	490e      	ldr	r1, [pc, #56]	@ (8004b98 <HAL_RCC_ClockConfig+0x244>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b64:	4b0b      	ldr	r3, [pc, #44]	@ (8004b94 <HAL_RCC_ClockConfig+0x240>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 030f 	and.w	r3, r3, #15
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d214      	bcs.n	8004b9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b72:	4b08      	ldr	r3, [pc, #32]	@ (8004b94 <HAL_RCC_ClockConfig+0x240>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f023 020f 	bic.w	r2, r3, #15
 8004b7a:	4906      	ldr	r1, [pc, #24]	@ (8004b94 <HAL_RCC_ClockConfig+0x240>)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b82:	4b04      	ldr	r3, [pc, #16]	@ (8004b94 <HAL_RCC_ClockConfig+0x240>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d005      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e086      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x34e>
 8004b94:	52002000 	.word	0x52002000
 8004b98:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d010      	beq.n	8004bca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691a      	ldr	r2, [r3, #16]
 8004bac:	4b3f      	ldr	r3, [pc, #252]	@ (8004cac <HAL_RCC_ClockConfig+0x358>)
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d208      	bcs.n	8004bca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004bb8:	4b3c      	ldr	r3, [pc, #240]	@ (8004cac <HAL_RCC_ClockConfig+0x358>)
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	4939      	ldr	r1, [pc, #228]	@ (8004cac <HAL_RCC_ClockConfig+0x358>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d010      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695a      	ldr	r2, [r3, #20]
 8004bda:	4b34      	ldr	r3, [pc, #208]	@ (8004cac <HAL_RCC_ClockConfig+0x358>)
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d208      	bcs.n	8004bf8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004be6:	4b31      	ldr	r3, [pc, #196]	@ (8004cac <HAL_RCC_ClockConfig+0x358>)
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	492e      	ldr	r1, [pc, #184]	@ (8004cac <HAL_RCC_ClockConfig+0x358>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0310 	and.w	r3, r3, #16
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d010      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699a      	ldr	r2, [r3, #24]
 8004c08:	4b28      	ldr	r3, [pc, #160]	@ (8004cac <HAL_RCC_ClockConfig+0x358>)
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d208      	bcs.n	8004c26 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c14:	4b25      	ldr	r3, [pc, #148]	@ (8004cac <HAL_RCC_ClockConfig+0x358>)
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	4922      	ldr	r1, [pc, #136]	@ (8004cac <HAL_RCC_ClockConfig+0x358>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d010      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	69da      	ldr	r2, [r3, #28]
 8004c36:	4b1d      	ldr	r3, [pc, #116]	@ (8004cac <HAL_RCC_ClockConfig+0x358>)
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d208      	bcs.n	8004c54 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c42:	4b1a      	ldr	r3, [pc, #104]	@ (8004cac <HAL_RCC_ClockConfig+0x358>)
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	4917      	ldr	r1, [pc, #92]	@ (8004cac <HAL_RCC_ClockConfig+0x358>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c54:	f000 f834 	bl	8004cc0 <HAL_RCC_GetSysClockFreq>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	4b14      	ldr	r3, [pc, #80]	@ (8004cac <HAL_RCC_ClockConfig+0x358>)
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	0a1b      	lsrs	r3, r3, #8
 8004c60:	f003 030f 	and.w	r3, r3, #15
 8004c64:	4912      	ldr	r1, [pc, #72]	@ (8004cb0 <HAL_RCC_ClockConfig+0x35c>)
 8004c66:	5ccb      	ldrb	r3, [r1, r3]
 8004c68:	f003 031f 	and.w	r3, r3, #31
 8004c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c70:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c72:	4b0e      	ldr	r3, [pc, #56]	@ (8004cac <HAL_RCC_ClockConfig+0x358>)
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	4a0d      	ldr	r2, [pc, #52]	@ (8004cb0 <HAL_RCC_ClockConfig+0x35c>)
 8004c7c:	5cd3      	ldrb	r3, [r2, r3]
 8004c7e:	f003 031f 	and.w	r3, r3, #31
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	fa22 f303 	lsr.w	r3, r2, r3
 8004c88:	4a0a      	ldr	r2, [pc, #40]	@ (8004cb4 <HAL_RCC_ClockConfig+0x360>)
 8004c8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8004cb8 <HAL_RCC_ClockConfig+0x364>)
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004c92:	4b0a      	ldr	r3, [pc, #40]	@ (8004cbc <HAL_RCC_ClockConfig+0x368>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fc fa80 	bl	800119c <HAL_InitTick>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3718      	adds	r7, #24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	58024400 	.word	0x58024400
 8004cb0:	08006d34 	.word	0x08006d34
 8004cb4:	24000004 	.word	0x24000004
 8004cb8:	24000000 	.word	0x24000000
 8004cbc:	24000024 	.word	0x24000024

08004cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b089      	sub	sp, #36	@ 0x24
 8004cc4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cc6:	4bb3      	ldr	r3, [pc, #716]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cce:	2b18      	cmp	r3, #24
 8004cd0:	f200 8155 	bhi.w	8004f7e <HAL_RCC_GetSysClockFreq+0x2be>
 8004cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cdc <HAL_RCC_GetSysClockFreq+0x1c>)
 8004cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cda:	bf00      	nop
 8004cdc:	08004d41 	.word	0x08004d41
 8004ce0:	08004f7f 	.word	0x08004f7f
 8004ce4:	08004f7f 	.word	0x08004f7f
 8004ce8:	08004f7f 	.word	0x08004f7f
 8004cec:	08004f7f 	.word	0x08004f7f
 8004cf0:	08004f7f 	.word	0x08004f7f
 8004cf4:	08004f7f 	.word	0x08004f7f
 8004cf8:	08004f7f 	.word	0x08004f7f
 8004cfc:	08004d67 	.word	0x08004d67
 8004d00:	08004f7f 	.word	0x08004f7f
 8004d04:	08004f7f 	.word	0x08004f7f
 8004d08:	08004f7f 	.word	0x08004f7f
 8004d0c:	08004f7f 	.word	0x08004f7f
 8004d10:	08004f7f 	.word	0x08004f7f
 8004d14:	08004f7f 	.word	0x08004f7f
 8004d18:	08004f7f 	.word	0x08004f7f
 8004d1c:	08004d6d 	.word	0x08004d6d
 8004d20:	08004f7f 	.word	0x08004f7f
 8004d24:	08004f7f 	.word	0x08004f7f
 8004d28:	08004f7f 	.word	0x08004f7f
 8004d2c:	08004f7f 	.word	0x08004f7f
 8004d30:	08004f7f 	.word	0x08004f7f
 8004d34:	08004f7f 	.word	0x08004f7f
 8004d38:	08004f7f 	.word	0x08004f7f
 8004d3c:	08004d73 	.word	0x08004d73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d40:	4b94      	ldr	r3, [pc, #592]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d009      	beq.n	8004d60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d4c:	4b91      	ldr	r3, [pc, #580]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	08db      	lsrs	r3, r3, #3
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	4a90      	ldr	r2, [pc, #576]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d58:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004d5e:	e111      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004d60:	4b8d      	ldr	r3, [pc, #564]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d62:	61bb      	str	r3, [r7, #24]
      break;
 8004d64:	e10e      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004d66:	4b8d      	ldr	r3, [pc, #564]	@ (8004f9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d68:	61bb      	str	r3, [r7, #24]
      break;
 8004d6a:	e10b      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004d6c:	4b8c      	ldr	r3, [pc, #560]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004d6e:	61bb      	str	r3, [r7, #24]
      break;
 8004d70:	e108      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d72:	4b88      	ldr	r3, [pc, #544]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004d7c:	4b85      	ldr	r3, [pc, #532]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d80:	091b      	lsrs	r3, r3, #4
 8004d82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d86:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004d88:	4b82      	ldr	r3, [pc, #520]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004d92:	4b80      	ldr	r3, [pc, #512]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d96:	08db      	lsrs	r3, r3, #3
 8004d98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	fb02 f303 	mul.w	r3, r2, r3
 8004da2:	ee07 3a90 	vmov	s15, r3
 8004da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004daa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 80e1 	beq.w	8004f78 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	f000 8083 	beq.w	8004ec4 <HAL_RCC_GetSysClockFreq+0x204>
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	f200 80a1 	bhi.w	8004f08 <HAL_RCC_GetSysClockFreq+0x248>
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x114>
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d056      	beq.n	8004e80 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004dd2:	e099      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dd4:	4b6f      	ldr	r3, [pc, #444]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d02d      	beq.n	8004e3c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004de0:	4b6c      	ldr	r3, [pc, #432]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	08db      	lsrs	r3, r3, #3
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	4a6b      	ldr	r2, [pc, #428]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004dec:	fa22 f303 	lsr.w	r3, r2, r3
 8004df0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	ee07 3a90 	vmov	s15, r3
 8004df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e0a:	4b62      	ldr	r3, [pc, #392]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e12:	ee07 3a90 	vmov	s15, r3
 8004e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e1e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e36:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004e3a:	e087      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	ee07 3a90 	vmov	s15, r3
 8004e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e46:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004fa8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e4e:	4b51      	ldr	r3, [pc, #324]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e62:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e7e:	e065      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e8a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004fac <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e92:	4b40      	ldr	r3, [pc, #256]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ea2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ea6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ebe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ec2:	e043      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	ee07 3a90 	vmov	s15, r3
 8004eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ece:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004fb0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ede:	ee07 3a90 	vmov	s15, r3
 8004ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ee6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f06:	e021      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	ee07 3a90 	vmov	s15, r3
 8004f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f12:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004fac <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f2e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f4a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004f4c:	4b11      	ldr	r3, [pc, #68]	@ (8004f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f50:	0a5b      	lsrs	r3, r3, #9
 8004f52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f56:	3301      	adds	r3, #1
 8004f58:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	ee07 3a90 	vmov	s15, r3
 8004f60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f64:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f70:	ee17 3a90 	vmov	r3, s15
 8004f74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004f76:	e005      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	61bb      	str	r3, [r7, #24]
      break;
 8004f7c:	e002      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004f7e:	4b07      	ldr	r3, [pc, #28]	@ (8004f9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f80:	61bb      	str	r3, [r7, #24]
      break;
 8004f82:	bf00      	nop
  }

  return sysclockfreq;
 8004f84:	69bb      	ldr	r3, [r7, #24]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3724      	adds	r7, #36	@ 0x24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	58024400 	.word	0x58024400
 8004f98:	03d09000 	.word	0x03d09000
 8004f9c:	003d0900 	.word	0x003d0900
 8004fa0:	007a1200 	.word	0x007a1200
 8004fa4:	46000000 	.word	0x46000000
 8004fa8:	4c742400 	.word	0x4c742400
 8004fac:	4a742400 	.word	0x4a742400
 8004fb0:	4af42400 	.word	0x4af42400

08004fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004fba:	f7ff fe81 	bl	8004cc0 <HAL_RCC_GetSysClockFreq>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	4b10      	ldr	r3, [pc, #64]	@ (8005004 <HAL_RCC_GetHCLKFreq+0x50>)
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	0a1b      	lsrs	r3, r3, #8
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	490f      	ldr	r1, [pc, #60]	@ (8005008 <HAL_RCC_GetHCLKFreq+0x54>)
 8004fcc:	5ccb      	ldrb	r3, [r1, r3]
 8004fce:	f003 031f 	and.w	r3, r3, #31
 8004fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8005004 <HAL_RCC_GetHCLKFreq+0x50>)
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	f003 030f 	and.w	r3, r3, #15
 8004fe0:	4a09      	ldr	r2, [pc, #36]	@ (8005008 <HAL_RCC_GetHCLKFreq+0x54>)
 8004fe2:	5cd3      	ldrb	r3, [r2, r3]
 8004fe4:	f003 031f 	and.w	r3, r3, #31
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	fa22 f303 	lsr.w	r3, r2, r3
 8004fee:	4a07      	ldr	r2, [pc, #28]	@ (800500c <HAL_RCC_GetHCLKFreq+0x58>)
 8004ff0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ff2:	4a07      	ldr	r2, [pc, #28]	@ (8005010 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004ff8:	4b04      	ldr	r3, [pc, #16]	@ (800500c <HAL_RCC_GetHCLKFreq+0x58>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	58024400 	.word	0x58024400
 8005008:	08006d34 	.word	0x08006d34
 800500c:	24000004 	.word	0x24000004
 8005010:	24000000 	.word	0x24000000

08005014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005018:	f7ff ffcc 	bl	8004fb4 <HAL_RCC_GetHCLKFreq>
 800501c:	4602      	mov	r2, r0
 800501e:	4b06      	ldr	r3, [pc, #24]	@ (8005038 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	091b      	lsrs	r3, r3, #4
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	4904      	ldr	r1, [pc, #16]	@ (800503c <HAL_RCC_GetPCLK1Freq+0x28>)
 800502a:	5ccb      	ldrb	r3, [r1, r3]
 800502c:	f003 031f 	and.w	r3, r3, #31
 8005030:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005034:	4618      	mov	r0, r3
 8005036:	bd80      	pop	{r7, pc}
 8005038:	58024400 	.word	0x58024400
 800503c:	08006d34 	.word	0x08006d34

08005040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005044:	f7ff ffb6 	bl	8004fb4 <HAL_RCC_GetHCLKFreq>
 8005048:	4602      	mov	r2, r0
 800504a:	4b06      	ldr	r3, [pc, #24]	@ (8005064 <HAL_RCC_GetPCLK2Freq+0x24>)
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	0a1b      	lsrs	r3, r3, #8
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	4904      	ldr	r1, [pc, #16]	@ (8005068 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005056:	5ccb      	ldrb	r3, [r1, r3]
 8005058:	f003 031f 	and.w	r3, r3, #31
 800505c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005060:	4618      	mov	r0, r3
 8005062:	bd80      	pop	{r7, pc}
 8005064:	58024400 	.word	0x58024400
 8005068:	08006d34 	.word	0x08006d34

0800506c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005070:	f7ff ffa0 	bl	8004fb4 <HAL_RCC_GetHCLKFreq>
 8005074:	4602      	mov	r2, r0
 8005076:	4b06      	ldr	r3, [pc, #24]	@ (8005090 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	091b      	lsrs	r3, r3, #4
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	4904      	ldr	r1, [pc, #16]	@ (8005094 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005082:	5ccb      	ldrb	r3, [r1, r3]
 8005084:	f003 031f 	and.w	r3, r3, #31
 8005088:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800508c:	4618      	mov	r0, r3
 800508e:	bd80      	pop	{r7, pc}
 8005090:	58024400 	.word	0x58024400
 8005094:	08006d34 	.word	0x08006d34

08005098 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005098:	b480      	push	{r7}
 800509a:	b089      	sub	sp, #36	@ 0x24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050a0:	4ba1      	ldr	r3, [pc, #644]	@ (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80050aa:	4b9f      	ldr	r3, [pc, #636]	@ (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ae:	0b1b      	lsrs	r3, r3, #12
 80050b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80050b6:	4b9c      	ldr	r3, [pc, #624]	@ (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ba:	091b      	lsrs	r3, r3, #4
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80050c2:	4b99      	ldr	r3, [pc, #612]	@ (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c6:	08db      	lsrs	r3, r3, #3
 80050c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	fb02 f303 	mul.w	r3, r2, r3
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 8111 	beq.w	8005308 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	f000 8083 	beq.w	80051f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	f200 80a1 	bhi.w	8005238 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d056      	beq.n	80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005102:	e099      	b.n	8005238 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005104:	4b88      	ldr	r3, [pc, #544]	@ (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0320 	and.w	r3, r3, #32
 800510c:	2b00      	cmp	r3, #0
 800510e:	d02d      	beq.n	800516c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005110:	4b85      	ldr	r3, [pc, #532]	@ (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	08db      	lsrs	r3, r3, #3
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	4a84      	ldr	r2, [pc, #528]	@ (800532c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800511c:	fa22 f303 	lsr.w	r3, r2, r3
 8005120:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	ee07 3a90 	vmov	s15, r3
 8005128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	ee07 3a90 	vmov	s15, r3
 8005132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800513a:	4b7b      	ldr	r3, [pc, #492]	@ (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800513c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005142:	ee07 3a90 	vmov	s15, r3
 8005146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800514a:	ed97 6a03 	vldr	s12, [r7, #12]
 800514e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800515a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800515e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005166:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800516a:	e087      	b.n	800527c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005176:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005334 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800517a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800517e:	4b6a      	ldr	r3, [pc, #424]	@ (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800518e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005192:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800519a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800519e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051ae:	e065      	b.n	800527c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	ee07 3a90 	vmov	s15, r3
 80051b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005338 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051c2:	4b59      	ldr	r3, [pc, #356]	@ (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ca:	ee07 3a90 	vmov	s15, r3
 80051ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051f2:	e043      	b.n	800527c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800533c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005206:	4b48      	ldr	r3, [pc, #288]	@ (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005216:	ed97 6a03 	vldr	s12, [r7, #12]
 800521a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800521e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005226:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800522a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800522e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005236:	e021      	b.n	800527c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005242:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005338 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800524a:	4b37      	ldr	r3, [pc, #220]	@ (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800524c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800524e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800525a:	ed97 6a03 	vldr	s12, [r7, #12]
 800525e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800526a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800526e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005276:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800527a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800527c:	4b2a      	ldr	r3, [pc, #168]	@ (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800527e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005280:	0a5b      	lsrs	r3, r3, #9
 8005282:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005292:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005296:	edd7 6a07 	vldr	s13, [r7, #28]
 800529a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800529e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052a2:	ee17 2a90 	vmov	r2, s15
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80052aa:	4b1f      	ldr	r3, [pc, #124]	@ (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ae:	0c1b      	lsrs	r3, r3, #16
 80052b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052b4:	ee07 3a90 	vmov	s15, r3
 80052b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80052c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052d0:	ee17 2a90 	vmov	r2, s15
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80052d8:	4b13      	ldr	r3, [pc, #76]	@ (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052dc:	0e1b      	lsrs	r3, r3, #24
 80052de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052e2:	ee07 3a90 	vmov	s15, r3
 80052e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80052f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052fe:	ee17 2a90 	vmov	r2, s15
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005306:	e008      	b.n	800531a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	609a      	str	r2, [r3, #8]
}
 800531a:	bf00      	nop
 800531c:	3724      	adds	r7, #36	@ 0x24
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	58024400 	.word	0x58024400
 800532c:	03d09000 	.word	0x03d09000
 8005330:	46000000 	.word	0x46000000
 8005334:	4c742400 	.word	0x4c742400
 8005338:	4a742400 	.word	0x4a742400
 800533c:	4af42400 	.word	0x4af42400

08005340 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005340:	b480      	push	{r7}
 8005342:	b089      	sub	sp, #36	@ 0x24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005348:	4ba1      	ldr	r3, [pc, #644]	@ (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800534a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534c:	f003 0303 	and.w	r3, r3, #3
 8005350:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005352:	4b9f      	ldr	r3, [pc, #636]	@ (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005356:	0d1b      	lsrs	r3, r3, #20
 8005358:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800535c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800535e:	4b9c      	ldr	r3, [pc, #624]	@ (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005362:	0a1b      	lsrs	r3, r3, #8
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800536a:	4b99      	ldr	r3, [pc, #612]	@ (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800536c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536e:	08db      	lsrs	r3, r3, #3
 8005370:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	fb02 f303 	mul.w	r3, r2, r3
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005382:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 8111 	beq.w	80055b0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	2b02      	cmp	r3, #2
 8005392:	f000 8083 	beq.w	800549c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	2b02      	cmp	r3, #2
 800539a:	f200 80a1 	bhi.w	80054e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d056      	beq.n	8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80053aa:	e099      	b.n	80054e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053ac:	4b88      	ldr	r3, [pc, #544]	@ (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0320 	and.w	r3, r3, #32
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d02d      	beq.n	8005414 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053b8:	4b85      	ldr	r3, [pc, #532]	@ (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	08db      	lsrs	r3, r3, #3
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	4a84      	ldr	r2, [pc, #528]	@ (80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80053c4:	fa22 f303 	lsr.w	r3, r2, r3
 80053c8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	ee07 3a90 	vmov	s15, r3
 80053d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	ee07 3a90 	vmov	s15, r3
 80053da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053e2:	4b7b      	ldr	r3, [pc, #492]	@ (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ea:	ee07 3a90 	vmov	s15, r3
 80053ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053f6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80055d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005402:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800540a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800540e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005412:	e087      	b.n	8005524 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	ee07 3a90 	vmov	s15, r3
 800541a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800541e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80055dc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005426:	4b6a      	ldr	r3, [pc, #424]	@ (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800542a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800542e:	ee07 3a90 	vmov	s15, r3
 8005432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005436:	ed97 6a03 	vldr	s12, [r7, #12]
 800543a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80055d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800543e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005446:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800544a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800544e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005452:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005456:	e065      	b.n	8005524 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	ee07 3a90 	vmov	s15, r3
 800545e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005462:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80055e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800546a:	4b59      	ldr	r3, [pc, #356]	@ (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800546c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005472:	ee07 3a90 	vmov	s15, r3
 8005476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800547a:	ed97 6a03 	vldr	s12, [r7, #12]
 800547e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80055d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800548a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800548e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005496:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800549a:	e043      	b.n	8005524 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	ee07 3a90 	vmov	s15, r3
 80054a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80055e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80054aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ae:	4b48      	ldr	r3, [pc, #288]	@ (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b6:	ee07 3a90 	vmov	s15, r3
 80054ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054be:	ed97 6a03 	vldr	s12, [r7, #12]
 80054c2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80055d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054de:	e021      	b.n	8005524 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	ee07 3a90 	vmov	s15, r3
 80054e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80055e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80054ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054f2:	4b37      	ldr	r3, [pc, #220]	@ (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054fa:	ee07 3a90 	vmov	s15, r3
 80054fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005502:	ed97 6a03 	vldr	s12, [r7, #12]
 8005506:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80055d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800550a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800550e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005512:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800551a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800551e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005522:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005524:	4b2a      	ldr	r3, [pc, #168]	@ (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005528:	0a5b      	lsrs	r3, r3, #9
 800552a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800552e:	ee07 3a90 	vmov	s15, r3
 8005532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005536:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800553a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800553e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005546:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800554a:	ee17 2a90 	vmov	r2, s15
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005552:	4b1f      	ldr	r3, [pc, #124]	@ (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005556:	0c1b      	lsrs	r3, r3, #16
 8005558:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800555c:	ee07 3a90 	vmov	s15, r3
 8005560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005564:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005568:	ee37 7a87 	vadd.f32	s14, s15, s14
 800556c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005570:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005578:	ee17 2a90 	vmov	r2, s15
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005580:	4b13      	ldr	r3, [pc, #76]	@ (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005584:	0e1b      	lsrs	r3, r3, #24
 8005586:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800558a:	ee07 3a90 	vmov	s15, r3
 800558e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005592:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005596:	ee37 7a87 	vadd.f32	s14, s15, s14
 800559a:	edd7 6a07 	vldr	s13, [r7, #28]
 800559e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055a6:	ee17 2a90 	vmov	r2, s15
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80055ae:	e008      	b.n	80055c2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	609a      	str	r2, [r3, #8]
}
 80055c2:	bf00      	nop
 80055c4:	3724      	adds	r7, #36	@ 0x24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	58024400 	.word	0x58024400
 80055d4:	03d09000 	.word	0x03d09000
 80055d8:	46000000 	.word	0x46000000
 80055dc:	4c742400 	.word	0x4c742400
 80055e0:	4a742400 	.word	0x4a742400
 80055e4:	4af42400 	.word	0x4af42400

080055e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e049      	b.n	800568e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d106      	bne.n	8005614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7fb fa7a 	bl	8000b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	3304      	adds	r3, #4
 8005624:	4619      	mov	r1, r3
 8005626:	4610      	mov	r0, r2
 8005628:	f000 f99e 	bl	8005968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
	...

08005698 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d001      	beq.n	80056b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e04c      	b.n	800574a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a26      	ldr	r2, [pc, #152]	@ (8005758 <HAL_TIM_Base_Start+0xc0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d022      	beq.n	8005708 <HAL_TIM_Base_Start+0x70>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ca:	d01d      	beq.n	8005708 <HAL_TIM_Base_Start+0x70>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a22      	ldr	r2, [pc, #136]	@ (800575c <HAL_TIM_Base_Start+0xc4>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d018      	beq.n	8005708 <HAL_TIM_Base_Start+0x70>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a21      	ldr	r2, [pc, #132]	@ (8005760 <HAL_TIM_Base_Start+0xc8>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d013      	beq.n	8005708 <HAL_TIM_Base_Start+0x70>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005764 <HAL_TIM_Base_Start+0xcc>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d00e      	beq.n	8005708 <HAL_TIM_Base_Start+0x70>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005768 <HAL_TIM_Base_Start+0xd0>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d009      	beq.n	8005708 <HAL_TIM_Base_Start+0x70>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a1c      	ldr	r2, [pc, #112]	@ (800576c <HAL_TIM_Base_Start+0xd4>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d004      	beq.n	8005708 <HAL_TIM_Base_Start+0x70>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a1b      	ldr	r2, [pc, #108]	@ (8005770 <HAL_TIM_Base_Start+0xd8>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d115      	bne.n	8005734 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689a      	ldr	r2, [r3, #8]
 800570e:	4b19      	ldr	r3, [pc, #100]	@ (8005774 <HAL_TIM_Base_Start+0xdc>)
 8005710:	4013      	ands	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b06      	cmp	r3, #6
 8005718:	d015      	beq.n	8005746 <HAL_TIM_Base_Start+0xae>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005720:	d011      	beq.n	8005746 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f042 0201 	orr.w	r2, r2, #1
 8005730:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005732:	e008      	b.n	8005746 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	e000      	b.n	8005748 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005746:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40010000 	.word	0x40010000
 800575c:	40000400 	.word	0x40000400
 8005760:	40000800 	.word	0x40000800
 8005764:	40000c00 	.word	0x40000c00
 8005768:	40010400 	.word	0x40010400
 800576c:	40001800 	.word	0x40001800
 8005770:	40014000 	.word	0x40014000
 8005774:	00010007 	.word	0x00010007

08005778 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800578c:	2b01      	cmp	r3, #1
 800578e:	d101      	bne.n	8005794 <HAL_TIM_ConfigClockSource+0x1c>
 8005790:	2302      	movs	r3, #2
 8005792:	e0dc      	b.n	800594e <HAL_TIM_ConfigClockSource+0x1d6>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	4b6a      	ldr	r3, [pc, #424]	@ (8005958 <HAL_TIM_ConfigClockSource+0x1e0>)
 80057b0:	4013      	ands	r3, r2
 80057b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a64      	ldr	r2, [pc, #400]	@ (800595c <HAL_TIM_ConfigClockSource+0x1e4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	f000 80a9 	beq.w	8005922 <HAL_TIM_ConfigClockSource+0x1aa>
 80057d0:	4a62      	ldr	r2, [pc, #392]	@ (800595c <HAL_TIM_ConfigClockSource+0x1e4>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	f200 80ae 	bhi.w	8005934 <HAL_TIM_ConfigClockSource+0x1bc>
 80057d8:	4a61      	ldr	r2, [pc, #388]	@ (8005960 <HAL_TIM_ConfigClockSource+0x1e8>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	f000 80a1 	beq.w	8005922 <HAL_TIM_ConfigClockSource+0x1aa>
 80057e0:	4a5f      	ldr	r2, [pc, #380]	@ (8005960 <HAL_TIM_ConfigClockSource+0x1e8>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	f200 80a6 	bhi.w	8005934 <HAL_TIM_ConfigClockSource+0x1bc>
 80057e8:	4a5e      	ldr	r2, [pc, #376]	@ (8005964 <HAL_TIM_ConfigClockSource+0x1ec>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	f000 8099 	beq.w	8005922 <HAL_TIM_ConfigClockSource+0x1aa>
 80057f0:	4a5c      	ldr	r2, [pc, #368]	@ (8005964 <HAL_TIM_ConfigClockSource+0x1ec>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	f200 809e 	bhi.w	8005934 <HAL_TIM_ConfigClockSource+0x1bc>
 80057f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80057fc:	f000 8091 	beq.w	8005922 <HAL_TIM_ConfigClockSource+0x1aa>
 8005800:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005804:	f200 8096 	bhi.w	8005934 <HAL_TIM_ConfigClockSource+0x1bc>
 8005808:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800580c:	f000 8089 	beq.w	8005922 <HAL_TIM_ConfigClockSource+0x1aa>
 8005810:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005814:	f200 808e 	bhi.w	8005934 <HAL_TIM_ConfigClockSource+0x1bc>
 8005818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800581c:	d03e      	beq.n	800589c <HAL_TIM_ConfigClockSource+0x124>
 800581e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005822:	f200 8087 	bhi.w	8005934 <HAL_TIM_ConfigClockSource+0x1bc>
 8005826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800582a:	f000 8086 	beq.w	800593a <HAL_TIM_ConfigClockSource+0x1c2>
 800582e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005832:	d87f      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x1bc>
 8005834:	2b70      	cmp	r3, #112	@ 0x70
 8005836:	d01a      	beq.n	800586e <HAL_TIM_ConfigClockSource+0xf6>
 8005838:	2b70      	cmp	r3, #112	@ 0x70
 800583a:	d87b      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x1bc>
 800583c:	2b60      	cmp	r3, #96	@ 0x60
 800583e:	d050      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x16a>
 8005840:	2b60      	cmp	r3, #96	@ 0x60
 8005842:	d877      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x1bc>
 8005844:	2b50      	cmp	r3, #80	@ 0x50
 8005846:	d03c      	beq.n	80058c2 <HAL_TIM_ConfigClockSource+0x14a>
 8005848:	2b50      	cmp	r3, #80	@ 0x50
 800584a:	d873      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x1bc>
 800584c:	2b40      	cmp	r3, #64	@ 0x40
 800584e:	d058      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x18a>
 8005850:	2b40      	cmp	r3, #64	@ 0x40
 8005852:	d86f      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x1bc>
 8005854:	2b30      	cmp	r3, #48	@ 0x30
 8005856:	d064      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x1aa>
 8005858:	2b30      	cmp	r3, #48	@ 0x30
 800585a:	d86b      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x1bc>
 800585c:	2b20      	cmp	r3, #32
 800585e:	d060      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x1aa>
 8005860:	2b20      	cmp	r3, #32
 8005862:	d867      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x1bc>
 8005864:	2b00      	cmp	r3, #0
 8005866:	d05c      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x1aa>
 8005868:	2b10      	cmp	r3, #16
 800586a:	d05a      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x1aa>
 800586c:	e062      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800587e:	f000 f991 	bl	8005ba4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005890:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	609a      	str	r2, [r3, #8]
      break;
 800589a:	e04f      	b.n	800593c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058ac:	f000 f97a 	bl	8005ba4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058be:	609a      	str	r2, [r3, #8]
      break;
 80058c0:	e03c      	b.n	800593c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ce:	461a      	mov	r2, r3
 80058d0:	f000 f8ea 	bl	8005aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2150      	movs	r1, #80	@ 0x50
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 f944 	bl	8005b68 <TIM_ITRx_SetConfig>
      break;
 80058e0:	e02c      	b.n	800593c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058ee:	461a      	mov	r2, r3
 80058f0:	f000 f909 	bl	8005b06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2160      	movs	r1, #96	@ 0x60
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 f934 	bl	8005b68 <TIM_ITRx_SetConfig>
      break;
 8005900:	e01c      	b.n	800593c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800590e:	461a      	mov	r2, r3
 8005910:	f000 f8ca 	bl	8005aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2140      	movs	r1, #64	@ 0x40
 800591a:	4618      	mov	r0, r3
 800591c:	f000 f924 	bl	8005b68 <TIM_ITRx_SetConfig>
      break;
 8005920:	e00c      	b.n	800593c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4619      	mov	r1, r3
 800592c:	4610      	mov	r0, r2
 800592e:	f000 f91b 	bl	8005b68 <TIM_ITRx_SetConfig>
      break;
 8005932:	e003      	b.n	800593c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	73fb      	strb	r3, [r7, #15]
      break;
 8005938:	e000      	b.n	800593c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800593a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800594c:	7bfb      	ldrb	r3, [r7, #15]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	ffceff88 	.word	0xffceff88
 800595c:	00100040 	.word	0x00100040
 8005960:	00100030 	.word	0x00100030
 8005964:	00100020 	.word	0x00100020

08005968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a43      	ldr	r2, [pc, #268]	@ (8005a88 <TIM_Base_SetConfig+0x120>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005986:	d00f      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a40      	ldr	r2, [pc, #256]	@ (8005a8c <TIM_Base_SetConfig+0x124>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00b      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a3f      	ldr	r2, [pc, #252]	@ (8005a90 <TIM_Base_SetConfig+0x128>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d007      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a3e      	ldr	r2, [pc, #248]	@ (8005a94 <TIM_Base_SetConfig+0x12c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d003      	beq.n	80059a8 <TIM_Base_SetConfig+0x40>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a3d      	ldr	r2, [pc, #244]	@ (8005a98 <TIM_Base_SetConfig+0x130>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d108      	bne.n	80059ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a32      	ldr	r2, [pc, #200]	@ (8005a88 <TIM_Base_SetConfig+0x120>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d01f      	beq.n	8005a02 <TIM_Base_SetConfig+0x9a>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059c8:	d01b      	beq.n	8005a02 <TIM_Base_SetConfig+0x9a>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a2f      	ldr	r2, [pc, #188]	@ (8005a8c <TIM_Base_SetConfig+0x124>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d017      	beq.n	8005a02 <TIM_Base_SetConfig+0x9a>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a2e      	ldr	r2, [pc, #184]	@ (8005a90 <TIM_Base_SetConfig+0x128>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d013      	beq.n	8005a02 <TIM_Base_SetConfig+0x9a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a2d      	ldr	r2, [pc, #180]	@ (8005a94 <TIM_Base_SetConfig+0x12c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d00f      	beq.n	8005a02 <TIM_Base_SetConfig+0x9a>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a2c      	ldr	r2, [pc, #176]	@ (8005a98 <TIM_Base_SetConfig+0x130>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00b      	beq.n	8005a02 <TIM_Base_SetConfig+0x9a>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a2b      	ldr	r2, [pc, #172]	@ (8005a9c <TIM_Base_SetConfig+0x134>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d007      	beq.n	8005a02 <TIM_Base_SetConfig+0x9a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a2a      	ldr	r2, [pc, #168]	@ (8005aa0 <TIM_Base_SetConfig+0x138>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d003      	beq.n	8005a02 <TIM_Base_SetConfig+0x9a>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a29      	ldr	r2, [pc, #164]	@ (8005aa4 <TIM_Base_SetConfig+0x13c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d108      	bne.n	8005a14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	689a      	ldr	r2, [r3, #8]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a14      	ldr	r2, [pc, #80]	@ (8005a88 <TIM_Base_SetConfig+0x120>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d00f      	beq.n	8005a5a <TIM_Base_SetConfig+0xf2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a16      	ldr	r2, [pc, #88]	@ (8005a98 <TIM_Base_SetConfig+0x130>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d00b      	beq.n	8005a5a <TIM_Base_SetConfig+0xf2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a15      	ldr	r2, [pc, #84]	@ (8005a9c <TIM_Base_SetConfig+0x134>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d007      	beq.n	8005a5a <TIM_Base_SetConfig+0xf2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a14      	ldr	r2, [pc, #80]	@ (8005aa0 <TIM_Base_SetConfig+0x138>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d003      	beq.n	8005a5a <TIM_Base_SetConfig+0xf2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a13      	ldr	r2, [pc, #76]	@ (8005aa4 <TIM_Base_SetConfig+0x13c>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d103      	bne.n	8005a62 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	691a      	ldr	r2, [r3, #16]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f043 0204 	orr.w	r2, r3, #4
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	601a      	str	r2, [r3, #0]
}
 8005a7a:	bf00      	nop
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	40010000 	.word	0x40010000
 8005a8c:	40000400 	.word	0x40000400
 8005a90:	40000800 	.word	0x40000800
 8005a94:	40000c00 	.word	0x40000c00
 8005a98:	40010400 	.word	0x40010400
 8005a9c:	40014000 	.word	0x40014000
 8005aa0:	40014400 	.word	0x40014400
 8005aa4:	40014800 	.word	0x40014800

08005aa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f023 0201 	bic.w	r2, r3, #1
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	011b      	lsls	r3, r3, #4
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f023 030a 	bic.w	r3, r3, #10
 8005ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	621a      	str	r2, [r3, #32]
}
 8005afa:	bf00      	nop
 8005afc:	371c      	adds	r7, #28
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b087      	sub	sp, #28
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	60f8      	str	r0, [r7, #12]
 8005b0e:	60b9      	str	r1, [r7, #8]
 8005b10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	f023 0210 	bic.w	r2, r3, #16
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	031b      	lsls	r3, r3, #12
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	621a      	str	r2, [r3, #32]
}
 8005b5a:	bf00      	nop
 8005b5c:	371c      	adds	r7, #28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
	...

08005b68 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	4b09      	ldr	r3, [pc, #36]	@ (8005ba0 <TIM_ITRx_SetConfig+0x38>)
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	f043 0307 	orr.w	r3, r3, #7
 8005b8a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	609a      	str	r2, [r3, #8]
}
 8005b92:	bf00      	nop
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	ffcfff8f 	.word	0xffcfff8f

08005ba4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	021a      	lsls	r2, r3, #8
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	609a      	str	r2, [r3, #8]
}
 8005bd8:	bf00      	nop
 8005bda:	371c      	adds	r7, #28
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e06d      	b.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a30      	ldr	r2, [pc, #192]	@ (8005ce4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d004      	beq.n	8005c30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a2f      	ldr	r2, [pc, #188]	@ (8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d108      	bne.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005c36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a20      	ldr	r2, [pc, #128]	@ (8005ce4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d022      	beq.n	8005cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c6e:	d01d      	beq.n	8005cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a1d      	ldr	r2, [pc, #116]	@ (8005cec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d018      	beq.n	8005cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a1c      	ldr	r2, [pc, #112]	@ (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d013      	beq.n	8005cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a1a      	ldr	r2, [pc, #104]	@ (8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d00e      	beq.n	8005cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a15      	ldr	r2, [pc, #84]	@ (8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d009      	beq.n	8005cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a16      	ldr	r2, [pc, #88]	@ (8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d004      	beq.n	8005cac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a15      	ldr	r2, [pc, #84]	@ (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d10c      	bne.n	8005cc6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	40010000 	.word	0x40010000
 8005ce8:	40010400 	.word	0x40010400
 8005cec:	40000400 	.word	0x40000400
 8005cf0:	40000800 	.word	0x40000800
 8005cf4:	40000c00 	.word	0x40000c00
 8005cf8:	40001800 	.word	0x40001800
 8005cfc:	40014000 	.word	0x40014000

08005d00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e042      	b.n	8005d98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d106      	bne.n	8005d2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f83b 	bl	8005da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2224      	movs	r2, #36	@ 0x24
 8005d2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0201 	bic.w	r2, r2, #1
 8005d40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fd9a 	bl	8006884 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f82f 	bl	8005db4 <UART_SetConfig>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e01b      	b.n	8005d98 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689a      	ldr	r2, [r3, #8]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0201 	orr.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fe19 	bl	80069c8 <UART_CheckIdleState>
 8005d96:	4603      	mov	r3, r0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005db8:	b092      	sub	sp, #72	@ 0x48
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	689a      	ldr	r2, [r3, #8]
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	4bbe      	ldr	r3, [pc, #760]	@ (80060dc <UART_SetConfig+0x328>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	6812      	ldr	r2, [r2, #0]
 8005dea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005dec:	430b      	orrs	r3, r1
 8005dee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4ab3      	ldr	r2, [pc, #716]	@ (80060e0 <UART_SetConfig+0x32c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d004      	beq.n	8005e20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689a      	ldr	r2, [r3, #8]
 8005e26:	4baf      	ldr	r3, [pc, #700]	@ (80060e4 <UART_SetConfig+0x330>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	6812      	ldr	r2, [r2, #0]
 8005e2e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005e30:	430b      	orrs	r3, r1
 8005e32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e3a:	f023 010f 	bic.w	r1, r3, #15
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4aa6      	ldr	r2, [pc, #664]	@ (80060e8 <UART_SetConfig+0x334>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d177      	bne.n	8005f44 <UART_SetConfig+0x190>
 8005e54:	4ba5      	ldr	r3, [pc, #660]	@ (80060ec <UART_SetConfig+0x338>)
 8005e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e5c:	2b28      	cmp	r3, #40	@ 0x28
 8005e5e:	d86d      	bhi.n	8005f3c <UART_SetConfig+0x188>
 8005e60:	a201      	add	r2, pc, #4	@ (adr r2, 8005e68 <UART_SetConfig+0xb4>)
 8005e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e66:	bf00      	nop
 8005e68:	08005f0d 	.word	0x08005f0d
 8005e6c:	08005f3d 	.word	0x08005f3d
 8005e70:	08005f3d 	.word	0x08005f3d
 8005e74:	08005f3d 	.word	0x08005f3d
 8005e78:	08005f3d 	.word	0x08005f3d
 8005e7c:	08005f3d 	.word	0x08005f3d
 8005e80:	08005f3d 	.word	0x08005f3d
 8005e84:	08005f3d 	.word	0x08005f3d
 8005e88:	08005f15 	.word	0x08005f15
 8005e8c:	08005f3d 	.word	0x08005f3d
 8005e90:	08005f3d 	.word	0x08005f3d
 8005e94:	08005f3d 	.word	0x08005f3d
 8005e98:	08005f3d 	.word	0x08005f3d
 8005e9c:	08005f3d 	.word	0x08005f3d
 8005ea0:	08005f3d 	.word	0x08005f3d
 8005ea4:	08005f3d 	.word	0x08005f3d
 8005ea8:	08005f1d 	.word	0x08005f1d
 8005eac:	08005f3d 	.word	0x08005f3d
 8005eb0:	08005f3d 	.word	0x08005f3d
 8005eb4:	08005f3d 	.word	0x08005f3d
 8005eb8:	08005f3d 	.word	0x08005f3d
 8005ebc:	08005f3d 	.word	0x08005f3d
 8005ec0:	08005f3d 	.word	0x08005f3d
 8005ec4:	08005f3d 	.word	0x08005f3d
 8005ec8:	08005f25 	.word	0x08005f25
 8005ecc:	08005f3d 	.word	0x08005f3d
 8005ed0:	08005f3d 	.word	0x08005f3d
 8005ed4:	08005f3d 	.word	0x08005f3d
 8005ed8:	08005f3d 	.word	0x08005f3d
 8005edc:	08005f3d 	.word	0x08005f3d
 8005ee0:	08005f3d 	.word	0x08005f3d
 8005ee4:	08005f3d 	.word	0x08005f3d
 8005ee8:	08005f2d 	.word	0x08005f2d
 8005eec:	08005f3d 	.word	0x08005f3d
 8005ef0:	08005f3d 	.word	0x08005f3d
 8005ef4:	08005f3d 	.word	0x08005f3d
 8005ef8:	08005f3d 	.word	0x08005f3d
 8005efc:	08005f3d 	.word	0x08005f3d
 8005f00:	08005f3d 	.word	0x08005f3d
 8005f04:	08005f3d 	.word	0x08005f3d
 8005f08:	08005f35 	.word	0x08005f35
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f12:	e222      	b.n	800635a <UART_SetConfig+0x5a6>
 8005f14:	2304      	movs	r3, #4
 8005f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f1a:	e21e      	b.n	800635a <UART_SetConfig+0x5a6>
 8005f1c:	2308      	movs	r3, #8
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f22:	e21a      	b.n	800635a <UART_SetConfig+0x5a6>
 8005f24:	2310      	movs	r3, #16
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f2a:	e216      	b.n	800635a <UART_SetConfig+0x5a6>
 8005f2c:	2320      	movs	r3, #32
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f32:	e212      	b.n	800635a <UART_SetConfig+0x5a6>
 8005f34:	2340      	movs	r3, #64	@ 0x40
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f3a:	e20e      	b.n	800635a <UART_SetConfig+0x5a6>
 8005f3c:	2380      	movs	r3, #128	@ 0x80
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f42:	e20a      	b.n	800635a <UART_SetConfig+0x5a6>
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a69      	ldr	r2, [pc, #420]	@ (80060f0 <UART_SetConfig+0x33c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d130      	bne.n	8005fb0 <UART_SetConfig+0x1fc>
 8005f4e:	4b67      	ldr	r3, [pc, #412]	@ (80060ec <UART_SetConfig+0x338>)
 8005f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f52:	f003 0307 	and.w	r3, r3, #7
 8005f56:	2b05      	cmp	r3, #5
 8005f58:	d826      	bhi.n	8005fa8 <UART_SetConfig+0x1f4>
 8005f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f60 <UART_SetConfig+0x1ac>)
 8005f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f60:	08005f79 	.word	0x08005f79
 8005f64:	08005f81 	.word	0x08005f81
 8005f68:	08005f89 	.word	0x08005f89
 8005f6c:	08005f91 	.word	0x08005f91
 8005f70:	08005f99 	.word	0x08005f99
 8005f74:	08005fa1 	.word	0x08005fa1
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7e:	e1ec      	b.n	800635a <UART_SetConfig+0x5a6>
 8005f80:	2304      	movs	r3, #4
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f86:	e1e8      	b.n	800635a <UART_SetConfig+0x5a6>
 8005f88:	2308      	movs	r3, #8
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8e:	e1e4      	b.n	800635a <UART_SetConfig+0x5a6>
 8005f90:	2310      	movs	r3, #16
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f96:	e1e0      	b.n	800635a <UART_SetConfig+0x5a6>
 8005f98:	2320      	movs	r3, #32
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f9e:	e1dc      	b.n	800635a <UART_SetConfig+0x5a6>
 8005fa0:	2340      	movs	r3, #64	@ 0x40
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fa6:	e1d8      	b.n	800635a <UART_SetConfig+0x5a6>
 8005fa8:	2380      	movs	r3, #128	@ 0x80
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fae:	e1d4      	b.n	800635a <UART_SetConfig+0x5a6>
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a4f      	ldr	r2, [pc, #316]	@ (80060f4 <UART_SetConfig+0x340>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d130      	bne.n	800601c <UART_SetConfig+0x268>
 8005fba:	4b4c      	ldr	r3, [pc, #304]	@ (80060ec <UART_SetConfig+0x338>)
 8005fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	2b05      	cmp	r3, #5
 8005fc4:	d826      	bhi.n	8006014 <UART_SetConfig+0x260>
 8005fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fcc <UART_SetConfig+0x218>)
 8005fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fcc:	08005fe5 	.word	0x08005fe5
 8005fd0:	08005fed 	.word	0x08005fed
 8005fd4:	08005ff5 	.word	0x08005ff5
 8005fd8:	08005ffd 	.word	0x08005ffd
 8005fdc:	08006005 	.word	0x08006005
 8005fe0:	0800600d 	.word	0x0800600d
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fea:	e1b6      	b.n	800635a <UART_SetConfig+0x5a6>
 8005fec:	2304      	movs	r3, #4
 8005fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ff2:	e1b2      	b.n	800635a <UART_SetConfig+0x5a6>
 8005ff4:	2308      	movs	r3, #8
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ffa:	e1ae      	b.n	800635a <UART_SetConfig+0x5a6>
 8005ffc:	2310      	movs	r3, #16
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006002:	e1aa      	b.n	800635a <UART_SetConfig+0x5a6>
 8006004:	2320      	movs	r3, #32
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800600a:	e1a6      	b.n	800635a <UART_SetConfig+0x5a6>
 800600c:	2340      	movs	r3, #64	@ 0x40
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006012:	e1a2      	b.n	800635a <UART_SetConfig+0x5a6>
 8006014:	2380      	movs	r3, #128	@ 0x80
 8006016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800601a:	e19e      	b.n	800635a <UART_SetConfig+0x5a6>
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a35      	ldr	r2, [pc, #212]	@ (80060f8 <UART_SetConfig+0x344>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d130      	bne.n	8006088 <UART_SetConfig+0x2d4>
 8006026:	4b31      	ldr	r3, [pc, #196]	@ (80060ec <UART_SetConfig+0x338>)
 8006028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800602a:	f003 0307 	and.w	r3, r3, #7
 800602e:	2b05      	cmp	r3, #5
 8006030:	d826      	bhi.n	8006080 <UART_SetConfig+0x2cc>
 8006032:	a201      	add	r2, pc, #4	@ (adr r2, 8006038 <UART_SetConfig+0x284>)
 8006034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006038:	08006051 	.word	0x08006051
 800603c:	08006059 	.word	0x08006059
 8006040:	08006061 	.word	0x08006061
 8006044:	08006069 	.word	0x08006069
 8006048:	08006071 	.word	0x08006071
 800604c:	08006079 	.word	0x08006079
 8006050:	2300      	movs	r3, #0
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006056:	e180      	b.n	800635a <UART_SetConfig+0x5a6>
 8006058:	2304      	movs	r3, #4
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605e:	e17c      	b.n	800635a <UART_SetConfig+0x5a6>
 8006060:	2308      	movs	r3, #8
 8006062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006066:	e178      	b.n	800635a <UART_SetConfig+0x5a6>
 8006068:	2310      	movs	r3, #16
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800606e:	e174      	b.n	800635a <UART_SetConfig+0x5a6>
 8006070:	2320      	movs	r3, #32
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006076:	e170      	b.n	800635a <UART_SetConfig+0x5a6>
 8006078:	2340      	movs	r3, #64	@ 0x40
 800607a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800607e:	e16c      	b.n	800635a <UART_SetConfig+0x5a6>
 8006080:	2380      	movs	r3, #128	@ 0x80
 8006082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006086:	e168      	b.n	800635a <UART_SetConfig+0x5a6>
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a1b      	ldr	r2, [pc, #108]	@ (80060fc <UART_SetConfig+0x348>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d142      	bne.n	8006118 <UART_SetConfig+0x364>
 8006092:	4b16      	ldr	r3, [pc, #88]	@ (80060ec <UART_SetConfig+0x338>)
 8006094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006096:	f003 0307 	and.w	r3, r3, #7
 800609a:	2b05      	cmp	r3, #5
 800609c:	d838      	bhi.n	8006110 <UART_SetConfig+0x35c>
 800609e:	a201      	add	r2, pc, #4	@ (adr r2, 80060a4 <UART_SetConfig+0x2f0>)
 80060a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a4:	080060bd 	.word	0x080060bd
 80060a8:	080060c5 	.word	0x080060c5
 80060ac:	080060cd 	.word	0x080060cd
 80060b0:	080060d5 	.word	0x080060d5
 80060b4:	08006101 	.word	0x08006101
 80060b8:	08006109 	.word	0x08006109
 80060bc:	2300      	movs	r3, #0
 80060be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060c2:	e14a      	b.n	800635a <UART_SetConfig+0x5a6>
 80060c4:	2304      	movs	r3, #4
 80060c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ca:	e146      	b.n	800635a <UART_SetConfig+0x5a6>
 80060cc:	2308      	movs	r3, #8
 80060ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060d2:	e142      	b.n	800635a <UART_SetConfig+0x5a6>
 80060d4:	2310      	movs	r3, #16
 80060d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060da:	e13e      	b.n	800635a <UART_SetConfig+0x5a6>
 80060dc:	cfff69f3 	.word	0xcfff69f3
 80060e0:	58000c00 	.word	0x58000c00
 80060e4:	11fff4ff 	.word	0x11fff4ff
 80060e8:	40011000 	.word	0x40011000
 80060ec:	58024400 	.word	0x58024400
 80060f0:	40004400 	.word	0x40004400
 80060f4:	40004800 	.word	0x40004800
 80060f8:	40004c00 	.word	0x40004c00
 80060fc:	40005000 	.word	0x40005000
 8006100:	2320      	movs	r3, #32
 8006102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006106:	e128      	b.n	800635a <UART_SetConfig+0x5a6>
 8006108:	2340      	movs	r3, #64	@ 0x40
 800610a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800610e:	e124      	b.n	800635a <UART_SetConfig+0x5a6>
 8006110:	2380      	movs	r3, #128	@ 0x80
 8006112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006116:	e120      	b.n	800635a <UART_SetConfig+0x5a6>
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4acb      	ldr	r2, [pc, #812]	@ (800644c <UART_SetConfig+0x698>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d176      	bne.n	8006210 <UART_SetConfig+0x45c>
 8006122:	4bcb      	ldr	r3, [pc, #812]	@ (8006450 <UART_SetConfig+0x69c>)
 8006124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006126:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800612a:	2b28      	cmp	r3, #40	@ 0x28
 800612c:	d86c      	bhi.n	8006208 <UART_SetConfig+0x454>
 800612e:	a201      	add	r2, pc, #4	@ (adr r2, 8006134 <UART_SetConfig+0x380>)
 8006130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006134:	080061d9 	.word	0x080061d9
 8006138:	08006209 	.word	0x08006209
 800613c:	08006209 	.word	0x08006209
 8006140:	08006209 	.word	0x08006209
 8006144:	08006209 	.word	0x08006209
 8006148:	08006209 	.word	0x08006209
 800614c:	08006209 	.word	0x08006209
 8006150:	08006209 	.word	0x08006209
 8006154:	080061e1 	.word	0x080061e1
 8006158:	08006209 	.word	0x08006209
 800615c:	08006209 	.word	0x08006209
 8006160:	08006209 	.word	0x08006209
 8006164:	08006209 	.word	0x08006209
 8006168:	08006209 	.word	0x08006209
 800616c:	08006209 	.word	0x08006209
 8006170:	08006209 	.word	0x08006209
 8006174:	080061e9 	.word	0x080061e9
 8006178:	08006209 	.word	0x08006209
 800617c:	08006209 	.word	0x08006209
 8006180:	08006209 	.word	0x08006209
 8006184:	08006209 	.word	0x08006209
 8006188:	08006209 	.word	0x08006209
 800618c:	08006209 	.word	0x08006209
 8006190:	08006209 	.word	0x08006209
 8006194:	080061f1 	.word	0x080061f1
 8006198:	08006209 	.word	0x08006209
 800619c:	08006209 	.word	0x08006209
 80061a0:	08006209 	.word	0x08006209
 80061a4:	08006209 	.word	0x08006209
 80061a8:	08006209 	.word	0x08006209
 80061ac:	08006209 	.word	0x08006209
 80061b0:	08006209 	.word	0x08006209
 80061b4:	080061f9 	.word	0x080061f9
 80061b8:	08006209 	.word	0x08006209
 80061bc:	08006209 	.word	0x08006209
 80061c0:	08006209 	.word	0x08006209
 80061c4:	08006209 	.word	0x08006209
 80061c8:	08006209 	.word	0x08006209
 80061cc:	08006209 	.word	0x08006209
 80061d0:	08006209 	.word	0x08006209
 80061d4:	08006201 	.word	0x08006201
 80061d8:	2301      	movs	r3, #1
 80061da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061de:	e0bc      	b.n	800635a <UART_SetConfig+0x5a6>
 80061e0:	2304      	movs	r3, #4
 80061e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061e6:	e0b8      	b.n	800635a <UART_SetConfig+0x5a6>
 80061e8:	2308      	movs	r3, #8
 80061ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ee:	e0b4      	b.n	800635a <UART_SetConfig+0x5a6>
 80061f0:	2310      	movs	r3, #16
 80061f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061f6:	e0b0      	b.n	800635a <UART_SetConfig+0x5a6>
 80061f8:	2320      	movs	r3, #32
 80061fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061fe:	e0ac      	b.n	800635a <UART_SetConfig+0x5a6>
 8006200:	2340      	movs	r3, #64	@ 0x40
 8006202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006206:	e0a8      	b.n	800635a <UART_SetConfig+0x5a6>
 8006208:	2380      	movs	r3, #128	@ 0x80
 800620a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800620e:	e0a4      	b.n	800635a <UART_SetConfig+0x5a6>
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a8f      	ldr	r2, [pc, #572]	@ (8006454 <UART_SetConfig+0x6a0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d130      	bne.n	800627c <UART_SetConfig+0x4c8>
 800621a:	4b8d      	ldr	r3, [pc, #564]	@ (8006450 <UART_SetConfig+0x69c>)
 800621c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800621e:	f003 0307 	and.w	r3, r3, #7
 8006222:	2b05      	cmp	r3, #5
 8006224:	d826      	bhi.n	8006274 <UART_SetConfig+0x4c0>
 8006226:	a201      	add	r2, pc, #4	@ (adr r2, 800622c <UART_SetConfig+0x478>)
 8006228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622c:	08006245 	.word	0x08006245
 8006230:	0800624d 	.word	0x0800624d
 8006234:	08006255 	.word	0x08006255
 8006238:	0800625d 	.word	0x0800625d
 800623c:	08006265 	.word	0x08006265
 8006240:	0800626d 	.word	0x0800626d
 8006244:	2300      	movs	r3, #0
 8006246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800624a:	e086      	b.n	800635a <UART_SetConfig+0x5a6>
 800624c:	2304      	movs	r3, #4
 800624e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006252:	e082      	b.n	800635a <UART_SetConfig+0x5a6>
 8006254:	2308      	movs	r3, #8
 8006256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800625a:	e07e      	b.n	800635a <UART_SetConfig+0x5a6>
 800625c:	2310      	movs	r3, #16
 800625e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006262:	e07a      	b.n	800635a <UART_SetConfig+0x5a6>
 8006264:	2320      	movs	r3, #32
 8006266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800626a:	e076      	b.n	800635a <UART_SetConfig+0x5a6>
 800626c:	2340      	movs	r3, #64	@ 0x40
 800626e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006272:	e072      	b.n	800635a <UART_SetConfig+0x5a6>
 8006274:	2380      	movs	r3, #128	@ 0x80
 8006276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800627a:	e06e      	b.n	800635a <UART_SetConfig+0x5a6>
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a75      	ldr	r2, [pc, #468]	@ (8006458 <UART_SetConfig+0x6a4>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d130      	bne.n	80062e8 <UART_SetConfig+0x534>
 8006286:	4b72      	ldr	r3, [pc, #456]	@ (8006450 <UART_SetConfig+0x69c>)
 8006288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800628a:	f003 0307 	and.w	r3, r3, #7
 800628e:	2b05      	cmp	r3, #5
 8006290:	d826      	bhi.n	80062e0 <UART_SetConfig+0x52c>
 8006292:	a201      	add	r2, pc, #4	@ (adr r2, 8006298 <UART_SetConfig+0x4e4>)
 8006294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006298:	080062b1 	.word	0x080062b1
 800629c:	080062b9 	.word	0x080062b9
 80062a0:	080062c1 	.word	0x080062c1
 80062a4:	080062c9 	.word	0x080062c9
 80062a8:	080062d1 	.word	0x080062d1
 80062ac:	080062d9 	.word	0x080062d9
 80062b0:	2300      	movs	r3, #0
 80062b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062b6:	e050      	b.n	800635a <UART_SetConfig+0x5a6>
 80062b8:	2304      	movs	r3, #4
 80062ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062be:	e04c      	b.n	800635a <UART_SetConfig+0x5a6>
 80062c0:	2308      	movs	r3, #8
 80062c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062c6:	e048      	b.n	800635a <UART_SetConfig+0x5a6>
 80062c8:	2310      	movs	r3, #16
 80062ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ce:	e044      	b.n	800635a <UART_SetConfig+0x5a6>
 80062d0:	2320      	movs	r3, #32
 80062d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062d6:	e040      	b.n	800635a <UART_SetConfig+0x5a6>
 80062d8:	2340      	movs	r3, #64	@ 0x40
 80062da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062de:	e03c      	b.n	800635a <UART_SetConfig+0x5a6>
 80062e0:	2380      	movs	r3, #128	@ 0x80
 80062e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062e6:	e038      	b.n	800635a <UART_SetConfig+0x5a6>
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a5b      	ldr	r2, [pc, #364]	@ (800645c <UART_SetConfig+0x6a8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d130      	bne.n	8006354 <UART_SetConfig+0x5a0>
 80062f2:	4b57      	ldr	r3, [pc, #348]	@ (8006450 <UART_SetConfig+0x69c>)
 80062f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062f6:	f003 0307 	and.w	r3, r3, #7
 80062fa:	2b05      	cmp	r3, #5
 80062fc:	d826      	bhi.n	800634c <UART_SetConfig+0x598>
 80062fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006304 <UART_SetConfig+0x550>)
 8006300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006304:	0800631d 	.word	0x0800631d
 8006308:	08006325 	.word	0x08006325
 800630c:	0800632d 	.word	0x0800632d
 8006310:	08006335 	.word	0x08006335
 8006314:	0800633d 	.word	0x0800633d
 8006318:	08006345 	.word	0x08006345
 800631c:	2302      	movs	r3, #2
 800631e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006322:	e01a      	b.n	800635a <UART_SetConfig+0x5a6>
 8006324:	2304      	movs	r3, #4
 8006326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800632a:	e016      	b.n	800635a <UART_SetConfig+0x5a6>
 800632c:	2308      	movs	r3, #8
 800632e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006332:	e012      	b.n	800635a <UART_SetConfig+0x5a6>
 8006334:	2310      	movs	r3, #16
 8006336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800633a:	e00e      	b.n	800635a <UART_SetConfig+0x5a6>
 800633c:	2320      	movs	r3, #32
 800633e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006342:	e00a      	b.n	800635a <UART_SetConfig+0x5a6>
 8006344:	2340      	movs	r3, #64	@ 0x40
 8006346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800634a:	e006      	b.n	800635a <UART_SetConfig+0x5a6>
 800634c:	2380      	movs	r3, #128	@ 0x80
 800634e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006352:	e002      	b.n	800635a <UART_SetConfig+0x5a6>
 8006354:	2380      	movs	r3, #128	@ 0x80
 8006356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a3f      	ldr	r2, [pc, #252]	@ (800645c <UART_SetConfig+0x6a8>)
 8006360:	4293      	cmp	r3, r2
 8006362:	f040 80f8 	bne.w	8006556 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006366:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800636a:	2b20      	cmp	r3, #32
 800636c:	dc46      	bgt.n	80063fc <UART_SetConfig+0x648>
 800636e:	2b02      	cmp	r3, #2
 8006370:	f2c0 8082 	blt.w	8006478 <UART_SetConfig+0x6c4>
 8006374:	3b02      	subs	r3, #2
 8006376:	2b1e      	cmp	r3, #30
 8006378:	d87e      	bhi.n	8006478 <UART_SetConfig+0x6c4>
 800637a:	a201      	add	r2, pc, #4	@ (adr r2, 8006380 <UART_SetConfig+0x5cc>)
 800637c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006380:	08006403 	.word	0x08006403
 8006384:	08006479 	.word	0x08006479
 8006388:	0800640b 	.word	0x0800640b
 800638c:	08006479 	.word	0x08006479
 8006390:	08006479 	.word	0x08006479
 8006394:	08006479 	.word	0x08006479
 8006398:	0800641b 	.word	0x0800641b
 800639c:	08006479 	.word	0x08006479
 80063a0:	08006479 	.word	0x08006479
 80063a4:	08006479 	.word	0x08006479
 80063a8:	08006479 	.word	0x08006479
 80063ac:	08006479 	.word	0x08006479
 80063b0:	08006479 	.word	0x08006479
 80063b4:	08006479 	.word	0x08006479
 80063b8:	0800642b 	.word	0x0800642b
 80063bc:	08006479 	.word	0x08006479
 80063c0:	08006479 	.word	0x08006479
 80063c4:	08006479 	.word	0x08006479
 80063c8:	08006479 	.word	0x08006479
 80063cc:	08006479 	.word	0x08006479
 80063d0:	08006479 	.word	0x08006479
 80063d4:	08006479 	.word	0x08006479
 80063d8:	08006479 	.word	0x08006479
 80063dc:	08006479 	.word	0x08006479
 80063e0:	08006479 	.word	0x08006479
 80063e4:	08006479 	.word	0x08006479
 80063e8:	08006479 	.word	0x08006479
 80063ec:	08006479 	.word	0x08006479
 80063f0:	08006479 	.word	0x08006479
 80063f4:	08006479 	.word	0x08006479
 80063f8:	0800646b 	.word	0x0800646b
 80063fc:	2b40      	cmp	r3, #64	@ 0x40
 80063fe:	d037      	beq.n	8006470 <UART_SetConfig+0x6bc>
 8006400:	e03a      	b.n	8006478 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006402:	f7fe fe33 	bl	800506c <HAL_RCCEx_GetD3PCLK1Freq>
 8006406:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006408:	e03c      	b.n	8006484 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800640a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe fe42 	bl	8005098 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006418:	e034      	b.n	8006484 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800641a:	f107 0318 	add.w	r3, r7, #24
 800641e:	4618      	mov	r0, r3
 8006420:	f7fe ff8e 	bl	8005340 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006428:	e02c      	b.n	8006484 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800642a:	4b09      	ldr	r3, [pc, #36]	@ (8006450 <UART_SetConfig+0x69c>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0320 	and.w	r3, r3, #32
 8006432:	2b00      	cmp	r3, #0
 8006434:	d016      	beq.n	8006464 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006436:	4b06      	ldr	r3, [pc, #24]	@ (8006450 <UART_SetConfig+0x69c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	08db      	lsrs	r3, r3, #3
 800643c:	f003 0303 	and.w	r3, r3, #3
 8006440:	4a07      	ldr	r2, [pc, #28]	@ (8006460 <UART_SetConfig+0x6ac>)
 8006442:	fa22 f303 	lsr.w	r3, r2, r3
 8006446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006448:	e01c      	b.n	8006484 <UART_SetConfig+0x6d0>
 800644a:	bf00      	nop
 800644c:	40011400 	.word	0x40011400
 8006450:	58024400 	.word	0x58024400
 8006454:	40007800 	.word	0x40007800
 8006458:	40007c00 	.word	0x40007c00
 800645c:	58000c00 	.word	0x58000c00
 8006460:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006464:	4b9d      	ldr	r3, [pc, #628]	@ (80066dc <UART_SetConfig+0x928>)
 8006466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006468:	e00c      	b.n	8006484 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800646a:	4b9d      	ldr	r3, [pc, #628]	@ (80066e0 <UART_SetConfig+0x92c>)
 800646c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800646e:	e009      	b.n	8006484 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006470:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006476:	e005      	b.n	8006484 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006482:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 81de 	beq.w	8006848 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006490:	4a94      	ldr	r2, [pc, #592]	@ (80066e4 <UART_SetConfig+0x930>)
 8006492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006496:	461a      	mov	r2, r3
 8006498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800649a:	fbb3 f3f2 	udiv	r3, r3, r2
 800649e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	4613      	mov	r3, r2
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	4413      	add	r3, r2
 80064aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d305      	bcc.n	80064bc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d903      	bls.n	80064c4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80064c2:	e1c1      	b.n	8006848 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064c6:	2200      	movs	r2, #0
 80064c8:	60bb      	str	r3, [r7, #8]
 80064ca:	60fa      	str	r2, [r7, #12]
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d0:	4a84      	ldr	r2, [pc, #528]	@ (80066e4 <UART_SetConfig+0x930>)
 80064d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	2200      	movs	r2, #0
 80064da:	603b      	str	r3, [r7, #0]
 80064dc:	607a      	str	r2, [r7, #4]
 80064de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064e6:	f7f9 fef7 	bl	80002d8 <__aeabi_uldivmod>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4610      	mov	r0, r2
 80064f0:	4619      	mov	r1, r3
 80064f2:	f04f 0200 	mov.w	r2, #0
 80064f6:	f04f 0300 	mov.w	r3, #0
 80064fa:	020b      	lsls	r3, r1, #8
 80064fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006500:	0202      	lsls	r2, r0, #8
 8006502:	6979      	ldr	r1, [r7, #20]
 8006504:	6849      	ldr	r1, [r1, #4]
 8006506:	0849      	lsrs	r1, r1, #1
 8006508:	2000      	movs	r0, #0
 800650a:	460c      	mov	r4, r1
 800650c:	4605      	mov	r5, r0
 800650e:	eb12 0804 	adds.w	r8, r2, r4
 8006512:	eb43 0905 	adc.w	r9, r3, r5
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	469a      	mov	sl, r3
 800651e:	4693      	mov	fp, r2
 8006520:	4652      	mov	r2, sl
 8006522:	465b      	mov	r3, fp
 8006524:	4640      	mov	r0, r8
 8006526:	4649      	mov	r1, r9
 8006528:	f7f9 fed6 	bl	80002d8 <__aeabi_uldivmod>
 800652c:	4602      	mov	r2, r0
 800652e:	460b      	mov	r3, r1
 8006530:	4613      	mov	r3, r2
 8006532:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006536:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800653a:	d308      	bcc.n	800654e <UART_SetConfig+0x79a>
 800653c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006542:	d204      	bcs.n	800654e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800654a:	60da      	str	r2, [r3, #12]
 800654c:	e17c      	b.n	8006848 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006554:	e178      	b.n	8006848 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800655e:	f040 80c5 	bne.w	80066ec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006562:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006566:	2b20      	cmp	r3, #32
 8006568:	dc48      	bgt.n	80065fc <UART_SetConfig+0x848>
 800656a:	2b00      	cmp	r3, #0
 800656c:	db7b      	blt.n	8006666 <UART_SetConfig+0x8b2>
 800656e:	2b20      	cmp	r3, #32
 8006570:	d879      	bhi.n	8006666 <UART_SetConfig+0x8b2>
 8006572:	a201      	add	r2, pc, #4	@ (adr r2, 8006578 <UART_SetConfig+0x7c4>)
 8006574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006578:	08006603 	.word	0x08006603
 800657c:	0800660b 	.word	0x0800660b
 8006580:	08006667 	.word	0x08006667
 8006584:	08006667 	.word	0x08006667
 8006588:	08006613 	.word	0x08006613
 800658c:	08006667 	.word	0x08006667
 8006590:	08006667 	.word	0x08006667
 8006594:	08006667 	.word	0x08006667
 8006598:	08006623 	.word	0x08006623
 800659c:	08006667 	.word	0x08006667
 80065a0:	08006667 	.word	0x08006667
 80065a4:	08006667 	.word	0x08006667
 80065a8:	08006667 	.word	0x08006667
 80065ac:	08006667 	.word	0x08006667
 80065b0:	08006667 	.word	0x08006667
 80065b4:	08006667 	.word	0x08006667
 80065b8:	08006633 	.word	0x08006633
 80065bc:	08006667 	.word	0x08006667
 80065c0:	08006667 	.word	0x08006667
 80065c4:	08006667 	.word	0x08006667
 80065c8:	08006667 	.word	0x08006667
 80065cc:	08006667 	.word	0x08006667
 80065d0:	08006667 	.word	0x08006667
 80065d4:	08006667 	.word	0x08006667
 80065d8:	08006667 	.word	0x08006667
 80065dc:	08006667 	.word	0x08006667
 80065e0:	08006667 	.word	0x08006667
 80065e4:	08006667 	.word	0x08006667
 80065e8:	08006667 	.word	0x08006667
 80065ec:	08006667 	.word	0x08006667
 80065f0:	08006667 	.word	0x08006667
 80065f4:	08006667 	.word	0x08006667
 80065f8:	08006659 	.word	0x08006659
 80065fc:	2b40      	cmp	r3, #64	@ 0x40
 80065fe:	d02e      	beq.n	800665e <UART_SetConfig+0x8aa>
 8006600:	e031      	b.n	8006666 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006602:	f7fe fd07 	bl	8005014 <HAL_RCC_GetPCLK1Freq>
 8006606:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006608:	e033      	b.n	8006672 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800660a:	f7fe fd19 	bl	8005040 <HAL_RCC_GetPCLK2Freq>
 800660e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006610:	e02f      	b.n	8006672 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006612:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006616:	4618      	mov	r0, r3
 8006618:	f7fe fd3e 	bl	8005098 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800661c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006620:	e027      	b.n	8006672 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006622:	f107 0318 	add.w	r3, r7, #24
 8006626:	4618      	mov	r0, r3
 8006628:	f7fe fe8a 	bl	8005340 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006630:	e01f      	b.n	8006672 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006632:	4b2d      	ldr	r3, [pc, #180]	@ (80066e8 <UART_SetConfig+0x934>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0320 	and.w	r3, r3, #32
 800663a:	2b00      	cmp	r3, #0
 800663c:	d009      	beq.n	8006652 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800663e:	4b2a      	ldr	r3, [pc, #168]	@ (80066e8 <UART_SetConfig+0x934>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	08db      	lsrs	r3, r3, #3
 8006644:	f003 0303 	and.w	r3, r3, #3
 8006648:	4a24      	ldr	r2, [pc, #144]	@ (80066dc <UART_SetConfig+0x928>)
 800664a:	fa22 f303 	lsr.w	r3, r2, r3
 800664e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006650:	e00f      	b.n	8006672 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006652:	4b22      	ldr	r3, [pc, #136]	@ (80066dc <UART_SetConfig+0x928>)
 8006654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006656:	e00c      	b.n	8006672 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006658:	4b21      	ldr	r3, [pc, #132]	@ (80066e0 <UART_SetConfig+0x92c>)
 800665a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800665c:	e009      	b.n	8006672 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800665e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006664:	e005      	b.n	8006672 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006670:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 80e7 	beq.w	8006848 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667e:	4a19      	ldr	r2, [pc, #100]	@ (80066e4 <UART_SetConfig+0x930>)
 8006680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006684:	461a      	mov	r2, r3
 8006686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006688:	fbb3 f3f2 	udiv	r3, r3, r2
 800668c:	005a      	lsls	r2, r3, #1
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	085b      	lsrs	r3, r3, #1
 8006694:	441a      	add	r2, r3
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	fbb2 f3f3 	udiv	r3, r2, r3
 800669e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a2:	2b0f      	cmp	r3, #15
 80066a4:	d916      	bls.n	80066d4 <UART_SetConfig+0x920>
 80066a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066ac:	d212      	bcs.n	80066d4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	f023 030f 	bic.w	r3, r3, #15
 80066b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ba:	085b      	lsrs	r3, r3, #1
 80066bc:	b29b      	uxth	r3, r3
 80066be:	f003 0307 	and.w	r3, r3, #7
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80066c6:	4313      	orrs	r3, r2
 80066c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80066d0:	60da      	str	r2, [r3, #12]
 80066d2:	e0b9      	b.n	8006848 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80066da:	e0b5      	b.n	8006848 <UART_SetConfig+0xa94>
 80066dc:	03d09000 	.word	0x03d09000
 80066e0:	003d0900 	.word	0x003d0900
 80066e4:	08006d58 	.word	0x08006d58
 80066e8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80066ec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80066f0:	2b20      	cmp	r3, #32
 80066f2:	dc49      	bgt.n	8006788 <UART_SetConfig+0x9d4>
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	db7c      	blt.n	80067f2 <UART_SetConfig+0xa3e>
 80066f8:	2b20      	cmp	r3, #32
 80066fa:	d87a      	bhi.n	80067f2 <UART_SetConfig+0xa3e>
 80066fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006704 <UART_SetConfig+0x950>)
 80066fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006702:	bf00      	nop
 8006704:	0800678f 	.word	0x0800678f
 8006708:	08006797 	.word	0x08006797
 800670c:	080067f3 	.word	0x080067f3
 8006710:	080067f3 	.word	0x080067f3
 8006714:	0800679f 	.word	0x0800679f
 8006718:	080067f3 	.word	0x080067f3
 800671c:	080067f3 	.word	0x080067f3
 8006720:	080067f3 	.word	0x080067f3
 8006724:	080067af 	.word	0x080067af
 8006728:	080067f3 	.word	0x080067f3
 800672c:	080067f3 	.word	0x080067f3
 8006730:	080067f3 	.word	0x080067f3
 8006734:	080067f3 	.word	0x080067f3
 8006738:	080067f3 	.word	0x080067f3
 800673c:	080067f3 	.word	0x080067f3
 8006740:	080067f3 	.word	0x080067f3
 8006744:	080067bf 	.word	0x080067bf
 8006748:	080067f3 	.word	0x080067f3
 800674c:	080067f3 	.word	0x080067f3
 8006750:	080067f3 	.word	0x080067f3
 8006754:	080067f3 	.word	0x080067f3
 8006758:	080067f3 	.word	0x080067f3
 800675c:	080067f3 	.word	0x080067f3
 8006760:	080067f3 	.word	0x080067f3
 8006764:	080067f3 	.word	0x080067f3
 8006768:	080067f3 	.word	0x080067f3
 800676c:	080067f3 	.word	0x080067f3
 8006770:	080067f3 	.word	0x080067f3
 8006774:	080067f3 	.word	0x080067f3
 8006778:	080067f3 	.word	0x080067f3
 800677c:	080067f3 	.word	0x080067f3
 8006780:	080067f3 	.word	0x080067f3
 8006784:	080067e5 	.word	0x080067e5
 8006788:	2b40      	cmp	r3, #64	@ 0x40
 800678a:	d02e      	beq.n	80067ea <UART_SetConfig+0xa36>
 800678c:	e031      	b.n	80067f2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800678e:	f7fe fc41 	bl	8005014 <HAL_RCC_GetPCLK1Freq>
 8006792:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006794:	e033      	b.n	80067fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006796:	f7fe fc53 	bl	8005040 <HAL_RCC_GetPCLK2Freq>
 800679a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800679c:	e02f      	b.n	80067fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800679e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7fe fc78 	bl	8005098 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80067a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067ac:	e027      	b.n	80067fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067ae:	f107 0318 	add.w	r3, r7, #24
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fe fdc4 	bl	8005340 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067bc:	e01f      	b.n	80067fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067be:	4b2d      	ldr	r3, [pc, #180]	@ (8006874 <UART_SetConfig+0xac0>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0320 	and.w	r3, r3, #32
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d009      	beq.n	80067de <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067ca:	4b2a      	ldr	r3, [pc, #168]	@ (8006874 <UART_SetConfig+0xac0>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	08db      	lsrs	r3, r3, #3
 80067d0:	f003 0303 	and.w	r3, r3, #3
 80067d4:	4a28      	ldr	r2, [pc, #160]	@ (8006878 <UART_SetConfig+0xac4>)
 80067d6:	fa22 f303 	lsr.w	r3, r2, r3
 80067da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067dc:	e00f      	b.n	80067fe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80067de:	4b26      	ldr	r3, [pc, #152]	@ (8006878 <UART_SetConfig+0xac4>)
 80067e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067e2:	e00c      	b.n	80067fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067e4:	4b25      	ldr	r3, [pc, #148]	@ (800687c <UART_SetConfig+0xac8>)
 80067e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067e8:	e009      	b.n	80067fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067f0:	e005      	b.n	80067fe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80067fc:	bf00      	nop
    }

    if (pclk != 0U)
 80067fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006800:	2b00      	cmp	r3, #0
 8006802:	d021      	beq.n	8006848 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006808:	4a1d      	ldr	r2, [pc, #116]	@ (8006880 <UART_SetConfig+0xacc>)
 800680a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800680e:	461a      	mov	r2, r3
 8006810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006812:	fbb3 f2f2 	udiv	r2, r3, r2
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	085b      	lsrs	r3, r3, #1
 800681c:	441a      	add	r2, r3
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	fbb2 f3f3 	udiv	r3, r2, r3
 8006826:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800682a:	2b0f      	cmp	r3, #15
 800682c:	d909      	bls.n	8006842 <UART_SetConfig+0xa8e>
 800682e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006834:	d205      	bcs.n	8006842 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006838:	b29a      	uxth	r2, r3
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	60da      	str	r2, [r3, #12]
 8006840:	e002      	b.n	8006848 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2201      	movs	r2, #1
 800684c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2201      	movs	r2, #1
 8006854:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	2200      	movs	r2, #0
 800685c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2200      	movs	r2, #0
 8006862:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006864:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006868:	4618      	mov	r0, r3
 800686a:	3748      	adds	r7, #72	@ 0x48
 800686c:	46bd      	mov	sp, r7
 800686e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006872:	bf00      	nop
 8006874:	58024400 	.word	0x58024400
 8006878:	03d09000 	.word	0x03d09000
 800687c:	003d0900 	.word	0x003d0900
 8006880:	08006d58 	.word	0x08006d58

08006884 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006890:	f003 0308 	and.w	r3, r3, #8
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00a      	beq.n	80068ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00a      	beq.n	80068d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00a      	beq.n	80068f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f6:	f003 0304 	and.w	r3, r3, #4
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006918:	f003 0310 	and.w	r3, r3, #16
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00a      	beq.n	8006936 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00a      	beq.n	8006958 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	430a      	orrs	r2, r1
 8006956:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800695c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006960:	2b00      	cmp	r3, #0
 8006962:	d01a      	beq.n	800699a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800697e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006982:	d10a      	bne.n	800699a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800699e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00a      	beq.n	80069bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	605a      	str	r2, [r3, #4]
  }
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b098      	sub	sp, #96	@ 0x60
 80069cc:	af02      	add	r7, sp, #8
 80069ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069d8:	f7fa fc2a 	bl	8001230 <HAL_GetTick>
 80069dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0308 	and.w	r3, r3, #8
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d12f      	bne.n	8006a4c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069f4:	2200      	movs	r2, #0
 80069f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f88e 	bl	8006b1c <UART_WaitOnFlagUntilTimeout>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d022      	beq.n	8006a4c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0e:	e853 3f00 	ldrex	r3, [r3]
 8006a12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	461a      	mov	r2, r3
 8006a22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a24:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a26:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a2c:	e841 2300 	strex	r3, r2, [r1]
 8006a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1e6      	bne.n	8006a06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e063      	b.n	8006b14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0304 	and.w	r3, r3, #4
 8006a56:	2b04      	cmp	r3, #4
 8006a58:	d149      	bne.n	8006aee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a5a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a62:	2200      	movs	r2, #0
 8006a64:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f857 	bl	8006b1c <UART_WaitOnFlagUntilTimeout>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d03c      	beq.n	8006aee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7c:	e853 3f00 	ldrex	r3, [r3]
 8006a80:	623b      	str	r3, [r7, #32]
   return(result);
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a92:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a94:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a9a:	e841 2300 	strex	r3, r2, [r1]
 8006a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1e6      	bne.n	8006a74 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3308      	adds	r3, #8
 8006aac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	e853 3f00 	ldrex	r3, [r3]
 8006ab4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f023 0301 	bic.w	r3, r3, #1
 8006abc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3308      	adds	r3, #8
 8006ac4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ac6:	61fa      	str	r2, [r7, #28]
 8006ac8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aca:	69b9      	ldr	r1, [r7, #24]
 8006acc:	69fa      	ldr	r2, [r7, #28]
 8006ace:	e841 2300 	strex	r3, r2, [r1]
 8006ad2:	617b      	str	r3, [r7, #20]
   return(result);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1e5      	bne.n	8006aa6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2220      	movs	r2, #32
 8006ade:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e012      	b.n	8006b14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3758      	adds	r7, #88	@ 0x58
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	603b      	str	r3, [r7, #0]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b2c:	e04f      	b.n	8006bce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b34:	d04b      	beq.n	8006bce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b36:	f7fa fb7b 	bl	8001230 <HAL_GetTick>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d302      	bcc.n	8006b4c <UART_WaitOnFlagUntilTimeout+0x30>
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e04e      	b.n	8006bee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0304 	and.w	r3, r3, #4
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d037      	beq.n	8006bce <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2b80      	cmp	r3, #128	@ 0x80
 8006b62:	d034      	beq.n	8006bce <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2b40      	cmp	r3, #64	@ 0x40
 8006b68:	d031      	beq.n	8006bce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69db      	ldr	r3, [r3, #28]
 8006b70:	f003 0308 	and.w	r3, r3, #8
 8006b74:	2b08      	cmp	r3, #8
 8006b76:	d110      	bne.n	8006b9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2208      	movs	r2, #8
 8006b7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 f839 	bl	8006bf8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2208      	movs	r2, #8
 8006b8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e029      	b.n	8006bee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	69db      	ldr	r3, [r3, #28]
 8006ba0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ba4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ba8:	d111      	bne.n	8006bce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006bb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 f81f 	bl	8006bf8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e00f      	b.n	8006bee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69da      	ldr	r2, [r3, #28]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	bf0c      	ite	eq
 8006bde:	2301      	moveq	r3, #1
 8006be0:	2300      	movne	r3, #0
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	461a      	mov	r2, r3
 8006be6:	79fb      	ldrb	r3, [r7, #7]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d0a0      	beq.n	8006b2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b095      	sub	sp, #84	@ 0x54
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c08:	e853 3f00 	ldrex	r3, [r3]
 8006c0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c20:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c26:	e841 2300 	strex	r3, r2, [r1]
 8006c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1e6      	bne.n	8006c00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	3308      	adds	r3, #8
 8006c38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	e853 3f00 	ldrex	r3, [r3]
 8006c40:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c42:	69fa      	ldr	r2, [r7, #28]
 8006c44:	4b1e      	ldr	r3, [pc, #120]	@ (8006cc0 <UART_EndRxTransfer+0xc8>)
 8006c46:	4013      	ands	r3, r2
 8006c48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3308      	adds	r3, #8
 8006c50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c5a:	e841 2300 	strex	r3, r2, [r1]
 8006c5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1e5      	bne.n	8006c32 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d118      	bne.n	8006ca0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	e853 3f00 	ldrex	r3, [r3]
 8006c7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	f023 0310 	bic.w	r3, r3, #16
 8006c82:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c8c:	61bb      	str	r3, [r7, #24]
 8006c8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c90:	6979      	ldr	r1, [r7, #20]
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	e841 2300 	strex	r3, r2, [r1]
 8006c98:	613b      	str	r3, [r7, #16]
   return(result);
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1e6      	bne.n	8006c6e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006cb4:	bf00      	nop
 8006cb6:	3754      	adds	r7, #84	@ 0x54
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	effffffe 	.word	0xeffffffe

08006cc4 <memset>:
 8006cc4:	4402      	add	r2, r0
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d100      	bne.n	8006cce <memset+0xa>
 8006ccc:	4770      	bx	lr
 8006cce:	f803 1b01 	strb.w	r1, [r3], #1
 8006cd2:	e7f9      	b.n	8006cc8 <memset+0x4>

08006cd4 <__libc_init_array>:
 8006cd4:	b570      	push	{r4, r5, r6, lr}
 8006cd6:	4d0d      	ldr	r5, [pc, #52]	@ (8006d0c <__libc_init_array+0x38>)
 8006cd8:	4c0d      	ldr	r4, [pc, #52]	@ (8006d10 <__libc_init_array+0x3c>)
 8006cda:	1b64      	subs	r4, r4, r5
 8006cdc:	10a4      	asrs	r4, r4, #2
 8006cde:	2600      	movs	r6, #0
 8006ce0:	42a6      	cmp	r6, r4
 8006ce2:	d109      	bne.n	8006cf8 <__libc_init_array+0x24>
 8006ce4:	4d0b      	ldr	r5, [pc, #44]	@ (8006d14 <__libc_init_array+0x40>)
 8006ce6:	4c0c      	ldr	r4, [pc, #48]	@ (8006d18 <__libc_init_array+0x44>)
 8006ce8:	f000 f818 	bl	8006d1c <_init>
 8006cec:	1b64      	subs	r4, r4, r5
 8006cee:	10a4      	asrs	r4, r4, #2
 8006cf0:	2600      	movs	r6, #0
 8006cf2:	42a6      	cmp	r6, r4
 8006cf4:	d105      	bne.n	8006d02 <__libc_init_array+0x2e>
 8006cf6:	bd70      	pop	{r4, r5, r6, pc}
 8006cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cfc:	4798      	blx	r3
 8006cfe:	3601      	adds	r6, #1
 8006d00:	e7ee      	b.n	8006ce0 <__libc_init_array+0xc>
 8006d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d06:	4798      	blx	r3
 8006d08:	3601      	adds	r6, #1
 8006d0a:	e7f2      	b.n	8006cf2 <__libc_init_array+0x1e>
 8006d0c:	08006d78 	.word	0x08006d78
 8006d10:	08006d78 	.word	0x08006d78
 8006d14:	08006d78 	.word	0x08006d78
 8006d18:	08006d7c 	.word	0x08006d7c

08006d1c <_init>:
 8006d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1e:	bf00      	nop
 8006d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d22:	bc08      	pop	{r3}
 8006d24:	469e      	mov	lr, r3
 8006d26:	4770      	bx	lr

08006d28 <_fini>:
 8006d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2a:	bf00      	nop
 8006d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d2e:	bc08      	pop	{r3}
 8006d30:	469e      	mov	lr, r3
 8006d32:	4770      	bx	lr

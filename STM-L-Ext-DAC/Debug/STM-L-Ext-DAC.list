
STM-L-Ext-DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003128  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080032e4  080032e4  000042e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003324  08003324  00005014  2**0
                  CONTENTS
  4 .ARM          00000000  08003324  08003324  00005014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003324  08003324  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003324  08003324  00004324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003328  08003328  00004328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20040000  0800332c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20040014  08003340  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2004008c  08003340  0000508c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b03  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019aa  00000000  00000000  0000eb47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  000104f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000078f  00000000  00000000  00010ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028204  00000000  00000000  00011677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c127  00000000  00000000  0003987b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6008  00000000  00000000  000459a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013b9aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027e4  00000000  00000000  0013b9f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0013e1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20040014 	.word	0x20040014
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080032cc 	.word	0x080032cc

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20040018 	.word	0x20040018
 80001f8:	080032cc 	.word	0x080032cc

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000202:	f000 fc34 	bl	8000a6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f841 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 f8d1 	bl	80003b0 <MX_GPIO_Init>
  MX_I2C2_Init();
 800020e:	f000 f88f 	bl	8000330 <MX_I2C2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  dac_write(arr[idx], 0x4E);
 8000212:	4b1c      	ldr	r3, [pc, #112]	@ (8000284 <main+0x88>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	461a      	mov	r2, r3
 8000218:	4b1b      	ldr	r3, [pc, #108]	@ (8000288 <main+0x8c>)
 800021a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800021e:	214e      	movs	r1, #78	@ 0x4e
 8000220:	4618      	mov	r0, r3
 8000222:	f000 fb0b 	bl	800083c <dac_write>
	  dac_write(arr[(idx+2)%4], 0x4C);
 8000226:	4b17      	ldr	r3, [pc, #92]	@ (8000284 <main+0x88>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	3302      	adds	r3, #2
 800022c:	425a      	negs	r2, r3
 800022e:	f003 0303 	and.w	r3, r3, #3
 8000232:	f002 0203 	and.w	r2, r2, #3
 8000236:	bf58      	it	pl
 8000238:	4253      	negpl	r3, r2
 800023a:	4a13      	ldr	r2, [pc, #76]	@ (8000288 <main+0x8c>)
 800023c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000240:	214c      	movs	r1, #76	@ 0x4c
 8000242:	4618      	mov	r0, r3
 8000244:	f000 fafa 	bl	800083c <dac_write>
	  uint32_t delay_us = 1000000 / (2 * 1000);
 8000248:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800024c:	607b      	str	r3, [r7, #4]
	  HAL_Delay((idx%2)==1 ? delay_us : 250);
 800024e:	4b0d      	ldr	r3, [pc, #52]	@ (8000284 <main+0x88>)
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	f003 0301 	and.w	r3, r3, #1
 8000256:	b2db      	uxtb	r3, r3
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <main+0x64>
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	e000      	b.n	8000262 <main+0x66>
 8000260:	23fa      	movs	r3, #250	@ 0xfa
 8000262:	4618      	mov	r0, r3
 8000264:	f000 fc78 	bl	8000b58 <HAL_Delay>
	  idx = (idx+1) % 4;
 8000268:	4b06      	ldr	r3, [pc, #24]	@ (8000284 <main+0x88>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	3301      	adds	r3, #1
 800026e:	425a      	negs	r2, r3
 8000270:	f003 0303 	and.w	r3, r3, #3
 8000274:	f002 0203 	and.w	r2, r2, #3
 8000278:	bf58      	it	pl
 800027a:	4253      	negpl	r3, r2
 800027c:	b2da      	uxtb	r2, r3
 800027e:	4b01      	ldr	r3, [pc, #4]	@ (8000284 <main+0x88>)
 8000280:	701a      	strb	r2, [r3, #0]
  {
 8000282:	e7c6      	b.n	8000212 <main+0x16>
 8000284:	20040084 	.word	0x20040084
 8000288:	20040000 	.word	0x20040000

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b096      	sub	sp, #88	@ 0x58
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 0314 	add.w	r3, r7, #20
 8000296:	2244      	movs	r2, #68	@ 0x44
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f002 ffea 	bl	8003274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	463b      	mov	r3, r7
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
 80002ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80002ae:	2000      	movs	r0, #0
 80002b0:	f001 fb74 	bl	800199c <HAL_PWREx_ControlVoltageScaling>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x32>
  {
    Error_Handler();
 80002ba:	f000 fae5 	bl	8000888 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002be:	2310      	movs	r3, #16
 80002c0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002c2:	2301      	movs	r3, #1
 80002c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002ca:	2360      	movs	r3, #96	@ 0x60
 80002cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ce:	2302      	movs	r3, #2
 80002d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002d2:	2301      	movs	r3, #1
 80002d4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002d6:	2301      	movs	r3, #1
 80002d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80002da:	233c      	movs	r3, #60	@ 0x3c
 80002dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002de:	2302      	movs	r3, #2
 80002e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002e2:	2302      	movs	r3, #2
 80002e4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002e6:	2302      	movs	r3, #2
 80002e8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	f107 0314 	add.w	r3, r7, #20
 80002ee:	4618      	mov	r0, r3
 80002f0:	f001 fc08 	bl	8001b04 <HAL_RCC_OscConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002fa:	f000 fac5 	bl	8000888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fe:	230f      	movs	r3, #15
 8000300:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000302:	2303      	movs	r3, #3
 8000304:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000312:	463b      	mov	r3, r7
 8000314:	2105      	movs	r1, #5
 8000316:	4618      	mov	r0, r3
 8000318:	f002 f80e 	bl	8002338 <HAL_RCC_ClockConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000322:	f000 fab1 	bl	8000888 <Error_Handler>
  }
}
 8000326:	bf00      	nop
 8000328:	3758      	adds	r7, #88	@ 0x58
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000334:	4b1b      	ldr	r3, [pc, #108]	@ (80003a4 <MX_I2C2_Init+0x74>)
 8000336:	4a1c      	ldr	r2, [pc, #112]	@ (80003a8 <MX_I2C2_Init+0x78>)
 8000338:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A175AB;
 800033a:	4b1a      	ldr	r3, [pc, #104]	@ (80003a4 <MX_I2C2_Init+0x74>)
 800033c:	4a1b      	ldr	r2, [pc, #108]	@ (80003ac <MX_I2C2_Init+0x7c>)
 800033e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000340:	4b18      	ldr	r3, [pc, #96]	@ (80003a4 <MX_I2C2_Init+0x74>)
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000346:	4b17      	ldr	r3, [pc, #92]	@ (80003a4 <MX_I2C2_Init+0x74>)
 8000348:	2201      	movs	r2, #1
 800034a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800034c:	4b15      	ldr	r3, [pc, #84]	@ (80003a4 <MX_I2C2_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000352:	4b14      	ldr	r3, [pc, #80]	@ (80003a4 <MX_I2C2_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000358:	4b12      	ldr	r3, [pc, #72]	@ (80003a4 <MX_I2C2_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800035e:	4b11      	ldr	r3, [pc, #68]	@ (80003a4 <MX_I2C2_Init+0x74>)
 8000360:	2200      	movs	r2, #0
 8000362:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000364:	4b0f      	ldr	r3, [pc, #60]	@ (80003a4 <MX_I2C2_Init+0x74>)
 8000366:	2200      	movs	r2, #0
 8000368:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800036a:	480e      	ldr	r0, [pc, #56]	@ (80003a4 <MX_I2C2_Init+0x74>)
 800036c:	f000 fe90 	bl	8001090 <HAL_I2C_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000376:	f000 fa87 	bl	8000888 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800037a:	2100      	movs	r1, #0
 800037c:	4809      	ldr	r0, [pc, #36]	@ (80003a4 <MX_I2C2_Init+0x74>)
 800037e:	f001 fa55 	bl	800182c <HAL_I2CEx_ConfigAnalogFilter>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000388:	f000 fa7e 	bl	8000888 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800038c:	2100      	movs	r1, #0
 800038e:	4805      	ldr	r0, [pc, #20]	@ (80003a4 <MX_I2C2_Init+0x74>)
 8000390:	f001 fa97 	bl	80018c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800039a:	f000 fa75 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20040030 	.word	0x20040030
 80003a8:	40005800 	.word	0x40005800
 80003ac:	30a175ab 	.word	0x30a175ab

080003b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b08e      	sub	sp, #56	@ 0x38
 80003b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003c6:	4bb2      	ldr	r3, [pc, #712]	@ (8000690 <MX_GPIO_Init+0x2e0>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ca:	4ab1      	ldr	r2, [pc, #708]	@ (8000690 <MX_GPIO_Init+0x2e0>)
 80003cc:	f043 0310 	orr.w	r3, r3, #16
 80003d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003d2:	4baf      	ldr	r3, [pc, #700]	@ (8000690 <MX_GPIO_Init+0x2e0>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003d6:	f003 0310 	and.w	r3, r3, #16
 80003da:	623b      	str	r3, [r7, #32]
 80003dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003de:	4bac      	ldr	r3, [pc, #688]	@ (8000690 <MX_GPIO_Init+0x2e0>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e2:	4aab      	ldr	r2, [pc, #684]	@ (8000690 <MX_GPIO_Init+0x2e0>)
 80003e4:	f043 0304 	orr.w	r3, r3, #4
 80003e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003ea:	4ba9      	ldr	r3, [pc, #676]	@ (8000690 <MX_GPIO_Init+0x2e0>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ee:	f003 0304 	and.w	r3, r3, #4
 80003f2:	61fb      	str	r3, [r7, #28]
 80003f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003f6:	4ba6      	ldr	r3, [pc, #664]	@ (8000690 <MX_GPIO_Init+0x2e0>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003fa:	4aa5      	ldr	r2, [pc, #660]	@ (8000690 <MX_GPIO_Init+0x2e0>)
 80003fc:	f043 0320 	orr.w	r3, r3, #32
 8000400:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000402:	4ba3      	ldr	r3, [pc, #652]	@ (8000690 <MX_GPIO_Init+0x2e0>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000406:	f003 0320 	and.w	r3, r3, #32
 800040a:	61bb      	str	r3, [r7, #24]
 800040c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800040e:	4ba0      	ldr	r3, [pc, #640]	@ (8000690 <MX_GPIO_Init+0x2e0>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000412:	4a9f      	ldr	r2, [pc, #636]	@ (8000690 <MX_GPIO_Init+0x2e0>)
 8000414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000418:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800041a:	4b9d      	ldr	r3, [pc, #628]	@ (8000690 <MX_GPIO_Init+0x2e0>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800041e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000422:	617b      	str	r3, [r7, #20]
 8000424:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000426:	4b9a      	ldr	r3, [pc, #616]	@ (8000690 <MX_GPIO_Init+0x2e0>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800042a:	4a99      	ldr	r2, [pc, #612]	@ (8000690 <MX_GPIO_Init+0x2e0>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000432:	4b97      	ldr	r3, [pc, #604]	@ (8000690 <MX_GPIO_Init+0x2e0>)
 8000434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	613b      	str	r3, [r7, #16]
 800043c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800043e:	4b94      	ldr	r3, [pc, #592]	@ (8000690 <MX_GPIO_Init+0x2e0>)
 8000440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000442:	4a93      	ldr	r2, [pc, #588]	@ (8000690 <MX_GPIO_Init+0x2e0>)
 8000444:	f043 0302 	orr.w	r3, r3, #2
 8000448:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800044a:	4b91      	ldr	r3, [pc, #580]	@ (8000690 <MX_GPIO_Init+0x2e0>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800044e:	f003 0302 	and.w	r3, r3, #2
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000456:	4b8e      	ldr	r3, [pc, #568]	@ (8000690 <MX_GPIO_Init+0x2e0>)
 8000458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800045a:	4a8d      	ldr	r2, [pc, #564]	@ (8000690 <MX_GPIO_Init+0x2e0>)
 800045c:	f043 0308 	orr.w	r3, r3, #8
 8000460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000462:	4b8b      	ldr	r3, [pc, #556]	@ (8000690 <MX_GPIO_Init+0x2e0>)
 8000464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000466:	f003 0308 	and.w	r3, r3, #8
 800046a:	60bb      	str	r3, [r7, #8]
 800046c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800046e:	4b88      	ldr	r3, [pc, #544]	@ (8000690 <MX_GPIO_Init+0x2e0>)
 8000470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000472:	4a87      	ldr	r2, [pc, #540]	@ (8000690 <MX_GPIO_Init+0x2e0>)
 8000474:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000478:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800047a:	4b85      	ldr	r3, [pc, #532]	@ (8000690 <MX_GPIO_Init+0x2e0>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800047e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000486:	f001 fb2d 	bl	8001ae4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800048a:	230c      	movs	r3, #12
 800048c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800048e:	2302      	movs	r3, #2
 8000490:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	2300      	movs	r3, #0
 8000494:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000496:	2300      	movs	r3, #0
 8000498:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800049a:	230d      	movs	r3, #13
 800049c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800049e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004a2:	4619      	mov	r1, r3
 80004a4:	487b      	ldr	r0, [pc, #492]	@ (8000694 <MX_GPIO_Init+0x2e4>)
 80004a6:	f000 fc61 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80004aa:	2380      	movs	r3, #128	@ 0x80
 80004ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ae:	2302      	movs	r3, #2
 80004b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b2:	2300      	movs	r3, #0
 80004b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b6:	2300      	movs	r3, #0
 80004b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80004ba:	230d      	movs	r3, #13
 80004bc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004c2:	4619      	mov	r1, r3
 80004c4:	4874      	ldr	r0, [pc, #464]	@ (8000698 <MX_GPIO_Init+0x2e8>)
 80004c6:	f000 fc51 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80004ca:	233f      	movs	r3, #63	@ 0x3f
 80004cc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80004ce:	230b      	movs	r3, #11
 80004d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004da:	4619      	mov	r1, r3
 80004dc:	486f      	ldr	r0, [pc, #444]	@ (800069c <MX_GPIO_Init+0x2ec>)
 80004de:	f000 fc45 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004e2:	2301      	movs	r3, #1
 80004e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e6:	2302      	movs	r3, #2
 80004e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ee:	2300      	movs	r3, #0
 80004f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80004f2:	2301      	movs	r3, #1
 80004f4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004fa:	4619      	mov	r1, r3
 80004fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000500:	f000 fc34 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000504:	230a      	movs	r3, #10
 8000506:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000508:	230b      	movs	r3, #11
 800050a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000510:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000514:	4619      	mov	r1, r3
 8000516:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800051a:	f000 fc27 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800051e:	23f0      	movs	r3, #240	@ 0xf0
 8000520:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000522:	2302      	movs	r3, #2
 8000524:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	2300      	movs	r3, #0
 8000528:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800052a:	2303      	movs	r3, #3
 800052c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800052e:	2305      	movs	r3, #5
 8000530:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000536:	4619      	mov	r1, r3
 8000538:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800053c:	f000 fc16 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000540:	2301      	movs	r3, #1
 8000542:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000544:	2302      	movs	r3, #2
 8000546:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2300      	movs	r3, #0
 800054e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000550:	2302      	movs	r3, #2
 8000552:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000554:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000558:	4619      	mov	r1, r3
 800055a:	4851      	ldr	r0, [pc, #324]	@ (80006a0 <MX_GPIO_Init+0x2f0>)
 800055c:	f000 fc06 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000560:	2302      	movs	r3, #2
 8000562:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000564:	230b      	movs	r3, #11
 8000566:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000570:	4619      	mov	r1, r3
 8000572:	484b      	ldr	r0, [pc, #300]	@ (80006a0 <MX_GPIO_Init+0x2f0>)
 8000574:	f000 fbfa 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000578:	2344      	movs	r3, #68	@ 0x44
 800057a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800057c:	2303      	movs	r3, #3
 800057e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000584:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000588:	4619      	mov	r1, r3
 800058a:	4845      	ldr	r0, [pc, #276]	@ (80006a0 <MX_GPIO_Init+0x2f0>)
 800058c:	f000 fbee 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000590:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8000594:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000596:	2302      	movs	r3, #2
 8000598:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2300      	movs	r3, #0
 80005a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80005a2:	2301      	movs	r3, #1
 80005a4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005aa:	4619      	mov	r1, r3
 80005ac:	4839      	ldr	r0, [pc, #228]	@ (8000694 <MX_GPIO_Init+0x2e4>)
 80005ae:	f000 fbdd 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80005b2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80005b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b8:	2302      	movs	r3, #2
 80005ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c0:	2300      	movs	r3, #0
 80005c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80005c4:	2303      	movs	r3, #3
 80005c6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005cc:	4619      	mov	r1, r3
 80005ce:	4831      	ldr	r0, [pc, #196]	@ (8000694 <MX_GPIO_Init+0x2e4>)
 80005d0:	f000 fbcc 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005da:	2302      	movs	r3, #2
 80005dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	2300      	movs	r3, #0
 80005e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80005e6:	2301      	movs	r3, #1
 80005e8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ee:	4619      	mov	r1, r3
 80005f0:	482b      	ldr	r0, [pc, #172]	@ (80006a0 <MX_GPIO_Init+0x2f0>)
 80005f2:	f000 fbbb 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80005f6:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80005fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fc:	2302      	movs	r3, #2
 80005fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2300      	movs	r3, #0
 8000606:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000608:	230d      	movs	r3, #13
 800060a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000610:	4619      	mov	r1, r3
 8000612:	4823      	ldr	r0, [pc, #140]	@ (80006a0 <MX_GPIO_Init+0x2f0>)
 8000614:	f000 fbaa 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000618:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800061c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061e:	2302      	movs	r3, #2
 8000620:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800062a:	230e      	movs	r3, #14
 800062c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000632:	4619      	mov	r1, r3
 8000634:	481a      	ldr	r0, [pc, #104]	@ (80006a0 <MX_GPIO_Init+0x2f0>)
 8000636:	f000 fb99 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800063a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800063e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000640:	2302      	movs	r3, #2
 8000642:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000648:	2303      	movs	r3, #3
 800064a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800064c:	2307      	movs	r3, #7
 800064e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000650:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000654:	4619      	mov	r1, r3
 8000656:	4813      	ldr	r0, [pc, #76]	@ (80006a4 <MX_GPIO_Init+0x2f4>)
 8000658:	f000 fb88 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800065c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000660:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000662:	2302      	movs	r3, #2
 8000664:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2300      	movs	r3, #0
 800066c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800066e:	2302      	movs	r3, #2
 8000670:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000676:	4619      	mov	r1, r3
 8000678:	480a      	ldr	r0, [pc, #40]	@ (80006a4 <MX_GPIO_Init+0x2f4>)
 800067a:	f000 fb77 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800067e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000682:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000684:	2302      	movs	r3, #2
 8000686:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	e00b      	b.n	80006a8 <MX_GPIO_Init+0x2f8>
 8000690:	40021000 	.word	0x40021000
 8000694:	48001000 	.word	0x48001000
 8000698:	48001400 	.word	0x48001400
 800069c:	48000800 	.word	0x48000800
 80006a0:	48000400 	.word	0x48000400
 80006a4:	48000c00 	.word	0x48000c00
 80006a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80006aa:	2308      	movs	r3, #8
 80006ac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006b2:	4619      	mov	r1, r3
 80006b4:	485c      	ldr	r0, [pc, #368]	@ (8000828 <MX_GPIO_Init+0x478>)
 80006b6:	f000 fb59 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006ba:	2340      	movs	r3, #64	@ 0x40
 80006bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006be:	2302      	movs	r3, #2
 80006c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2300      	movs	r3, #0
 80006c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80006ca:	230d      	movs	r3, #13
 80006cc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006d2:	4619      	mov	r1, r3
 80006d4:	4855      	ldr	r0, [pc, #340]	@ (800082c <MX_GPIO_Init+0x47c>)
 80006d6:	f000 fb49 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006da:	2380      	movs	r3, #128	@ 0x80
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006de:	2302      	movs	r3, #2
 80006e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2300      	movs	r3, #0
 80006e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80006ea:	2302      	movs	r3, #2
 80006ec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f2:	4619      	mov	r1, r3
 80006f4:	484d      	ldr	r0, [pc, #308]	@ (800082c <MX_GPIO_Init+0x47c>)
 80006f6:	f000 fb39 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80006fa:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80006fe:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000700:	2302      	movs	r3, #2
 8000702:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000708:	2303      	movs	r3, #3
 800070a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800070c:	230c      	movs	r3, #12
 800070e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000714:	4619      	mov	r1, r3
 8000716:	4845      	ldr	r0, [pc, #276]	@ (800082c <MX_GPIO_Init+0x47c>)
 8000718:	f000 fb28 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800071c:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000720:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	2302      	movs	r3, #2
 8000724:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072a:	2303      	movs	r3, #3
 800072c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800072e:	230a      	movs	r3, #10
 8000730:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000732:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000736:	4619      	mov	r1, r3
 8000738:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800073c:	f000 fb16 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000740:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000746:	2300      	movs	r3, #0
 8000748:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000752:	4619      	mov	r1, r3
 8000754:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000758:	f000 fb08 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800075c:	2301      	movs	r3, #1
 800075e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000768:	2303      	movs	r3, #3
 800076a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800076c:	2309      	movs	r3, #9
 800076e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000770:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000774:	4619      	mov	r1, r3
 8000776:	482e      	ldr	r0, [pc, #184]	@ (8000830 <MX_GPIO_Init+0x480>)
 8000778:	f000 faf8 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800077c:	2304      	movs	r3, #4
 800077e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800078c:	230c      	movs	r3, #12
 800078e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000790:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000794:	4619      	mov	r1, r3
 8000796:	4826      	ldr	r0, [pc, #152]	@ (8000830 <MX_GPIO_Init+0x480>)
 8000798:	f000 fae8 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800079c:	2378      	movs	r3, #120	@ 0x78
 800079e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a0:	2302      	movs	r3, #2
 80007a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ac:	2307      	movs	r3, #7
 80007ae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b4:	4619      	mov	r1, r3
 80007b6:	481e      	ldr	r0, [pc, #120]	@ (8000830 <MX_GPIO_Init+0x480>)
 80007b8:	f000 fad8 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80007bc:	2338      	movs	r3, #56	@ 0x38
 80007be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c8:	2303      	movs	r3, #3
 80007ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007cc:	2306      	movs	r3, #6
 80007ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d4:	4619      	mov	r1, r3
 80007d6:	4817      	ldr	r0, [pc, #92]	@ (8000834 <MX_GPIO_Init+0x484>)
 80007d8:	f000 fac8 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007e2:	2312      	movs	r3, #18
 80007e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ea:	2303      	movs	r3, #3
 80007ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007ee:	2304      	movs	r3, #4
 80007f0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007f6:	4619      	mov	r1, r3
 80007f8:	480e      	ldr	r0, [pc, #56]	@ (8000834 <MX_GPIO_Init+0x484>)
 80007fa:	f000 fab7 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007fe:	2301      	movs	r3, #1
 8000800:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800080e:	2302      	movs	r3, #2
 8000810:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000816:	4619      	mov	r1, r3
 8000818:	4807      	ldr	r0, [pc, #28]	@ (8000838 <MX_GPIO_Init+0x488>)
 800081a:	f000 faa7 	bl	8000d6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800081e:	bf00      	nop
 8000820:	3738      	adds	r7, #56	@ 0x38
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	48001800 	.word	0x48001800
 800082c:	48000800 	.word	0x48000800
 8000830:	48000c00 	.word	0x48000c00
 8000834:	48000400 	.word	0x48000400
 8000838:	48001000 	.word	0x48001000

0800083c <dac_write>:

/* USER CODE BEGIN 4 */
void dac_write(uint16_t val, uint8_t address){
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af02      	add	r7, sp, #8
 8000842:	4603      	mov	r3, r0
 8000844:	460a      	mov	r2, r1
 8000846:	80fb      	strh	r3, [r7, #6]
 8000848:	4613      	mov	r3, r2
 800084a:	717b      	strb	r3, [r7, #5]
	uint8_t data[3];
	data[0]=0x30;
 800084c:	2330      	movs	r3, #48	@ 0x30
 800084e:	733b      	strb	r3, [r7, #12]
	data[1]=(val >> 8) & 0xFF;;
 8000850:	88fb      	ldrh	r3, [r7, #6]
 8000852:	0a1b      	lsrs	r3, r3, #8
 8000854:	b29b      	uxth	r3, r3
 8000856:	b2db      	uxtb	r3, r3
 8000858:	737b      	strb	r3, [r7, #13]
	data[2] = val & 0xFF;
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Master_Transmit(&hi2c2,address<<1,data,sizeof(data),HAL_MAX_DELAY);
 8000860:	797b      	ldrb	r3, [r7, #5]
 8000862:	b29b      	uxth	r3, r3
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	b299      	uxth	r1, r3
 8000868:	f107 020c 	add.w	r2, r7, #12
 800086c:	f04f 33ff 	mov.w	r3, #4294967295
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	2303      	movs	r3, #3
 8000874:	4803      	ldr	r0, [pc, #12]	@ (8000884 <dac_write+0x48>)
 8000876:	f000 fca7 	bl	80011c8 <HAL_I2C_Master_Transmit>

}
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20040030 	.word	0x20040030

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <Error_Handler+0x8>

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <HAL_MspInit+0x44>)
 800089c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800089e:	4a0e      	ldr	r2, [pc, #56]	@ (80008d8 <HAL_MspInit+0x44>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80008a6:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <HAL_MspInit+0x44>)
 80008a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <HAL_MspInit+0x44>)
 80008b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b6:	4a08      	ldr	r2, [pc, #32]	@ (80008d8 <HAL_MspInit+0x44>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80008be:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <HAL_MspInit+0x44>)
 80008c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000

080008dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b0ae      	sub	sp, #184	@ 0xb8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	2294      	movs	r2, #148	@ 0x94
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f002 fcb9 	bl	8003274 <memset>
  if(hi2c->Instance==I2C2)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a21      	ldr	r2, [pc, #132]	@ (800098c <HAL_I2C_MspInit+0xb0>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d13a      	bne.n	8000982 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800090c:	2380      	movs	r3, #128	@ 0x80
 800090e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000910:	2300      	movs	r3, #0
 8000912:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	4618      	mov	r0, r3
 800091a:	f001 ff93 	bl	8002844 <HAL_RCCEx_PeriphCLKConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000924:	f7ff ffb0 	bl	8000888 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000928:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <HAL_I2C_MspInit+0xb4>)
 800092a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092c:	4a18      	ldr	r2, [pc, #96]	@ (8000990 <HAL_I2C_MspInit+0xb4>)
 800092e:	f043 0320 	orr.w	r3, r3, #32
 8000932:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000934:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <HAL_I2C_MspInit+0xb4>)
 8000936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000938:	f003 0320 	and.w	r3, r3, #32
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    PF2     ------> I2C2_SMBA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000940:	2307      	movs	r3, #7
 8000942:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000946:	2312      	movs	r3, #18
 8000948:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800094c:	2301      	movs	r3, #1
 800094e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000958:	2304      	movs	r3, #4
 800095a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800095e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000962:	4619      	mov	r1, r3
 8000964:	480b      	ldr	r0, [pc, #44]	@ (8000994 <HAL_I2C_MspInit+0xb8>)
 8000966:	f000 fa01 	bl	8000d6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <HAL_I2C_MspInit+0xb4>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800096e:	4a08      	ldr	r2, [pc, #32]	@ (8000990 <HAL_I2C_MspInit+0xb4>)
 8000970:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000974:	6593      	str	r3, [r2, #88]	@ 0x58
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <HAL_I2C_MspInit+0xb4>)
 8000978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800097a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000982:	bf00      	nop
 8000984:	37b8      	adds	r7, #184	@ 0xb8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40005800 	.word	0x40005800
 8000990:	40021000 	.word	0x40021000
 8000994:	48001400 	.word	0x48001400

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <NMI_Handler+0x4>

080009a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <MemManage_Handler+0x4>

080009b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <UsageFault_Handler+0x4>

080009c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ee:	f000 f893 	bl	8000b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <SystemInit+0x20>)
 80009fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a02:	4a05      	ldr	r2, [pc, #20]	@ (8000a18 <SystemInit+0x20>)
 8000a04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a20:	f7ff ffea 	bl	80009f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a24:	480c      	ldr	r0, [pc, #48]	@ (8000a58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a26:	490d      	ldr	r1, [pc, #52]	@ (8000a5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a28:	4a0d      	ldr	r2, [pc, #52]	@ (8000a60 <LoopForever+0xe>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a68 <LoopForever+0x16>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a4a:	f002 fc1b 	bl	8003284 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a4e:	f7ff fbd5 	bl	80001fc <main>

08000a52 <LoopForever>:

LoopForever:
    b LoopForever
 8000a52:	e7fe      	b.n	8000a52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a54:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000a58:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8000a5c:	20040014 	.word	0x20040014
  ldr r2, =_sidata
 8000a60:	0800332c 	.word	0x0800332c
  ldr r2, =_sbss
 8000a64:	20040014 	.word	0x20040014
  ldr r4, =_ebss
 8000a68:	2004008c 	.word	0x2004008c

08000a6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC1_IRQHandler>

08000a6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a74:	2300      	movs	r3, #0
 8000a76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f000 f943 	bl	8000d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f000 f80e 	bl	8000aa0 <HAL_InitTick>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d002      	beq.n	8000a90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	71fb      	strb	r3, [r7, #7]
 8000a8e:	e001      	b.n	8000a94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a90:	f7ff ff00 	bl	8000894 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a94:	79fb      	ldrb	r3, [r7, #7]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000aac:	4b17      	ldr	r3, [pc, #92]	@ (8000b0c <HAL_InitTick+0x6c>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d023      	beq.n	8000afc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ab4:	4b16      	ldr	r3, [pc, #88]	@ (8000b10 <HAL_InitTick+0x70>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <HAL_InitTick+0x6c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f941 	bl	8000d52 <HAL_SYSTICK_Config>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d10f      	bne.n	8000af6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b0f      	cmp	r3, #15
 8000ada:	d809      	bhi.n	8000af0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000adc:	2200      	movs	r2, #0
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae4:	f000 f919 	bl	8000d1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b14 <HAL_InitTick+0x74>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	e007      	b.n	8000b00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	73fb      	strb	r3, [r7, #15]
 8000af4:	e004      	b.n	8000b00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	73fb      	strb	r3, [r7, #15]
 8000afa:	e001      	b.n	8000b00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000afc:	2301      	movs	r3, #1
 8000afe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20040010 	.word	0x20040010
 8000b10:	20040008 	.word	0x20040008
 8000b14:	2004000c 	.word	0x2004000c

08000b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <HAL_IncTick+0x20>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_IncTick+0x24>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a04      	ldr	r2, [pc, #16]	@ (8000b3c <HAL_IncTick+0x24>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20040010 	.word	0x20040010
 8000b3c:	20040088 	.word	0x20040088

08000b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b03      	ldr	r3, [pc, #12]	@ (8000b54 <HAL_GetTick+0x14>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20040088 	.word	0x20040088

08000b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b60:	f7ff ffee 	bl	8000b40 <HAL_GetTick>
 8000b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b70:	d005      	beq.n	8000b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b72:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <HAL_Delay+0x44>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b7e:	bf00      	nop
 8000b80:	f7ff ffde 	bl	8000b40 <HAL_GetTick>
 8000b84:	4602      	mov	r2, r0
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d8f7      	bhi.n	8000b80 <HAL_Delay+0x28>
  {
  }
}
 8000b90:	bf00      	nop
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20040010 	.word	0x20040010

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	@ (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	6039      	str	r1, [r7, #0]
 8000c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	db0a      	blt.n	8000c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	490c      	ldr	r1, [pc, #48]	@ (8000c50 <__NVIC_SetPriority+0x4c>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	0112      	lsls	r2, r2, #4
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	440b      	add	r3, r1
 8000c28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c2c:	e00a      	b.n	8000c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4908      	ldr	r1, [pc, #32]	@ (8000c54 <__NVIC_SetPriority+0x50>)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	3b04      	subs	r3, #4
 8000c3c:	0112      	lsls	r2, r2, #4
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	440b      	add	r3, r1
 8000c42:	761a      	strb	r2, [r3, #24]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000e100 	.word	0xe000e100
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	@ 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f1c3 0307 	rsb	r3, r3, #7
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	bf28      	it	cs
 8000c76:	2304      	movcs	r3, #4
 8000c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	2b06      	cmp	r3, #6
 8000c80:	d902      	bls.n	8000c88 <NVIC_EncodePriority+0x30>
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3b03      	subs	r3, #3
 8000c86:	e000      	b.n	8000c8a <NVIC_EncodePriority+0x32>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43da      	mvns	r2, r3
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	43d9      	mvns	r1, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	4313      	orrs	r3, r2
         );
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3724      	adds	r7, #36	@ 0x24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cd0:	d301      	bcc.n	8000cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e00f      	b.n	8000cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <SysTick_Config+0x40>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cde:	210f      	movs	r1, #15
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce4:	f7ff ff8e 	bl	8000c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce8:	4b05      	ldr	r3, [pc, #20]	@ (8000d00 <SysTick_Config+0x40>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cee:	4b04      	ldr	r3, [pc, #16]	@ (8000d00 <SysTick_Config+0x40>)
 8000cf0:	2207      	movs	r2, #7
 8000cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	e000e010 	.word	0xe000e010

08000d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff ff47 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b086      	sub	sp, #24
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d2c:	f7ff ff5c 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	68b9      	ldr	r1, [r7, #8]
 8000d36:	6978      	ldr	r0, [r7, #20]
 8000d38:	f7ff ff8e 	bl	8000c58 <NVIC_EncodePriority>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d42:	4611      	mov	r1, r2
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff5d 	bl	8000c04 <__NVIC_SetPriority>
}
 8000d4a:	bf00      	nop
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ffb0 	bl	8000cc0 <SysTick_Config>
 8000d60:	4603      	mov	r3, r0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d7a:	e166      	b.n	800104a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	2101      	movs	r1, #1
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	fa01 f303 	lsl.w	r3, r1, r3
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f000 8158 	beq.w	8001044 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0303 	and.w	r3, r3, #3
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d005      	beq.n	8000dac <HAL_GPIO_Init+0x40>
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d130      	bne.n	8000e0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	2203      	movs	r2, #3
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	68da      	ldr	r2, [r3, #12]
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000de2:	2201      	movs	r2, #1
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	091b      	lsrs	r3, r3, #4
 8000df8:	f003 0201 	and.w	r2, r3, #1
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	d017      	beq.n	8000e4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	2203      	movs	r2, #3
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	689a      	ldr	r2, [r3, #8]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d123      	bne.n	8000e9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	08da      	lsrs	r2, r3, #3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3208      	adds	r2, #8
 8000e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	220f      	movs	r2, #15
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	691a      	ldr	r2, [r3, #16]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	f003 0307 	and.w	r3, r3, #7
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	08da      	lsrs	r2, r3, #3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3208      	adds	r2, #8
 8000e98:	6939      	ldr	r1, [r7, #16]
 8000e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 0203 	and.w	r2, r3, #3
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f000 80b2 	beq.w	8001044 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee0:	4b61      	ldr	r3, [pc, #388]	@ (8001068 <HAL_GPIO_Init+0x2fc>)
 8000ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ee4:	4a60      	ldr	r2, [pc, #384]	@ (8001068 <HAL_GPIO_Init+0x2fc>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eec:	4b5e      	ldr	r3, [pc, #376]	@ (8001068 <HAL_GPIO_Init+0x2fc>)
 8000eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ef8:	4a5c      	ldr	r2, [pc, #368]	@ (800106c <HAL_GPIO_Init+0x300>)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	089b      	lsrs	r3, r3, #2
 8000efe:	3302      	adds	r3, #2
 8000f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	220f      	movs	r2, #15
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f22:	d02b      	beq.n	8000f7c <HAL_GPIO_Init+0x210>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a52      	ldr	r2, [pc, #328]	@ (8001070 <HAL_GPIO_Init+0x304>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d025      	beq.n	8000f78 <HAL_GPIO_Init+0x20c>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a51      	ldr	r2, [pc, #324]	@ (8001074 <HAL_GPIO_Init+0x308>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d01f      	beq.n	8000f74 <HAL_GPIO_Init+0x208>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a50      	ldr	r2, [pc, #320]	@ (8001078 <HAL_GPIO_Init+0x30c>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d019      	beq.n	8000f70 <HAL_GPIO_Init+0x204>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a4f      	ldr	r2, [pc, #316]	@ (800107c <HAL_GPIO_Init+0x310>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d013      	beq.n	8000f6c <HAL_GPIO_Init+0x200>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a4e      	ldr	r2, [pc, #312]	@ (8001080 <HAL_GPIO_Init+0x314>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d00d      	beq.n	8000f68 <HAL_GPIO_Init+0x1fc>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a4d      	ldr	r2, [pc, #308]	@ (8001084 <HAL_GPIO_Init+0x318>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d007      	beq.n	8000f64 <HAL_GPIO_Init+0x1f8>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a4c      	ldr	r2, [pc, #304]	@ (8001088 <HAL_GPIO_Init+0x31c>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d101      	bne.n	8000f60 <HAL_GPIO_Init+0x1f4>
 8000f5c:	2307      	movs	r3, #7
 8000f5e:	e00e      	b.n	8000f7e <HAL_GPIO_Init+0x212>
 8000f60:	2308      	movs	r3, #8
 8000f62:	e00c      	b.n	8000f7e <HAL_GPIO_Init+0x212>
 8000f64:	2306      	movs	r3, #6
 8000f66:	e00a      	b.n	8000f7e <HAL_GPIO_Init+0x212>
 8000f68:	2305      	movs	r3, #5
 8000f6a:	e008      	b.n	8000f7e <HAL_GPIO_Init+0x212>
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	e006      	b.n	8000f7e <HAL_GPIO_Init+0x212>
 8000f70:	2303      	movs	r3, #3
 8000f72:	e004      	b.n	8000f7e <HAL_GPIO_Init+0x212>
 8000f74:	2302      	movs	r3, #2
 8000f76:	e002      	b.n	8000f7e <HAL_GPIO_Init+0x212>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e000      	b.n	8000f7e <HAL_GPIO_Init+0x212>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	f002 0203 	and.w	r2, r2, #3
 8000f84:	0092      	lsls	r2, r2, #2
 8000f86:	4093      	lsls	r3, r2
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f8e:	4937      	ldr	r1, [pc, #220]	@ (800106c <HAL_GPIO_Init+0x300>)
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	3302      	adds	r3, #2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800108c <HAL_GPIO_Init+0x320>)
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fc0:	4a32      	ldr	r2, [pc, #200]	@ (800108c <HAL_GPIO_Init+0x320>)
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fc6:	4b31      	ldr	r3, [pc, #196]	@ (800108c <HAL_GPIO_Init+0x320>)
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fea:	4a28      	ldr	r2, [pc, #160]	@ (800108c <HAL_GPIO_Init+0x320>)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ff0:	4b26      	ldr	r3, [pc, #152]	@ (800108c <HAL_GPIO_Init+0x320>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001014:	4a1d      	ldr	r2, [pc, #116]	@ (800108c <HAL_GPIO_Init+0x320>)
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800101a:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <HAL_GPIO_Init+0x320>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800103e:	4a13      	ldr	r2, [pc, #76]	@ (800108c <HAL_GPIO_Init+0x320>)
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3301      	adds	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	fa22 f303 	lsr.w	r3, r2, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	f47f ae91 	bne.w	8000d7c <HAL_GPIO_Init+0x10>
  }
}
 800105a:	bf00      	nop
 800105c:	bf00      	nop
 800105e:	371c      	adds	r7, #28
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	40021000 	.word	0x40021000
 800106c:	40010000 	.word	0x40010000
 8001070:	48000400 	.word	0x48000400
 8001074:	48000800 	.word	0x48000800
 8001078:	48000c00 	.word	0x48000c00
 800107c:	48001000 	.word	0x48001000
 8001080:	48001400 	.word	0x48001400
 8001084:	48001800 	.word	0x48001800
 8001088:	48001c00 	.word	0x48001c00
 800108c:	40010400 	.word	0x40010400

08001090 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e08d      	b.n	80011be <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d106      	bne.n	80010bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff fc10 	bl	80008dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2224      	movs	r2, #36	@ 0x24
 80010c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 0201 	bic.w	r2, r2, #1
 80010d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80010e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d107      	bne.n	800110a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	e006      	b.n	8001118 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001116:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d108      	bne.n	8001132 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	e007      	b.n	8001142 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001140:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	6812      	ldr	r2, [r2, #0]
 800114c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001150:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001154:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001164:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691a      	ldr	r2, [r3, #16]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69d9      	ldr	r1, [r3, #28]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a1a      	ldr	r2, [r3, #32]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	430a      	orrs	r2, r1
 800118e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0201 	orr.w	r2, r2, #1
 800119e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2220      	movs	r2, #32
 80011aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	461a      	mov	r2, r3
 80011d4:	460b      	mov	r3, r1
 80011d6:	817b      	strh	r3, [r7, #10]
 80011d8:	4613      	mov	r3, r2
 80011da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b20      	cmp	r3, #32
 80011e6:	f040 80fd 	bne.w	80013e4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d101      	bne.n	80011f8 <HAL_I2C_Master_Transmit+0x30>
 80011f4:	2302      	movs	r3, #2
 80011f6:	e0f6      	b.n	80013e6 <HAL_I2C_Master_Transmit+0x21e>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001200:	f7ff fc9e 	bl	8000b40 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2319      	movs	r3, #25
 800120c:	2201      	movs	r2, #1
 800120e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f000 f914 	bl	8001440 <I2C_WaitOnFlagUntilTimeout>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e0e1      	b.n	80013e6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2221      	movs	r2, #33	@ 0x21
 8001226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2210      	movs	r2, #16
 800122e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2200      	movs	r2, #0
 8001236:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	893a      	ldrh	r2, [r7, #8]
 8001242:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2200      	movs	r2, #0
 8001248:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800124e:	b29b      	uxth	r3, r3
 8001250:	2bff      	cmp	r3, #255	@ 0xff
 8001252:	d906      	bls.n	8001262 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	22ff      	movs	r2, #255	@ 0xff
 8001258:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800125a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	e007      	b.n	8001272 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001266:	b29a      	uxth	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800126c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001270:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001276:	2b00      	cmp	r3, #0
 8001278:	d024      	beq.n	80012c4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127e:	781a      	ldrb	r2, [r3, #0]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001294:	b29b      	uxth	r3, r3
 8001296:	3b01      	subs	r3, #1
 8001298:	b29a      	uxth	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012a2:	3b01      	subs	r3, #1
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	3301      	adds	r3, #1
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	8979      	ldrh	r1, [r7, #10]
 80012b6:	4b4e      	ldr	r3, [pc, #312]	@ (80013f0 <HAL_I2C_Master_Transmit+0x228>)
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f000 fa83 	bl	80017c8 <I2C_TransferConfig>
 80012c2:	e066      	b.n	8001392 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	8979      	ldrh	r1, [r7, #10]
 80012cc:	4b48      	ldr	r3, [pc, #288]	@ (80013f0 <HAL_I2C_Master_Transmit+0x228>)
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	f000 fa78 	bl	80017c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80012d8:	e05b      	b.n	8001392 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	6a39      	ldr	r1, [r7, #32]
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 f907 	bl	80014f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e07b      	b.n	80013e6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f2:	781a      	ldrb	r2, [r3, #0]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001308:	b29b      	uxth	r3, r3
 800130a:	3b01      	subs	r3, #1
 800130c:	b29a      	uxth	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001316:	3b01      	subs	r3, #1
 8001318:	b29a      	uxth	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001322:	b29b      	uxth	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d034      	beq.n	8001392 <HAL_I2C_Master_Transmit+0x1ca>
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800132c:	2b00      	cmp	r3, #0
 800132e:	d130      	bne.n	8001392 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	6a3b      	ldr	r3, [r7, #32]
 8001336:	2200      	movs	r2, #0
 8001338:	2180      	movs	r1, #128	@ 0x80
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f000 f880 	bl	8001440 <I2C_WaitOnFlagUntilTimeout>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e04d      	b.n	80013e6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800134e:	b29b      	uxth	r3, r3
 8001350:	2bff      	cmp	r3, #255	@ 0xff
 8001352:	d90e      	bls.n	8001372 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	22ff      	movs	r2, #255	@ 0xff
 8001358:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800135e:	b2da      	uxtb	r2, r3
 8001360:	8979      	ldrh	r1, [r7, #10]
 8001362:	2300      	movs	r3, #0
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 fa2c 	bl	80017c8 <I2C_TransferConfig>
 8001370:	e00f      	b.n	8001392 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001376:	b29a      	uxth	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001380:	b2da      	uxtb	r2, r3
 8001382:	8979      	ldrh	r1, [r7, #10]
 8001384:	2300      	movs	r3, #0
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f000 fa1b 	bl	80017c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001396:	b29b      	uxth	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	d19e      	bne.n	80012da <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	6a39      	ldr	r1, [r7, #32]
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f000 f8ed 	bl	8001580 <I2C_WaitOnSTOPFlagUntilTimeout>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e01a      	b.n	80013e6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2220      	movs	r2, #32
 80013b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6859      	ldr	r1, [r3, #4]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <HAL_I2C_Master_Transmit+0x22c>)
 80013c4:	400b      	ands	r3, r1
 80013c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2220      	movs	r2, #32
 80013cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	e000      	b.n	80013e6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80013e4:	2302      	movs	r3, #2
  }
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	80002000 	.word	0x80002000
 80013f4:	fe00e800 	.word	0xfe00e800

080013f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b02      	cmp	r3, #2
 800140c:	d103      	bne.n	8001416 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2200      	movs	r2, #0
 8001414:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b01      	cmp	r3, #1
 8001422:	d007      	beq.n	8001434 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	699a      	ldr	r2, [r3, #24]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 0201 	orr.w	r2, r2, #1
 8001432:	619a      	str	r2, [r3, #24]
  }
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	4613      	mov	r3, r2
 800144e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001450:	e03b      	b.n	80014ca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	6839      	ldr	r1, [r7, #0]
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f000 f8d6 	bl	8001608 <I2C_IsErrorOccurred>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e041      	b.n	80014ea <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146c:	d02d      	beq.n	80014ca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800146e:	f7ff fb67 	bl	8000b40 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d302      	bcc.n	8001484 <I2C_WaitOnFlagUntilTimeout+0x44>
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d122      	bne.n	80014ca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	699a      	ldr	r2, [r3, #24]
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	4013      	ands	r3, r2
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	429a      	cmp	r2, r3
 8001492:	bf0c      	ite	eq
 8001494:	2301      	moveq	r3, #1
 8001496:	2300      	movne	r3, #0
 8001498:	b2db      	uxtb	r3, r3
 800149a:	461a      	mov	r2, r3
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d113      	bne.n	80014ca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a6:	f043 0220 	orr.w	r2, r3, #32
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2220      	movs	r2, #32
 80014b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00f      	b.n	80014ea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	699a      	ldr	r2, [r3, #24]
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4013      	ands	r3, r2
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	bf0c      	ite	eq
 80014da:	2301      	moveq	r3, #1
 80014dc:	2300      	movne	r3, #0
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	461a      	mov	r2, r3
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d0b4      	beq.n	8001452 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80014fe:	e033      	b.n	8001568 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	68b9      	ldr	r1, [r7, #8]
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f000 f87f 	bl	8001608 <I2C_IsErrorOccurred>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e031      	b.n	8001578 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151a:	d025      	beq.n	8001568 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800151c:	f7ff fb10 	bl	8000b40 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	429a      	cmp	r2, r3
 800152a:	d302      	bcc.n	8001532 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d11a      	bne.n	8001568 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b02      	cmp	r3, #2
 800153e:	d013      	beq.n	8001568 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001544:	f043 0220 	orr.w	r2, r3, #32
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2220      	movs	r2, #32
 8001550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e007      	b.n	8001578 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b02      	cmp	r3, #2
 8001574:	d1c4      	bne.n	8001500 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800158c:	e02f      	b.n	80015ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f000 f838 	bl	8001608 <I2C_IsErrorOccurred>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e02d      	b.n	80015fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015a2:	f7ff facd 	bl	8000b40 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	68ba      	ldr	r2, [r7, #8]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d302      	bcc.n	80015b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d11a      	bne.n	80015ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f003 0320 	and.w	r3, r3, #32
 80015c2:	2b20      	cmp	r3, #32
 80015c4:	d013      	beq.n	80015ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ca:	f043 0220 	orr.w	r2, r3, #32
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2220      	movs	r2, #32
 80015d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e007      	b.n	80015fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f003 0320 	and.w	r3, r3, #32
 80015f8:	2b20      	cmp	r3, #32
 80015fa:	d1c8      	bne.n	800158e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	@ 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	2b00      	cmp	r3, #0
 8001632:	d068      	beq.n	8001706 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2210      	movs	r2, #16
 800163a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800163c:	e049      	b.n	80016d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001644:	d045      	beq.n	80016d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001646:	f7ff fa7b 	bl	8000b40 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	429a      	cmp	r2, r3
 8001654:	d302      	bcc.n	800165c <I2C_IsErrorOccurred+0x54>
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d13a      	bne.n	80016d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001666:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800166e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800167a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800167e:	d121      	bne.n	80016c4 <I2C_IsErrorOccurred+0xbc>
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001686:	d01d      	beq.n	80016c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001688:	7cfb      	ldrb	r3, [r7, #19]
 800168a:	2b20      	cmp	r3, #32
 800168c:	d01a      	beq.n	80016c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800169c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800169e:	f7ff fa4f 	bl	8000b40 <HAL_GetTick>
 80016a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016a4:	e00e      	b.n	80016c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80016a6:	f7ff fa4b 	bl	8000b40 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b19      	cmp	r3, #25
 80016b2:	d907      	bls.n	80016c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	f043 0320 	orr.w	r3, r3, #32
 80016ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80016c2:	e006      	b.n	80016d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f003 0320 	and.w	r3, r3, #32
 80016ce:	2b20      	cmp	r3, #32
 80016d0:	d1e9      	bne.n	80016a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0320 	and.w	r3, r3, #32
 80016dc:	2b20      	cmp	r3, #32
 80016de:	d003      	beq.n	80016e8 <I2C_IsErrorOccurred+0xe0>
 80016e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0aa      	beq.n	800163e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80016e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d103      	bne.n	80016f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2220      	movs	r2, #32
 80016f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00b      	beq.n	8001730 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001718:	6a3b      	ldr	r3, [r7, #32]
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001728:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00b      	beq.n	8001752 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	f043 0308 	orr.w	r3, r3, #8
 8001740:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800174a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00b      	beq.n	8001774 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	f043 0302 	orr.w	r3, r3, #2
 8001762:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800176c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001774:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001778:	2b00      	cmp	r3, #0
 800177a:	d01c      	beq.n	80017b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f7ff fe3b 	bl	80013f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6859      	ldr	r1, [r3, #4]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <I2C_IsErrorOccurred+0x1bc>)
 800178e:	400b      	ands	r3, r1
 8001790:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	431a      	orrs	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2220      	movs	r2, #32
 80017a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80017b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3728      	adds	r7, #40	@ 0x28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	fe00e800 	.word	0xfe00e800

080017c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b087      	sub	sp, #28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	460b      	mov	r3, r1
 80017d4:	817b      	strh	r3, [r7, #10]
 80017d6:	4613      	mov	r3, r2
 80017d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017da:	897b      	ldrh	r3, [r7, #10]
 80017dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80017e0:	7a7b      	ldrb	r3, [r7, #9]
 80017e2:	041b      	lsls	r3, r3, #16
 80017e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	0d5b      	lsrs	r3, r3, #21
 8001802:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001806:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <I2C_TransferConfig+0x60>)
 8001808:	430b      	orrs	r3, r1
 800180a:	43db      	mvns	r3, r3
 800180c:	ea02 0103 	and.w	r1, r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	430a      	orrs	r2, r1
 8001818:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800181a:	bf00      	nop
 800181c:	371c      	adds	r7, #28
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	03ff63ff 	.word	0x03ff63ff

0800182c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b20      	cmp	r3, #32
 8001840:	d138      	bne.n	80018b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800184c:	2302      	movs	r3, #2
 800184e:	e032      	b.n	80018b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2224      	movs	r2, #36	@ 0x24
 800185c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 0201 	bic.w	r2, r2, #1
 800186e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800187e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6819      	ldr	r1, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 0201 	orr.w	r2, r2, #1
 800189e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2220      	movs	r2, #32
 80018a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	e000      	b.n	80018b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018b4:	2302      	movs	r3, #2
  }
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b085      	sub	sp, #20
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b20      	cmp	r3, #32
 80018d6:	d139      	bne.n	800194c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d101      	bne.n	80018e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e033      	b.n	800194e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2224      	movs	r2, #36	@ 0x24
 80018f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0201 	bic.w	r2, r2, #1
 8001904:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001914:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4313      	orrs	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0201 	orr.w	r2, r2, #1
 8001936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2220      	movs	r2, #32
 800193c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	e000      	b.n	800194e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800194c:	2302      	movs	r3, #2
  }
}
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001960:	4b0d      	ldr	r3, [pc, #52]	@ (8001998 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001968:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800196c:	d102      	bne.n	8001974 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800196e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001972:	e00b      	b.n	800198c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001974:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001976:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800197a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001982:	d102      	bne.n	800198a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001984:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001988:	e000      	b.n	800198c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800198a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40007000 	.word	0x40007000

0800199c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d141      	bne.n	8001a2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019aa:	4b4b      	ldr	r3, [pc, #300]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019b6:	d131      	bne.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019b8:	4b47      	ldr	r3, [pc, #284]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019be:	4a46      	ldr	r2, [pc, #280]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c8:	4b43      	ldr	r3, [pc, #268]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019d0:	4a41      	ldr	r2, [pc, #260]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80019d8:	4b40      	ldr	r3, [pc, #256]	@ (8001adc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2232      	movs	r2, #50	@ 0x32
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ae0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019e4:	fba2 2303 	umull	r2, r3, r2, r3
 80019e8:	0c9b      	lsrs	r3, r3, #18
 80019ea:	3301      	adds	r3, #1
 80019ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ee:	e002      	b.n	80019f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019f6:	4b38      	ldr	r3, [pc, #224]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a02:	d102      	bne.n	8001a0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f2      	bne.n	80019f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a0a:	4b33      	ldr	r3, [pc, #204]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a16:	d158      	bne.n	8001aca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e057      	b.n	8001acc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a22:	4a2d      	ldr	r2, [pc, #180]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001a2c:	e04d      	b.n	8001aca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a34:	d141      	bne.n	8001aba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a36:	4b28      	ldr	r3, [pc, #160]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a42:	d131      	bne.n	8001aa8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a44:	4b24      	ldr	r3, [pc, #144]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a4a:	4a23      	ldr	r2, [pc, #140]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a54:	4b20      	ldr	r3, [pc, #128]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001a64:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2232      	movs	r2, #50	@ 0x32
 8001a6a:	fb02 f303 	mul.w	r3, r2, r3
 8001a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a70:	fba2 2303 	umull	r2, r3, r2, r3
 8001a74:	0c9b      	lsrs	r3, r3, #18
 8001a76:	3301      	adds	r3, #1
 8001a78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a7a:	e002      	b.n	8001a82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a82:	4b15      	ldr	r3, [pc, #84]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a8e:	d102      	bne.n	8001a96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f2      	bne.n	8001a7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a96:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aa2:	d112      	bne.n	8001aca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e011      	b.n	8001acc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001aae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ab4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ab8:	e007      	b.n	8001aca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001aba:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ac2:	4a05      	ldr	r2, [pc, #20]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ac8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40007000 	.word	0x40007000
 8001adc:	20040008 	.word	0x20040008
 8001ae0:	431bde83 	.word	0x431bde83

08001ae4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001ae8:	4b05      	ldr	r3, [pc, #20]	@ (8001b00 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	4a04      	ldr	r2, [pc, #16]	@ (8001b00 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001aee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001af2:	6053      	str	r3, [r2, #4]
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40007000 	.word	0x40007000

08001b04 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d102      	bne.n	8001b18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	f000 bc08 	b.w	8002328 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b18:	4b96      	ldr	r3, [pc, #600]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b22:	4b94      	ldr	r3, [pc, #592]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0310 	and.w	r3, r3, #16
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 80e4 	beq.w	8001d02 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d007      	beq.n	8001b50 <HAL_RCC_OscConfig+0x4c>
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	2b0c      	cmp	r3, #12
 8001b44:	f040 808b 	bne.w	8001c5e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	f040 8087 	bne.w	8001c5e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b50:	4b88      	ldr	r3, [pc, #544]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_OscConfig+0x64>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e3df      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1a      	ldr	r2, [r3, #32]
 8001b6c:	4b81      	ldr	r3, [pc, #516]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d004      	beq.n	8001b82 <HAL_RCC_OscConfig+0x7e>
 8001b78:	4b7e      	ldr	r3, [pc, #504]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b80:	e005      	b.n	8001b8e <HAL_RCC_OscConfig+0x8a>
 8001b82:	4b7c      	ldr	r3, [pc, #496]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d223      	bcs.n	8001bda <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 fd94 	bl	80026c4 <RCC_SetFlashLatencyFromMSIRange>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e3c0      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ba6:	4b73      	ldr	r3, [pc, #460]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a72      	ldr	r2, [pc, #456]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001bac:	f043 0308 	orr.w	r3, r3, #8
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	4b70      	ldr	r3, [pc, #448]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	496d      	ldr	r1, [pc, #436]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bc4:	4b6b      	ldr	r3, [pc, #428]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	021b      	lsls	r3, r3, #8
 8001bd2:	4968      	ldr	r1, [pc, #416]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	604b      	str	r3, [r1, #4]
 8001bd8:	e025      	b.n	8001c26 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bda:	4b66      	ldr	r3, [pc, #408]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a65      	ldr	r2, [pc, #404]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001be0:	f043 0308 	orr.w	r3, r3, #8
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	4b63      	ldr	r3, [pc, #396]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	4960      	ldr	r1, [pc, #384]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bf8:	4b5e      	ldr	r3, [pc, #376]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	495b      	ldr	r1, [pc, #364]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d109      	bne.n	8001c26 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 fd54 	bl	80026c4 <RCC_SetFlashLatencyFromMSIRange>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e380      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c26:	f000 fcc1 	bl	80025ac <HAL_RCC_GetSysClockFreq>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	4b51      	ldr	r3, [pc, #324]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	4950      	ldr	r1, [pc, #320]	@ (8001d78 <HAL_RCC_OscConfig+0x274>)
 8001c38:	5ccb      	ldrb	r3, [r1, r3]
 8001c3a:	f003 031f 	and.w	r3, r3, #31
 8001c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c42:	4a4e      	ldr	r2, [pc, #312]	@ (8001d7c <HAL_RCC_OscConfig+0x278>)
 8001c44:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c46:	4b4e      	ldr	r3, [pc, #312]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe ff28 	bl	8000aa0 <HAL_InitTick>
 8001c50:	4603      	mov	r3, r0
 8001c52:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d052      	beq.n	8001d00 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	e364      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d032      	beq.n	8001ccc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c66:	4b43      	ldr	r3, [pc, #268]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a42      	ldr	r2, [pc, #264]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c72:	f7fe ff65 	bl	8000b40 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c7a:	f7fe ff61 	bl	8000b40 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e34d      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c8c:	4b39      	ldr	r3, [pc, #228]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c98:	4b36      	ldr	r3, [pc, #216]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a35      	ldr	r2, [pc, #212]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c9e:	f043 0308 	orr.w	r3, r3, #8
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	4b33      	ldr	r3, [pc, #204]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	4930      	ldr	r1, [pc, #192]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cb6:	4b2f      	ldr	r3, [pc, #188]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	492b      	ldr	r1, [pc, #172]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	604b      	str	r3, [r1, #4]
 8001cca:	e01a      	b.n	8001d02 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ccc:	4b29      	ldr	r3, [pc, #164]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a28      	ldr	r2, [pc, #160]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001cd2:	f023 0301 	bic.w	r3, r3, #1
 8001cd6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cd8:	f7fe ff32 	bl	8000b40 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ce0:	f7fe ff2e 	bl	8000b40 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e31a      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cf2:	4b20      	ldr	r3, [pc, #128]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x1dc>
 8001cfe:	e000      	b.n	8001d02 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d073      	beq.n	8001df6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d005      	beq.n	8001d20 <HAL_RCC_OscConfig+0x21c>
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	2b0c      	cmp	r3, #12
 8001d18:	d10e      	bne.n	8001d38 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2b03      	cmp	r3, #3
 8001d1e:	d10b      	bne.n	8001d38 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d20:	4b14      	ldr	r3, [pc, #80]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d063      	beq.n	8001df4 <HAL_RCC_OscConfig+0x2f0>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d15f      	bne.n	8001df4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e2f7      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d40:	d106      	bne.n	8001d50 <HAL_RCC_OscConfig+0x24c>
 8001d42:	4b0c      	ldr	r3, [pc, #48]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a0b      	ldr	r2, [pc, #44]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e025      	b.n	8001d9c <HAL_RCC_OscConfig+0x298>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d58:	d114      	bne.n	8001d84 <HAL_RCC_OscConfig+0x280>
 8001d5a:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a05      	ldr	r2, [pc, #20]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001d60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	4b03      	ldr	r3, [pc, #12]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a02      	ldr	r2, [pc, #8]	@ (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	e013      	b.n	8001d9c <HAL_RCC_OscConfig+0x298>
 8001d74:	40021000 	.word	0x40021000
 8001d78:	080032e4 	.word	0x080032e4
 8001d7c:	20040008 	.word	0x20040008
 8001d80:	2004000c 	.word	0x2004000c
 8001d84:	4ba0      	ldr	r3, [pc, #640]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a9f      	ldr	r2, [pc, #636]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b9d      	ldr	r3, [pc, #628]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a9c      	ldr	r2, [pc, #624]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001d96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d013      	beq.n	8001dcc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da4:	f7fe fecc 	bl	8000b40 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dac:	f7fe fec8 	bl	8000b40 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	@ 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e2b4      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dbe:	4b92      	ldr	r3, [pc, #584]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0x2a8>
 8001dca:	e014      	b.n	8001df6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7fe feb8 	bl	8000b40 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7fe feb4 	bl	8000b40 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	@ 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e2a0      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001de6:	4b88      	ldr	r3, [pc, #544]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x2d0>
 8001df2:	e000      	b.n	8001df6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d060      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_OscConfig+0x310>
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	2b0c      	cmp	r3, #12
 8001e0c:	d119      	bne.n	8001e42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d116      	bne.n	8001e42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e14:	4b7c      	ldr	r3, [pc, #496]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <HAL_RCC_OscConfig+0x328>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e27d      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2c:	4b76      	ldr	r3, [pc, #472]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	061b      	lsls	r3, r3, #24
 8001e3a:	4973      	ldr	r1, [pc, #460]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e40:	e040      	b.n	8001ec4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d023      	beq.n	8001e92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e4a:	4b6f      	ldr	r3, [pc, #444]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a6e      	ldr	r2, [pc, #440]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e56:	f7fe fe73 	bl	8000b40 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5e:	f7fe fe6f 	bl	8000b40 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e25b      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e70:	4b65      	ldr	r3, [pc, #404]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0f0      	beq.n	8001e5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7c:	4b62      	ldr	r3, [pc, #392]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	061b      	lsls	r3, r3, #24
 8001e8a:	495f      	ldr	r1, [pc, #380]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]
 8001e90:	e018      	b.n	8001ec4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e92:	4b5d      	ldr	r3, [pc, #372]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a5c      	ldr	r2, [pc, #368]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001e98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9e:	f7fe fe4f 	bl	8000b40 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea6:	f7fe fe4b 	bl	8000b40 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e237      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eb8:	4b53      	ldr	r3, [pc, #332]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f0      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d03c      	beq.n	8001f4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d01c      	beq.n	8001f12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed8:	4b4b      	ldr	r3, [pc, #300]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ede:	4a4a      	ldr	r2, [pc, #296]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee8:	f7fe fe2a 	bl	8000b40 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef0:	f7fe fe26 	bl	8000b40 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e212      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f02:	4b41      	ldr	r3, [pc, #260]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0ef      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x3ec>
 8001f10:	e01b      	b.n	8001f4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f12:	4b3d      	ldr	r3, [pc, #244]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f18:	4a3b      	ldr	r2, [pc, #236]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001f1a:	f023 0301 	bic.w	r3, r3, #1
 8001f1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f22:	f7fe fe0d 	bl	8000b40 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f2a:	f7fe fe09 	bl	8000b40 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e1f5      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f3c:	4b32      	ldr	r3, [pc, #200]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1ef      	bne.n	8001f2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 80a6 	beq.w	80020a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10d      	bne.n	8001f84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f68:	4b27      	ldr	r3, [pc, #156]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6c:	4a26      	ldr	r2, [pc, #152]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001f6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f72:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f74:	4b24      	ldr	r3, [pc, #144]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f80:	2301      	movs	r3, #1
 8001f82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f84:	4b21      	ldr	r3, [pc, #132]	@ (800200c <HAL_RCC_OscConfig+0x508>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d118      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f90:	4b1e      	ldr	r3, [pc, #120]	@ (800200c <HAL_RCC_OscConfig+0x508>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a1d      	ldr	r2, [pc, #116]	@ (800200c <HAL_RCC_OscConfig+0x508>)
 8001f96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9c:	f7fe fdd0 	bl	8000b40 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa4:	f7fe fdcc 	bl	8000b40 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e1b8      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb6:	4b15      	ldr	r3, [pc, #84]	@ (800200c <HAL_RCC_OscConfig+0x508>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d108      	bne.n	8001fdc <HAL_RCC_OscConfig+0x4d8>
 8001fca:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fda:	e029      	b.n	8002030 <HAL_RCC_OscConfig+0x52c>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b05      	cmp	r3, #5
 8001fe2:	d115      	bne.n	8002010 <HAL_RCC_OscConfig+0x50c>
 8001fe4:	4b08      	ldr	r3, [pc, #32]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fea:	4a07      	ldr	r2, [pc, #28]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001fec:	f043 0304 	orr.w	r3, r3, #4
 8001ff0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ff4:	4b04      	ldr	r3, [pc, #16]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ffa:	4a03      	ldr	r2, [pc, #12]	@ (8002008 <HAL_RCC_OscConfig+0x504>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002004:	e014      	b.n	8002030 <HAL_RCC_OscConfig+0x52c>
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	40007000 	.word	0x40007000
 8002010:	4b9d      	ldr	r3, [pc, #628]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002016:	4a9c      	ldr	r2, [pc, #624]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002020:	4b99      	ldr	r3, [pc, #612]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002026:	4a98      	ldr	r2, [pc, #608]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 8002028:	f023 0304 	bic.w	r3, r3, #4
 800202c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d016      	beq.n	8002066 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7fe fd82 	bl	8000b40 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800203e:	e00a      	b.n	8002056 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002040:	f7fe fd7e 	bl	8000b40 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e168      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002056:	4b8c      	ldr	r3, [pc, #560]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0ed      	beq.n	8002040 <HAL_RCC_OscConfig+0x53c>
 8002064:	e015      	b.n	8002092 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002066:	f7fe fd6b 	bl	8000b40 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800206c:	e00a      	b.n	8002084 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7fe fd67 	bl	8000b40 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f241 3288 	movw	r2, #5000	@ 0x1388
 800207c:	4293      	cmp	r3, r2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e151      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002084:	4b80      	ldr	r3, [pc, #512]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1ed      	bne.n	800206e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002092:	7ffb      	ldrb	r3, [r7, #31]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d105      	bne.n	80020a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002098:	4b7b      	ldr	r3, [pc, #492]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209c:	4a7a      	ldr	r2, [pc, #488]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 800209e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020a2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0320 	and.w	r3, r3, #32
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d03c      	beq.n	800212a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01c      	beq.n	80020f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020b8:	4b73      	ldr	r3, [pc, #460]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 80020ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020be:	4a72      	ldr	r2, [pc, #456]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7fe fd3a 	bl	8000b40 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020d0:	f7fe fd36 	bl	8000b40 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e122      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020e2:	4b69      	ldr	r3, [pc, #420]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 80020e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ef      	beq.n	80020d0 <HAL_RCC_OscConfig+0x5cc>
 80020f0:	e01b      	b.n	800212a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020f2:	4b65      	ldr	r3, [pc, #404]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 80020f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020f8:	4a63      	ldr	r2, [pc, #396]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 80020fa:	f023 0301 	bic.w	r3, r3, #1
 80020fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002102:	f7fe fd1d 	bl	8000b40 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800210a:	f7fe fd19 	bl	8000b40 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e105      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800211c:	4b5a      	ldr	r3, [pc, #360]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 800211e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1ef      	bne.n	800210a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 80f9 	beq.w	8002326 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002138:	2b02      	cmp	r3, #2
 800213a:	f040 80cf 	bne.w	80022dc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800213e:	4b52      	ldr	r3, [pc, #328]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f003 0203 	and.w	r2, r3, #3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214e:	429a      	cmp	r2, r3
 8002150:	d12c      	bne.n	80021ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215c:	3b01      	subs	r3, #1
 800215e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002160:	429a      	cmp	r2, r3
 8002162:	d123      	bne.n	80021ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800216e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002170:	429a      	cmp	r2, r3
 8002172:	d11b      	bne.n	80021ac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800217e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002180:	429a      	cmp	r2, r3
 8002182:	d113      	bne.n	80021ac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800218e:	085b      	lsrs	r3, r3, #1
 8002190:	3b01      	subs	r3, #1
 8002192:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002194:	429a      	cmp	r2, r3
 8002196:	d109      	bne.n	80021ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	085b      	lsrs	r3, r3, #1
 80021a4:	3b01      	subs	r3, #1
 80021a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d071      	beq.n	8002290 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	2b0c      	cmp	r3, #12
 80021b0:	d068      	beq.n	8002284 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021b2:	4b35      	ldr	r3, [pc, #212]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d105      	bne.n	80021ca <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021be:	4b32      	ldr	r3, [pc, #200]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e0ac      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 80021d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021da:	f7fe fcb1 	bl	8000b40 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e2:	f7fe fcad 	bl	8000b40 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e099      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f4:	4b24      	ldr	r3, [pc, #144]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1f0      	bne.n	80021e2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002200:	4b21      	ldr	r3, [pc, #132]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	4b21      	ldr	r3, [pc, #132]	@ (800228c <HAL_RCC_OscConfig+0x788>)
 8002206:	4013      	ands	r3, r2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002210:	3a01      	subs	r2, #1
 8002212:	0112      	lsls	r2, r2, #4
 8002214:	4311      	orrs	r1, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800221a:	0212      	lsls	r2, r2, #8
 800221c:	4311      	orrs	r1, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002222:	0852      	lsrs	r2, r2, #1
 8002224:	3a01      	subs	r2, #1
 8002226:	0552      	lsls	r2, r2, #21
 8002228:	4311      	orrs	r1, r2
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800222e:	0852      	lsrs	r2, r2, #1
 8002230:	3a01      	subs	r2, #1
 8002232:	0652      	lsls	r2, r2, #25
 8002234:	4311      	orrs	r1, r2
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800223a:	06d2      	lsls	r2, r2, #27
 800223c:	430a      	orrs	r2, r1
 800223e:	4912      	ldr	r1, [pc, #72]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 8002240:	4313      	orrs	r3, r2
 8002242:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002244:	4b10      	ldr	r3, [pc, #64]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0f      	ldr	r2, [pc, #60]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 800224a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800224e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002250:	4b0d      	ldr	r3, [pc, #52]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4a0c      	ldr	r2, [pc, #48]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 8002256:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800225a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800225c:	f7fe fc70 	bl	8000b40 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002264:	f7fe fc6c 	bl	8000b40 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e058      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002276:	4b04      	ldr	r3, [pc, #16]	@ (8002288 <HAL_RCC_OscConfig+0x784>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002282:	e050      	b.n	8002326 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e04f      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
 8002288:	40021000 	.word	0x40021000
 800228c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002290:	4b27      	ldr	r3, [pc, #156]	@ (8002330 <HAL_RCC_OscConfig+0x82c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d144      	bne.n	8002326 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800229c:	4b24      	ldr	r3, [pc, #144]	@ (8002330 <HAL_RCC_OscConfig+0x82c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a23      	ldr	r2, [pc, #140]	@ (8002330 <HAL_RCC_OscConfig+0x82c>)
 80022a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022a8:	4b21      	ldr	r3, [pc, #132]	@ (8002330 <HAL_RCC_OscConfig+0x82c>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	4a20      	ldr	r2, [pc, #128]	@ (8002330 <HAL_RCC_OscConfig+0x82c>)
 80022ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022b4:	f7fe fc44 	bl	8000b40 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022bc:	f7fe fc40 	bl	8000b40 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e02c      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ce:	4b18      	ldr	r3, [pc, #96]	@ (8002330 <HAL_RCC_OscConfig+0x82c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0x7b8>
 80022da:	e024      	b.n	8002326 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2b0c      	cmp	r3, #12
 80022e0:	d01f      	beq.n	8002322 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e2:	4b13      	ldr	r3, [pc, #76]	@ (8002330 <HAL_RCC_OscConfig+0x82c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a12      	ldr	r2, [pc, #72]	@ (8002330 <HAL_RCC_OscConfig+0x82c>)
 80022e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ee:	f7fe fc27 	bl	8000b40 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f6:	f7fe fc23 	bl	8000b40 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e00f      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002308:	4b09      	ldr	r3, [pc, #36]	@ (8002330 <HAL_RCC_OscConfig+0x82c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f0      	bne.n	80022f6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002314:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <HAL_RCC_OscConfig+0x82c>)
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	4905      	ldr	r1, [pc, #20]	@ (8002330 <HAL_RCC_OscConfig+0x82c>)
 800231a:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <HAL_RCC_OscConfig+0x830>)
 800231c:	4013      	ands	r3, r2
 800231e:	60cb      	str	r3, [r1, #12]
 8002320:	e001      	b.n	8002326 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3720      	adds	r7, #32
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	feeefffc 	.word	0xfeeefffc

08002338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e11d      	b.n	800258c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002350:	4b90      	ldr	r3, [pc, #576]	@ (8002594 <HAL_RCC_ClockConfig+0x25c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d910      	bls.n	8002380 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b8d      	ldr	r3, [pc, #564]	@ (8002594 <HAL_RCC_ClockConfig+0x25c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 020f 	bic.w	r2, r3, #15
 8002366:	498b      	ldr	r1, [pc, #556]	@ (8002594 <HAL_RCC_ClockConfig+0x25c>)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	4b89      	ldr	r3, [pc, #548]	@ (8002594 <HAL_RCC_ClockConfig+0x25c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e105      	b.n	800258c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d010      	beq.n	80023ae <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	4b81      	ldr	r3, [pc, #516]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002398:	429a      	cmp	r2, r3
 800239a:	d908      	bls.n	80023ae <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800239c:	4b7e      	ldr	r3, [pc, #504]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	497b      	ldr	r1, [pc, #492]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d079      	beq.n	80024ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d11e      	bne.n	8002400 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c2:	4b75      	ldr	r3, [pc, #468]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e0dc      	b.n	800258c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80023d2:	f000 f9d1 	bl	8002778 <RCC_GetSysClockFreqFromPLLSource>
 80023d6:	4603      	mov	r3, r0
 80023d8:	4a70      	ldr	r2, [pc, #448]	@ (800259c <HAL_RCC_ClockConfig+0x264>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d946      	bls.n	800246c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80023de:	4b6e      	ldr	r3, [pc, #440]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d140      	bne.n	800246c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023ea:	4b6b      	ldr	r3, [pc, #428]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023f2:	4a69      	ldr	r2, [pc, #420]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 80023f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023fa:	2380      	movs	r3, #128	@ 0x80
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	e035      	b.n	800246c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d107      	bne.n	8002418 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002408:	4b63      	ldr	r3, [pc, #396]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d115      	bne.n	8002440 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0b9      	b.n	800258c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d107      	bne.n	8002430 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002420:	4b5d      	ldr	r3, [pc, #372]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d109      	bne.n	8002440 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0ad      	b.n	800258c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002430:	4b59      	ldr	r3, [pc, #356]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0a5      	b.n	800258c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002440:	f000 f8b4 	bl	80025ac <HAL_RCC_GetSysClockFreq>
 8002444:	4603      	mov	r3, r0
 8002446:	4a55      	ldr	r2, [pc, #340]	@ (800259c <HAL_RCC_ClockConfig+0x264>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d90f      	bls.n	800246c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800244c:	4b52      	ldr	r3, [pc, #328]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d109      	bne.n	800246c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002458:	4b4f      	ldr	r3, [pc, #316]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002460:	4a4d      	ldr	r2, [pc, #308]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 8002462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002466:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002468:	2380      	movs	r3, #128	@ 0x80
 800246a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800246c:	4b4a      	ldr	r3, [pc, #296]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f023 0203 	bic.w	r2, r3, #3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4947      	ldr	r1, [pc, #284]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 800247a:	4313      	orrs	r3, r2
 800247c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800247e:	f7fe fb5f 	bl	8000b40 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002484:	e00a      	b.n	800249c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002486:	f7fe fb5b 	bl	8000b40 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002494:	4293      	cmp	r3, r2
 8002496:	d901      	bls.n	800249c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e077      	b.n	800258c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249c:	4b3e      	ldr	r3, [pc, #248]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 020c 	and.w	r2, r3, #12
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d1eb      	bne.n	8002486 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2b80      	cmp	r3, #128	@ 0x80
 80024b2:	d105      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024b4:	4b38      	ldr	r3, [pc, #224]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	4a37      	ldr	r2, [pc, #220]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 80024ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024be:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d010      	beq.n	80024ee <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	4b31      	ldr	r3, [pc, #196]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024d8:	429a      	cmp	r2, r3
 80024da:	d208      	bcs.n	80024ee <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	492b      	ldr	r1, [pc, #172]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024ee:	4b29      	ldr	r3, [pc, #164]	@ (8002594 <HAL_RCC_ClockConfig+0x25c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d210      	bcs.n	800251e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fc:	4b25      	ldr	r3, [pc, #148]	@ (8002594 <HAL_RCC_ClockConfig+0x25c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f023 020f 	bic.w	r2, r3, #15
 8002504:	4923      	ldr	r1, [pc, #140]	@ (8002594 <HAL_RCC_ClockConfig+0x25c>)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	4313      	orrs	r3, r2
 800250a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800250c:	4b21      	ldr	r3, [pc, #132]	@ (8002594 <HAL_RCC_ClockConfig+0x25c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 030f 	and.w	r3, r3, #15
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d001      	beq.n	800251e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e036      	b.n	800258c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b00      	cmp	r3, #0
 8002528:	d008      	beq.n	800253c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800252a:	4b1b      	ldr	r3, [pc, #108]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	4918      	ldr	r1, [pc, #96]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 8002538:	4313      	orrs	r3, r2
 800253a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b00      	cmp	r3, #0
 8002546:	d009      	beq.n	800255c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002548:	4b13      	ldr	r3, [pc, #76]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4910      	ldr	r1, [pc, #64]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 8002558:	4313      	orrs	r3, r2
 800255a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800255c:	f000 f826 	bl	80025ac <HAL_RCC_GetSysClockFreq>
 8002560:	4602      	mov	r2, r0
 8002562:	4b0d      	ldr	r3, [pc, #52]	@ (8002598 <HAL_RCC_ClockConfig+0x260>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	490c      	ldr	r1, [pc, #48]	@ (80025a0 <HAL_RCC_ClockConfig+0x268>)
 800256e:	5ccb      	ldrb	r3, [r1, r3]
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
 8002578:	4a0a      	ldr	r2, [pc, #40]	@ (80025a4 <HAL_RCC_ClockConfig+0x26c>)
 800257a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800257c:	4b0a      	ldr	r3, [pc, #40]	@ (80025a8 <HAL_RCC_ClockConfig+0x270>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fa8d 	bl	8000aa0 <HAL_InitTick>
 8002586:	4603      	mov	r3, r0
 8002588:	73fb      	strb	r3, [r7, #15]

  return status;
 800258a:	7bfb      	ldrb	r3, [r7, #15]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40022000 	.word	0x40022000
 8002598:	40021000 	.word	0x40021000
 800259c:	04c4b400 	.word	0x04c4b400
 80025a0:	080032e4 	.word	0x080032e4
 80025a4:	20040008 	.word	0x20040008
 80025a8:	2004000c 	.word	0x2004000c

080025ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b089      	sub	sp, #36	@ 0x24
 80025b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	2300      	movs	r3, #0
 80025b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ba:	4b3e      	ldr	r3, [pc, #248]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025c4:	4b3b      	ldr	r3, [pc, #236]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_RCC_GetSysClockFreq+0x34>
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	2b0c      	cmp	r3, #12
 80025d8:	d121      	bne.n	800261e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d11e      	bne.n	800261e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025e0:	4b34      	ldr	r3, [pc, #208]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025ec:	4b31      	ldr	r3, [pc, #196]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025f2:	0a1b      	lsrs	r3, r3, #8
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	61fb      	str	r3, [r7, #28]
 80025fa:	e005      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025fc:	4b2d      	ldr	r3, [pc, #180]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002608:	4a2b      	ldr	r2, [pc, #172]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002610:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10d      	bne.n	8002634 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800261c:	e00a      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	2b04      	cmp	r3, #4
 8002622:	d102      	bne.n	800262a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002624:	4b25      	ldr	r3, [pc, #148]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	e004      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	2b08      	cmp	r3, #8
 800262e:	d101      	bne.n	8002634 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002630:	4b23      	ldr	r3, [pc, #140]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002632:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	2b0c      	cmp	r3, #12
 8002638:	d134      	bne.n	80026a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800263a:	4b1e      	ldr	r3, [pc, #120]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d003      	beq.n	8002652 <HAL_RCC_GetSysClockFreq+0xa6>
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d003      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0xac>
 8002650:	e005      	b.n	800265e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002652:	4b1a      	ldr	r3, [pc, #104]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002654:	617b      	str	r3, [r7, #20]
      break;
 8002656:	e005      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002658:	4b19      	ldr	r3, [pc, #100]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800265a:	617b      	str	r3, [r7, #20]
      break;
 800265c:	e002      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	617b      	str	r3, [r7, #20]
      break;
 8002662:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002664:	4b13      	ldr	r3, [pc, #76]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	091b      	lsrs	r3, r3, #4
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	3301      	adds	r3, #1
 8002670:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002672:	4b10      	ldr	r3, [pc, #64]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	0a1b      	lsrs	r3, r3, #8
 8002678:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	fb03 f202 	mul.w	r2, r3, r2
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800268a:	4b0a      	ldr	r3, [pc, #40]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	0e5b      	lsrs	r3, r3, #25
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	3301      	adds	r3, #1
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026a4:	69bb      	ldr	r3, [r7, #24]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3724      	adds	r7, #36	@ 0x24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000
 80026b8:	080032f4 	.word	0x080032f4
 80026bc:	00f42400 	.word	0x00f42400
 80026c0:	007a1200 	.word	0x007a1200

080026c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026cc:	2300      	movs	r3, #0
 80026ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026d0:	4b27      	ldr	r3, [pc, #156]	@ (8002770 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80026d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026dc:	f7ff f93e 	bl	800195c <HAL_PWREx_GetVoltageRange>
 80026e0:	6178      	str	r0, [r7, #20]
 80026e2:	e014      	b.n	800270e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026e4:	4b22      	ldr	r3, [pc, #136]	@ (8002770 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e8:	4a21      	ldr	r2, [pc, #132]	@ (8002770 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80026ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80026f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002770 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026fc:	f7ff f92e 	bl	800195c <HAL_PWREx_GetVoltageRange>
 8002700:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002702:	4b1b      	ldr	r3, [pc, #108]	@ (8002770 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002706:	4a1a      	ldr	r2, [pc, #104]	@ (8002770 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002708:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800270c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002714:	d10b      	bne.n	800272e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b80      	cmp	r3, #128	@ 0x80
 800271a:	d913      	bls.n	8002744 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002720:	d902      	bls.n	8002728 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002722:	2302      	movs	r3, #2
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	e00d      	b.n	8002744 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002728:	2301      	movs	r3, #1
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	e00a      	b.n	8002744 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b7f      	cmp	r3, #127	@ 0x7f
 8002732:	d902      	bls.n	800273a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002734:	2302      	movs	r3, #2
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	e004      	b.n	8002744 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b70      	cmp	r3, #112	@ 0x70
 800273e:	d101      	bne.n	8002744 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002740:	2301      	movs	r3, #1
 8002742:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002744:	4b0b      	ldr	r3, [pc, #44]	@ (8002774 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f023 020f 	bic.w	r2, r3, #15
 800274c:	4909      	ldr	r1, [pc, #36]	@ (8002774 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002754:	4b07      	ldr	r3, [pc, #28]	@ (8002774 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 030f 	and.w	r3, r3, #15
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	429a      	cmp	r2, r3
 8002760:	d001      	beq.n	8002766 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40021000 	.word	0x40021000
 8002774:	40022000 	.word	0x40022000

08002778 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800277e:	4b2d      	ldr	r3, [pc, #180]	@ (8002834 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2b03      	cmp	r3, #3
 800278c:	d00b      	beq.n	80027a6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b03      	cmp	r3, #3
 8002792:	d825      	bhi.n	80027e0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d008      	beq.n	80027ac <RCC_GetSysClockFreqFromPLLSource+0x34>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d11f      	bne.n	80027e0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80027a0:	4b25      	ldr	r3, [pc, #148]	@ (8002838 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80027a2:	613b      	str	r3, [r7, #16]
    break;
 80027a4:	e01f      	b.n	80027e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80027a6:	4b25      	ldr	r3, [pc, #148]	@ (800283c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80027a8:	613b      	str	r3, [r7, #16]
    break;
 80027aa:	e01c      	b.n	80027e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027ac:	4b21      	ldr	r3, [pc, #132]	@ (8002834 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d107      	bne.n	80027c8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002834 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80027ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027be:	0a1b      	lsrs	r3, r3, #8
 80027c0:	f003 030f 	and.w	r3, r3, #15
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	e005      	b.n	80027d4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002834 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80027d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002840 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027dc:	613b      	str	r3, [r7, #16]
    break;
 80027de:	e002      	b.n	80027e6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	613b      	str	r3, [r7, #16]
    break;
 80027e4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027e6:	4b13      	ldr	r3, [pc, #76]	@ (8002834 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	3301      	adds	r3, #1
 80027f2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002834 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	0a1b      	lsrs	r3, r3, #8
 80027fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	fb03 f202 	mul.w	r2, r3, r2
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	fbb2 f3f3 	udiv	r3, r2, r3
 800280a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800280c:	4b09      	ldr	r3, [pc, #36]	@ (8002834 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	0e5b      	lsrs	r3, r3, #25
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	3301      	adds	r3, #1
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	fbb2 f3f3 	udiv	r3, r2, r3
 8002824:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002826:	683b      	ldr	r3, [r7, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	371c      	adds	r7, #28
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	40021000 	.word	0x40021000
 8002838:	00f42400 	.word	0x00f42400
 800283c:	007a1200 	.word	0x007a1200
 8002840:	080032f4 	.word	0x080032f4

08002844 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800284c:	2300      	movs	r3, #0
 800284e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002850:	2300      	movs	r3, #0
 8002852:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800285c:	2b00      	cmp	r3, #0
 800285e:	d040      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002864:	2b80      	cmp	r3, #128	@ 0x80
 8002866:	d02a      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002868:	2b80      	cmp	r3, #128	@ 0x80
 800286a:	d825      	bhi.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800286c:	2b60      	cmp	r3, #96	@ 0x60
 800286e:	d026      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002870:	2b60      	cmp	r3, #96	@ 0x60
 8002872:	d821      	bhi.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002874:	2b40      	cmp	r3, #64	@ 0x40
 8002876:	d006      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002878:	2b40      	cmp	r3, #64	@ 0x40
 800287a:	d81d      	bhi.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800287c:	2b00      	cmp	r3, #0
 800287e:	d009      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002880:	2b20      	cmp	r3, #32
 8002882:	d010      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002884:	e018      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002886:	4b89      	ldr	r3, [pc, #548]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	4a88      	ldr	r2, [pc, #544]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800288c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002890:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002892:	e015      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3304      	adds	r3, #4
 8002898:	2100      	movs	r1, #0
 800289a:	4618      	mov	r0, r3
 800289c:	f000 fb02 	bl	8002ea4 <RCCEx_PLLSAI1_Config>
 80028a0:	4603      	mov	r3, r0
 80028a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028a4:	e00c      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3320      	adds	r3, #32
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 fbed 	bl	800308c <RCCEx_PLLSAI2_Config>
 80028b2:	4603      	mov	r3, r0
 80028b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028b6:	e003      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	74fb      	strb	r3, [r7, #19]
      break;
 80028bc:	e000      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80028be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028c0:	7cfb      	ldrb	r3, [r7, #19]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10b      	bne.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028c6:	4b79      	ldr	r3, [pc, #484]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028cc:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028d4:	4975      	ldr	r1, [pc, #468]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80028dc:	e001      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028de:	7cfb      	ldrb	r3, [r7, #19]
 80028e0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d047      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028f6:	d030      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80028f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028fc:	d82a      	bhi.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80028fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002902:	d02a      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002904:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002908:	d824      	bhi.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800290a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800290e:	d008      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002914:	d81e      	bhi.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800291a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800291e:	d010      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002920:	e018      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002922:	4b62      	ldr	r3, [pc, #392]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	4a61      	ldr	r2, [pc, #388]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800292c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800292e:	e015      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3304      	adds	r3, #4
 8002934:	2100      	movs	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f000 fab4 	bl	8002ea4 <RCCEx_PLLSAI1_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002940:	e00c      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3320      	adds	r3, #32
 8002946:	2100      	movs	r1, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f000 fb9f 	bl	800308c <RCCEx_PLLSAI2_Config>
 800294e:	4603      	mov	r3, r0
 8002950:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002952:	e003      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	74fb      	strb	r3, [r7, #19]
      break;
 8002958:	e000      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800295a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800295c:	7cfb      	ldrb	r3, [r7, #19]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10b      	bne.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002962:	4b52      	ldr	r3, [pc, #328]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002964:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002968:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002970:	494e      	ldr	r1, [pc, #312]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002978:	e001      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800297a:	7cfb      	ldrb	r3, [r7, #19]
 800297c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 809f 	beq.w	8002aca <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800298c:	2300      	movs	r3, #0
 800298e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002990:	4b46      	ldr	r3, [pc, #280]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80029a0:	2300      	movs	r3, #0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00d      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a6:	4b41      	ldr	r3, [pc, #260]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029aa:	4a40      	ldr	r2, [pc, #256]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80029b2:	4b3e      	ldr	r3, [pc, #248]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029be:	2301      	movs	r3, #1
 80029c0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029c2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a3a      	ldr	r2, [pc, #232]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80029c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029ce:	f7fe f8b7 	bl	8000b40 <HAL_GetTick>
 80029d2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029d4:	e009      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d6:	f7fe f8b3 	bl	8000b40 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d902      	bls.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	74fb      	strb	r3, [r7, #19]
        break;
 80029e8:	e005      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029ea:	4b31      	ldr	r3, [pc, #196]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0ef      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80029f6:	7cfb      	ldrb	r3, [r7, #19]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d15b      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029fc:	4b2b      	ldr	r3, [pc, #172]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a06:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d01f      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d019      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a1a:	4b24      	ldr	r3, [pc, #144]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a24:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a26:	4b21      	ldr	r3, [pc, #132]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a36:	4b1d      	ldr	r3, [pc, #116]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a46:	4a19      	ldr	r2, [pc, #100]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d016      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a58:	f7fe f872 	bl	8000b40 <HAL_GetTick>
 8002a5c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a5e:	e00b      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a60:	f7fe f86e 	bl	8000b40 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d902      	bls.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	74fb      	strb	r3, [r7, #19]
            break;
 8002a76:	e006      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a78:	4b0c      	ldr	r3, [pc, #48]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0ec      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002a86:	7cfb      	ldrb	r3, [r7, #19]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10c      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a8c:	4b07      	ldr	r3, [pc, #28]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a92:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a9c:	4903      	ldr	r1, [pc, #12]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002aa6:	7cfb      	ldrb	r3, [r7, #19]
 8002aa8:	74bb      	strb	r3, [r7, #18]
 8002aaa:	e005      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab4:	7cfb      	ldrb	r3, [r7, #19]
 8002ab6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ab8:	7c7b      	ldrb	r3, [r7, #17]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d105      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002abe:	4ba0      	ldr	r3, [pc, #640]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac2:	4a9f      	ldr	r2, [pc, #636]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ac4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ac8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ad6:	4b9a      	ldr	r3, [pc, #616]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002adc:	f023 0203 	bic.w	r2, r3, #3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae4:	4996      	ldr	r1, [pc, #600]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00a      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002af8:	4b91      	ldr	r3, [pc, #580]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afe:	f023 020c 	bic.w	r2, r3, #12
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	498e      	ldr	r1, [pc, #568]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b1a:	4b89      	ldr	r3, [pc, #548]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b20:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b28:	4985      	ldr	r1, [pc, #532]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b3c:	4b80      	ldr	r3, [pc, #512]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b4a:	497d      	ldr	r1, [pc, #500]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b5e:	4b78      	ldr	r3, [pc, #480]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6c:	4974      	ldr	r1, [pc, #464]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b80:	4b6f      	ldr	r3, [pc, #444]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b86:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b8e:	496c      	ldr	r1, [pc, #432]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ba2:	4b67      	ldr	r3, [pc, #412]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bb0:	4963      	ldr	r1, [pc, #396]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bc4:	4b5e      	ldr	r3, [pc, #376]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bd2:	495b      	ldr	r1, [pc, #364]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002be6:	4b56      	ldr	r3, [pc, #344]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf4:	4952      	ldr	r1, [pc, #328]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c08:	4b4d      	ldr	r3, [pc, #308]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c16:	494a      	ldr	r1, [pc, #296]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c2a:	4b45      	ldr	r3, [pc, #276]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c38:	4941      	ldr	r1, [pc, #260]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00a      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c4c:	4b3c      	ldr	r3, [pc, #240]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c52:	f023 0203 	bic.w	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c5a:	4939      	ldr	r1, [pc, #228]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d028      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c6e:	4b34      	ldr	r3, [pc, #208]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c74:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c7c:	4930      	ldr	r1, [pc, #192]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c8c:	d106      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c8e:	4b2c      	ldr	r3, [pc, #176]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	4a2b      	ldr	r2, [pc, #172]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c98:	60d3      	str	r3, [r2, #12]
 8002c9a:	e011      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ca0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	2101      	movs	r1, #1
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 f8f9 	bl	8002ea4 <RCCEx_PLLSAI1_Config>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002cb6:	7cfb      	ldrb	r3, [r7, #19]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002cbc:	7cfb      	ldrb	r3, [r7, #19]
 8002cbe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d04d      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cd4:	d108      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002cdc:	4a18      	ldr	r2, [pc, #96]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ce2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002ce6:	e012      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002ce8:	4b15      	ldr	r3, [pc, #84]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002cee:	4a14      	ldr	r2, [pc, #80]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cf0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cf4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002cf8:	4b11      	ldr	r3, [pc, #68]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d06:	490e      	ldr	r1, [pc, #56]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d16:	d106      	bne.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d18:	4b09      	ldr	r3, [pc, #36]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4a08      	ldr	r2, [pc, #32]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d22:	60d3      	str	r3, [r2, #12]
 8002d24:	e020      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d2e:	d109      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d30:	4b03      	ldr	r3, [pc, #12]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4a02      	ldr	r2, [pc, #8]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d3a:	60d3      	str	r3, [r2, #12]
 8002d3c:	e014      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d4c:	d10c      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3304      	adds	r3, #4
 8002d52:	2101      	movs	r1, #1
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 f8a5 	bl	8002ea4 <RCCEx_PLLSAI1_Config>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d5e:	7cfb      	ldrb	r3, [r7, #19]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002d64:	7cfb      	ldrb	r3, [r7, #19]
 8002d66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d028      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d74:	4b4a      	ldr	r3, [pc, #296]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d82:	4947      	ldr	r1, [pc, #284]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d92:	d106      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d94:	4b42      	ldr	r3, [pc, #264]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4a41      	ldr	r2, [pc, #260]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d9e:	60d3      	str	r3, [r2, #12]
 8002da0:	e011      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002da6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002daa:	d10c      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3304      	adds	r3, #4
 8002db0:	2101      	movs	r1, #1
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 f876 	bl	8002ea4 <RCCEx_PLLSAI1_Config>
 8002db8:	4603      	mov	r3, r0
 8002dba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dbc:	7cfb      	ldrb	r3, [r7, #19]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002dc2:	7cfb      	ldrb	r3, [r7, #19]
 8002dc4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d01e      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dd2:	4b33      	ldr	r3, [pc, #204]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002de2:	492f      	ldr	r1, [pc, #188]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002df0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	2102      	movs	r1, #2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 f851 	bl	8002ea4 <RCCEx_PLLSAI1_Config>
 8002e02:	4603      	mov	r3, r0
 8002e04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e06:	7cfb      	ldrb	r3, [r7, #19]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002e0c:	7cfb      	ldrb	r3, [r7, #19]
 8002e0e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00b      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e1c:	4b20      	ldr	r3, [pc, #128]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e22:	f023 0204 	bic.w	r2, r3, #4
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e2c:	491c      	ldr	r1, [pc, #112]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00b      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002e40:	4b17      	ldr	r3, [pc, #92]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e46:	f023 0218 	bic.w	r2, r3, #24
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e50:	4913      	ldr	r1, [pc, #76]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d017      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002e64:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e74:	490a      	ldr	r1, [pc, #40]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e86:	d105      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e88:	4b05      	ldr	r3, [pc, #20]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4a04      	ldr	r2, [pc, #16]	@ (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e94:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000

08002ea4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eb2:	4b72      	ldr	r3, [pc, #456]	@ (800307c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00e      	beq.n	8002edc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ebe:	4b6f      	ldr	r3, [pc, #444]	@ (800307c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f003 0203 	and.w	r2, r3, #3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d103      	bne.n	8002ed6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d142      	bne.n	8002f5c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
 8002eda:	e03f      	b.n	8002f5c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d018      	beq.n	8002f16 <RCCEx_PLLSAI1_Config+0x72>
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d825      	bhi.n	8002f34 <RCCEx_PLLSAI1_Config+0x90>
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d002      	beq.n	8002ef2 <RCCEx_PLLSAI1_Config+0x4e>
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d009      	beq.n	8002f04 <RCCEx_PLLSAI1_Config+0x60>
 8002ef0:	e020      	b.n	8002f34 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ef2:	4b62      	ldr	r3, [pc, #392]	@ (800307c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d11d      	bne.n	8002f3a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f02:	e01a      	b.n	8002f3a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f04:	4b5d      	ldr	r3, [pc, #372]	@ (800307c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d116      	bne.n	8002f3e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f14:	e013      	b.n	8002f3e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f16:	4b59      	ldr	r3, [pc, #356]	@ (800307c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10f      	bne.n	8002f42 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f22:	4b56      	ldr	r3, [pc, #344]	@ (800307c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f32:	e006      	b.n	8002f42 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
      break;
 8002f38:	e004      	b.n	8002f44 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002f3a:	bf00      	nop
 8002f3c:	e002      	b.n	8002f44 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002f3e:	bf00      	nop
 8002f40:	e000      	b.n	8002f44 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002f42:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d108      	bne.n	8002f5c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002f4a:	4b4c      	ldr	r3, [pc, #304]	@ (800307c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f023 0203 	bic.w	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4949      	ldr	r1, [pc, #292]	@ (800307c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f040 8086 	bne.w	8003070 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f64:	4b45      	ldr	r3, [pc, #276]	@ (800307c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a44      	ldr	r2, [pc, #272]	@ (800307c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f70:	f7fd fde6 	bl	8000b40 <HAL_GetTick>
 8002f74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f76:	e009      	b.n	8002f8c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f78:	f7fd fde2 	bl	8000b40 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d902      	bls.n	8002f8c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	73fb      	strb	r3, [r7, #15]
        break;
 8002f8a:	e005      	b.n	8002f98 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f8c:	4b3b      	ldr	r3, [pc, #236]	@ (800307c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1ef      	bne.n	8002f78 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d168      	bne.n	8003070 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d113      	bne.n	8002fcc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fa4:	4b35      	ldr	r3, [pc, #212]	@ (800307c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	4b35      	ldr	r3, [pc, #212]	@ (8003080 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6892      	ldr	r2, [r2, #8]
 8002fb0:	0211      	lsls	r1, r2, #8
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68d2      	ldr	r2, [r2, #12]
 8002fb6:	06d2      	lsls	r2, r2, #27
 8002fb8:	4311      	orrs	r1, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6852      	ldr	r2, [r2, #4]
 8002fbe:	3a01      	subs	r2, #1
 8002fc0:	0112      	lsls	r2, r2, #4
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	492d      	ldr	r1, [pc, #180]	@ (800307c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	610b      	str	r3, [r1, #16]
 8002fca:	e02d      	b.n	8003028 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d115      	bne.n	8002ffe <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800307c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8003084 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6892      	ldr	r2, [r2, #8]
 8002fde:	0211      	lsls	r1, r2, #8
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6912      	ldr	r2, [r2, #16]
 8002fe4:	0852      	lsrs	r2, r2, #1
 8002fe6:	3a01      	subs	r2, #1
 8002fe8:	0552      	lsls	r2, r2, #21
 8002fea:	4311      	orrs	r1, r2
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6852      	ldr	r2, [r2, #4]
 8002ff0:	3a01      	subs	r2, #1
 8002ff2:	0112      	lsls	r2, r2, #4
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	4921      	ldr	r1, [pc, #132]	@ (800307c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	610b      	str	r3, [r1, #16]
 8002ffc:	e014      	b.n	8003028 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800307c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003000:	691a      	ldr	r2, [r3, #16]
 8003002:	4b21      	ldr	r3, [pc, #132]	@ (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003004:	4013      	ands	r3, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6892      	ldr	r2, [r2, #8]
 800300a:	0211      	lsls	r1, r2, #8
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6952      	ldr	r2, [r2, #20]
 8003010:	0852      	lsrs	r2, r2, #1
 8003012:	3a01      	subs	r2, #1
 8003014:	0652      	lsls	r2, r2, #25
 8003016:	4311      	orrs	r1, r2
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6852      	ldr	r2, [r2, #4]
 800301c:	3a01      	subs	r2, #1
 800301e:	0112      	lsls	r2, r2, #4
 8003020:	430a      	orrs	r2, r1
 8003022:	4916      	ldr	r1, [pc, #88]	@ (800307c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003024:	4313      	orrs	r3, r2
 8003026:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003028:	4b14      	ldr	r3, [pc, #80]	@ (800307c <RCCEx_PLLSAI1_Config+0x1d8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a13      	ldr	r2, [pc, #76]	@ (800307c <RCCEx_PLLSAI1_Config+0x1d8>)
 800302e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003032:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003034:	f7fd fd84 	bl	8000b40 <HAL_GetTick>
 8003038:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800303a:	e009      	b.n	8003050 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800303c:	f7fd fd80 	bl	8000b40 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d902      	bls.n	8003050 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	73fb      	strb	r3, [r7, #15]
          break;
 800304e:	e005      	b.n	800305c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003050:	4b0a      	ldr	r3, [pc, #40]	@ (800307c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0ef      	beq.n	800303c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003062:	4b06      	ldr	r3, [pc, #24]	@ (800307c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003064:	691a      	ldr	r2, [r3, #16]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	4904      	ldr	r1, [pc, #16]	@ (800307c <RCCEx_PLLSAI1_Config+0x1d8>)
 800306c:	4313      	orrs	r3, r2
 800306e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003070:	7bfb      	ldrb	r3, [r7, #15]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000
 8003080:	07ff800f 	.word	0x07ff800f
 8003084:	ff9f800f 	.word	0xff9f800f
 8003088:	f9ff800f 	.word	0xf9ff800f

0800308c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800309a:	4b72      	ldr	r3, [pc, #456]	@ (8003264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00e      	beq.n	80030c4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80030a6:	4b6f      	ldr	r3, [pc, #444]	@ (8003264 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f003 0203 	and.w	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d103      	bne.n	80030be <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
       ||
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d142      	bne.n	8003144 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	73fb      	strb	r3, [r7, #15]
 80030c2:	e03f      	b.n	8003144 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d018      	beq.n	80030fe <RCCEx_PLLSAI2_Config+0x72>
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d825      	bhi.n	800311c <RCCEx_PLLSAI2_Config+0x90>
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d002      	beq.n	80030da <RCCEx_PLLSAI2_Config+0x4e>
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d009      	beq.n	80030ec <RCCEx_PLLSAI2_Config+0x60>
 80030d8:	e020      	b.n	800311c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030da:	4b62      	ldr	r3, [pc, #392]	@ (8003264 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d11d      	bne.n	8003122 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ea:	e01a      	b.n	8003122 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030ec:	4b5d      	ldr	r3, [pc, #372]	@ (8003264 <RCCEx_PLLSAI2_Config+0x1d8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d116      	bne.n	8003126 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030fc:	e013      	b.n	8003126 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030fe:	4b59      	ldr	r3, [pc, #356]	@ (8003264 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10f      	bne.n	800312a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800310a:	4b56      	ldr	r3, [pc, #344]	@ (8003264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800311a:	e006      	b.n	800312a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
      break;
 8003120:	e004      	b.n	800312c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003122:	bf00      	nop
 8003124:	e002      	b.n	800312c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003126:	bf00      	nop
 8003128:	e000      	b.n	800312c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800312a:	bf00      	nop
    }

    if(status == HAL_OK)
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d108      	bne.n	8003144 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003132:	4b4c      	ldr	r3, [pc, #304]	@ (8003264 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f023 0203 	bic.w	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4949      	ldr	r1, [pc, #292]	@ (8003264 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003140:	4313      	orrs	r3, r2
 8003142:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	2b00      	cmp	r3, #0
 8003148:	f040 8086 	bne.w	8003258 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800314c:	4b45      	ldr	r3, [pc, #276]	@ (8003264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a44      	ldr	r2, [pc, #272]	@ (8003264 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003152:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003156:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003158:	f7fd fcf2 	bl	8000b40 <HAL_GetTick>
 800315c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800315e:	e009      	b.n	8003174 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003160:	f7fd fcee 	bl	8000b40 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d902      	bls.n	8003174 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	73fb      	strb	r3, [r7, #15]
        break;
 8003172:	e005      	b.n	8003180 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003174:	4b3b      	ldr	r3, [pc, #236]	@ (8003264 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1ef      	bne.n	8003160 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d168      	bne.n	8003258 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d113      	bne.n	80031b4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800318c:	4b35      	ldr	r3, [pc, #212]	@ (8003264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800318e:	695a      	ldr	r2, [r3, #20]
 8003190:	4b35      	ldr	r3, [pc, #212]	@ (8003268 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003192:	4013      	ands	r3, r2
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6892      	ldr	r2, [r2, #8]
 8003198:	0211      	lsls	r1, r2, #8
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	68d2      	ldr	r2, [r2, #12]
 800319e:	06d2      	lsls	r2, r2, #27
 80031a0:	4311      	orrs	r1, r2
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6852      	ldr	r2, [r2, #4]
 80031a6:	3a01      	subs	r2, #1
 80031a8:	0112      	lsls	r2, r2, #4
 80031aa:	430a      	orrs	r2, r1
 80031ac:	492d      	ldr	r1, [pc, #180]	@ (8003264 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	614b      	str	r3, [r1, #20]
 80031b2:	e02d      	b.n	8003210 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d115      	bne.n	80031e6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003264 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031bc:	695a      	ldr	r2, [r3, #20]
 80031be:	4b2b      	ldr	r3, [pc, #172]	@ (800326c <RCCEx_PLLSAI2_Config+0x1e0>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6892      	ldr	r2, [r2, #8]
 80031c6:	0211      	lsls	r1, r2, #8
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6912      	ldr	r2, [r2, #16]
 80031cc:	0852      	lsrs	r2, r2, #1
 80031ce:	3a01      	subs	r2, #1
 80031d0:	0552      	lsls	r2, r2, #21
 80031d2:	4311      	orrs	r1, r2
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6852      	ldr	r2, [r2, #4]
 80031d8:	3a01      	subs	r2, #1
 80031da:	0112      	lsls	r2, r2, #4
 80031dc:	430a      	orrs	r2, r1
 80031de:	4921      	ldr	r1, [pc, #132]	@ (8003264 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	614b      	str	r3, [r1, #20]
 80031e4:	e014      	b.n	8003210 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003264 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	4b21      	ldr	r3, [pc, #132]	@ (8003270 <RCCEx_PLLSAI2_Config+0x1e4>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6892      	ldr	r2, [r2, #8]
 80031f2:	0211      	lsls	r1, r2, #8
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6952      	ldr	r2, [r2, #20]
 80031f8:	0852      	lsrs	r2, r2, #1
 80031fa:	3a01      	subs	r2, #1
 80031fc:	0652      	lsls	r2, r2, #25
 80031fe:	4311      	orrs	r1, r2
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6852      	ldr	r2, [r2, #4]
 8003204:	3a01      	subs	r2, #1
 8003206:	0112      	lsls	r2, r2, #4
 8003208:	430a      	orrs	r2, r1
 800320a:	4916      	ldr	r1, [pc, #88]	@ (8003264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800320c:	4313      	orrs	r3, r2
 800320e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003210:	4b14      	ldr	r3, [pc, #80]	@ (8003264 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a13      	ldr	r2, [pc, #76]	@ (8003264 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003216:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800321a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321c:	f7fd fc90 	bl	8000b40 <HAL_GetTick>
 8003220:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003222:	e009      	b.n	8003238 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003224:	f7fd fc8c 	bl	8000b40 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d902      	bls.n	8003238 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	73fb      	strb	r3, [r7, #15]
          break;
 8003236:	e005      	b.n	8003244 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003238:	4b0a      	ldr	r3, [pc, #40]	@ (8003264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0ef      	beq.n	8003224 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800324a:	4b06      	ldr	r3, [pc, #24]	@ (8003264 <RCCEx_PLLSAI2_Config+0x1d8>)
 800324c:	695a      	ldr	r2, [r3, #20]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	4904      	ldr	r1, [pc, #16]	@ (8003264 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003254:	4313      	orrs	r3, r2
 8003256:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003258:	7bfb      	ldrb	r3, [r7, #15]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40021000 	.word	0x40021000
 8003268:	07ff800f 	.word	0x07ff800f
 800326c:	ff9f800f 	.word	0xff9f800f
 8003270:	f9ff800f 	.word	0xf9ff800f

08003274 <memset>:
 8003274:	4402      	add	r2, r0
 8003276:	4603      	mov	r3, r0
 8003278:	4293      	cmp	r3, r2
 800327a:	d100      	bne.n	800327e <memset+0xa>
 800327c:	4770      	bx	lr
 800327e:	f803 1b01 	strb.w	r1, [r3], #1
 8003282:	e7f9      	b.n	8003278 <memset+0x4>

08003284 <__libc_init_array>:
 8003284:	b570      	push	{r4, r5, r6, lr}
 8003286:	4d0d      	ldr	r5, [pc, #52]	@ (80032bc <__libc_init_array+0x38>)
 8003288:	4c0d      	ldr	r4, [pc, #52]	@ (80032c0 <__libc_init_array+0x3c>)
 800328a:	1b64      	subs	r4, r4, r5
 800328c:	10a4      	asrs	r4, r4, #2
 800328e:	2600      	movs	r6, #0
 8003290:	42a6      	cmp	r6, r4
 8003292:	d109      	bne.n	80032a8 <__libc_init_array+0x24>
 8003294:	4d0b      	ldr	r5, [pc, #44]	@ (80032c4 <__libc_init_array+0x40>)
 8003296:	4c0c      	ldr	r4, [pc, #48]	@ (80032c8 <__libc_init_array+0x44>)
 8003298:	f000 f818 	bl	80032cc <_init>
 800329c:	1b64      	subs	r4, r4, r5
 800329e:	10a4      	asrs	r4, r4, #2
 80032a0:	2600      	movs	r6, #0
 80032a2:	42a6      	cmp	r6, r4
 80032a4:	d105      	bne.n	80032b2 <__libc_init_array+0x2e>
 80032a6:	bd70      	pop	{r4, r5, r6, pc}
 80032a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ac:	4798      	blx	r3
 80032ae:	3601      	adds	r6, #1
 80032b0:	e7ee      	b.n	8003290 <__libc_init_array+0xc>
 80032b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b6:	4798      	blx	r3
 80032b8:	3601      	adds	r6, #1
 80032ba:	e7f2      	b.n	80032a2 <__libc_init_array+0x1e>
 80032bc:	08003324 	.word	0x08003324
 80032c0:	08003324 	.word	0x08003324
 80032c4:	08003324 	.word	0x08003324
 80032c8:	08003328 	.word	0x08003328

080032cc <_init>:
 80032cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ce:	bf00      	nop
 80032d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032d2:	bc08      	pop	{r3}
 80032d4:	469e      	mov	lr, r3
 80032d6:	4770      	bx	lr

080032d8 <_fini>:
 80032d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032da:	bf00      	nop
 80032dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032de:	bc08      	pop	{r3}
 80032e0:	469e      	mov	lr, r3
 80032e2:	4770      	bx	lr
